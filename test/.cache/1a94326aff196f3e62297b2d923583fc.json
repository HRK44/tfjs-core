{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./broadcast_util","loc":{"line":12,"column":29}},{"name":"./operation","loc":{"line":13,"column":26}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar broadcast_util = require(\"./broadcast_util\");\nvar operation_1 = require(\"./operation\");\nvar CompareOps = (function () {\n    function CompareOps() {\n    }\n    CompareOps.notEqual = function (a, b) {\n        util.assertArgumentsAreTensors({ a: a, b: b }, 'notEqual');\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.notEqual(a, b); }, { a: a, b: b });\n    };\n    CompareOps.notEqualStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in notEqualStrict: ');\n        return a.notEqual(b);\n    };\n    CompareOps.less = function (a, b) {\n        util.assertArgumentsAreTensors({ a: a, b: b }, 'less');\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.less(a, b); }, { a: a, b: b });\n    };\n    CompareOps.lessStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in lessStrict: ');\n        return a.less(b);\n    };\n    CompareOps.equal = function (a, b) {\n        util.assertArgumentsAreTensors({ a: a, b: b }, 'equal');\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.equal(a, b); }, { a: a, b: b });\n    };\n    CompareOps.equalStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in equalStrict: ');\n        return a.equal(b);\n    };\n    CompareOps.lessEqual = function (a, b) {\n        util.assertArgumentsAreTensors({ a: a, b: b }, 'lessEqual');\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.lessEqual(a, b); }, { a: a, b: b });\n    };\n    CompareOps.lessEqualStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in lessEqualStrict: ');\n        return a.lessEqual(b);\n    };\n    CompareOps.greater = function (a, b) {\n        util.assertArgumentsAreTensors({ a: a, b: b }, 'greater');\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.greater(a, b); }, { a: a, b: b });\n    };\n    CompareOps.greaterStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in greaterStrict: ');\n        return a.greater(b);\n    };\n    CompareOps.greaterEqual = function (a, b) {\n        util.assertArgumentsAreTensors({ a: a, b: b }, 'greaterEqual');\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.greaterEqual(a, b); }, { a: a, b: b });\n    };\n    CompareOps.greaterEqualStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in greaterEqualStrict: ');\n        return a.greaterEqual(b);\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], CompareOps, \"notEqual\", null);\n    __decorate([\n        operation_1.operation\n    ], CompareOps, \"notEqualStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], CompareOps, \"less\", null);\n    __decorate([\n        operation_1.operation\n    ], CompareOps, \"lessStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], CompareOps, \"equal\", null);\n    __decorate([\n        operation_1.operation\n    ], CompareOps, \"equalStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], CompareOps, \"lessEqual\", null);\n    __decorate([\n        operation_1.operation\n    ], CompareOps, \"lessEqualStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], CompareOps, \"greater\", null);\n    __decorate([\n        operation_1.operation\n    ], CompareOps, \"greaterStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], CompareOps, \"greaterEqual\", null);\n    __decorate([\n        operation_1.operation\n    ], CompareOps, \"greaterEqualStrict\", null);\n    return CompareOps;\n}());\nexports.CompareOps = CompareOps;\n","map":{"version":3,"file":"compare.js","sourceRoot":"","sources":["../src/ops/compare.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {doc} from '../doc';\nimport {ENV} from '../environment';\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\nimport * as broadcast_util from './broadcast_util';\nimport {operation} from './operation';\n\nexport class CompareOps {\n  /**\n   * Returns the truth value of (a != b) element-wise. Supports broadcasting.\n   *\n   * We also expose `notEqualStrict` which has the same signature as this op and\n   * asserts that `a` and `b` are the same shape (does not broadcast).\n   *\n   * ```js\n   * const a = tf.tensor1d([1, 2, 3]);\n   * const b = tf.tensor1d([0, 2, 3]);\n   *\n   * a.notEqual(b).print();\n   * ```\n   * @param a The first input tensor.\n   * @param b The second input tensor. Must have the same dtype as `a`.\n   */\n  @doc({heading: 'Operations', subheading: 'Logical'})\n  @operation\n  static notEqual<T extends Tensor>(a: Tensor, b: Tensor): T {\n    util.assertArgumentsAreTensors({a, b}, 'notEqual');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    return ENV.engine.runKernel(backend => backend.notEqual(a, b), {a, b}) as T;\n  }\n\n  /**\n   * Strict version of `notEqual` that forces `a` and `b` to be of the same\n   * shape.\n   *\n   * @param a The first input tensor.\n   * @param b The second input tensor. Must have the same shape and dtype as\n   *     `a`.\n   */\n  @operation\n  static notEqualStrict<T extends Tensor>(a: T, b: T): T {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in notEqualStrict: ');\n    return a.notEqual(b);\n  }\n\n  /**\n   * Returns the truth value of (a < b) element-wise. Supports broadcasting.\n   *\n   * We also expose `lessStrict` which has the same signature as this op and\n   * asserts that `a` and `b` are the same shape (does not broadcast).\n   *\n   * ```js\n   * const a = tf.tensor1d([1, 2, 3]);\n   * const b = tf.tensor1d([2, 2, 2]);\n   *\n   * a.less(b).print();\n   * ```\n   * @param a The first input tensor.\n   * @param b The second input tensor. Must have the same dtype as `a`.\n   */\n  @doc({heading: 'Operations', subheading: 'Logical'})\n  @operation\n  static less<T extends Tensor>(a: Tensor, b: Tensor): T {\n    util.assertArgumentsAreTensors({a, b}, 'less');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    return ENV.engine.runKernel(backend => backend.less(a, b), {a, b}) as T;\n  }\n\n  /**\n   * Strict version of `less` that forces `a` and `b` to be of the same\n   * shape.\n   *\n   * @param a The first input tensor.\n   * @param b The second input tensor. Must have the same shape and dtype as\n   *     `a`.\n   */\n  @operation\n  static lessStrict<T extends Tensor>(a: T, b: T): T {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in lessStrict: ');\n    return a.less(b);\n  }\n\n  /**\n   * Returns the truth value of (a == b) element-wise. Supports broadcasting.\n   *\n   * We also expose `equalStrict` which has the same signature as this op\n   * and asserts that `a` and `b` are the same shape (does not broadcast).\n   *\n   * ```js\n   * const a = tf.tensor1d([1, 2, 3]);\n   * const b = tf.tensor1d([2, 2, 2]);\n   *\n   * a.equal(b).print();\n   * ```\n   *\n   * @param a The first input tensor.\n   * @param b The second input tensor. Must have the same dtype as `a`.\n   */\n  @doc({heading: 'Operations', subheading: 'Logical'})\n  @operation\n  static equal<T extends Tensor>(a: Tensor, b: Tensor): T {\n    util.assertArgumentsAreTensors({a, b}, 'equal');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    return ENV.engine.runKernel(backend => backend.equal(a, b), {a, b}) as T;\n  }\n\n  @operation\n  static equalStrict<T extends Tensor>(a: T, b: T): T {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in equalStrict: ');\n    return a.equal(b);\n  }\n\n  /**\n   * Returns the truth value of (a <= b) element-wise. Supports broadcasting.\n   *\n   * We also expose `lessEqualStrict` which has the same signature as this op\n   * and asserts that `a` and `b` are the same shape (does not broadcast).\n   *\n   * ```js\n   * const a = tf.tensor1d([1, 2, 3]);\n   * const b = tf.tensor1d([2, 2, 2]);\n   *\n   * a.lessEqual(b).print();\n   * ```\n   *\n   * @param a The first input tensor.\n   * @param b The second input tensor. Must have the same dtype as `a`.\n   */\n  @doc({heading: 'Operations', subheading: 'Logical'})\n  @operation\n  static lessEqual<T extends Tensor>(a: Tensor, b: Tensor): T {\n    util.assertArgumentsAreTensors({a, b}, 'lessEqual');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    return ENV.engine.runKernel(backend => backend.lessEqual(a, b), {a, b}) as\n        T;\n  }\n\n  @operation\n  static lessEqualStrict<T extends Tensor>(a: T, b: T): T {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in lessEqualStrict: ');\n    return a.lessEqual(b);\n  }\n\n  /**\n   * Returns the truth value of (a > b) element-wise. Supports broadcasting.\n   *\n   * We also expose `greaterStrict` which has the same signature as this\n   * op and asserts that `a` and `b` are the same shape (does not broadcast).\n   *\n   * ```js\n   * const a = tf.tensor1d([1, 2, 3]);\n   * const b = tf.tensor1d([2, 2, 2]);\n   *\n   * a.greater(b).print();\n   * ```\n   *\n   * @param a The first input tensor.\n   * @param b The second input tensor. Must have the same dtype as `a`.\n   */\n  @doc({heading: 'Operations', subheading: 'Logical'})\n  @operation\n  static greater<T extends Tensor>(a: Tensor, b: Tensor): T {\n    util.assertArgumentsAreTensors({a, b}, 'greater');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    return ENV.engine.runKernel(backend => backend.greater(a, b), {a, b}) as T;\n  }\n\n  @operation\n  static greaterStrict<T extends Tensor>(a: T, b: T): T {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in greaterStrict: ');\n    return a.greater(b);\n  }\n\n  /**\n   * Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n   *\n   * We also expose `greaterEqualStrict` which has the same signature as this\n   * op and asserts that `a` and `b` are the same shape (does not broadcast).\n   *\n   * ```js\n   * const a = tf.tensor1d([1, 2, 3]);\n   * const b = tf.tensor1d([2, 2, 2]);\n   *\n   * a.greaterEqual(b).print();\n   * ```\n   *\n   * @param a The first input tensor.\n   * @param b The second input tensor. Must have the same dtype as `a`.\n   */\n  @doc({heading: 'Operations', subheading: 'Logical'})\n  @operation\n  static greaterEqual<T extends Tensor>(a: Tensor, b: Tensor): T {\n    util.assertArgumentsAreTensors({a, b}, 'greaterEqual');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    return ENV.engine.runKernel(\n               backend => backend.greaterEqual(a, b), {a, b}) as T;\n  }\n\n  @operation\n  static greaterEqualStrict<T extends Tensor>(a: T, b: T): T {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in greaterEqualStrict: ');\n    return a.greaterEqual(b);\n  }\n}\n"]}},"hash":"f5ebb5c70b8642ab86dfe540bcb6d37b","cacheData":{"env":{}}}