{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./conv_util","loc":{"line":12,"column":24}},{"name":"./operation","loc":{"line":13,"column":26}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar conv_util = require(\"./conv_util\");\nvar operation_1 = require(\"./operation\");\nvar PoolOps = (function () {\n    function PoolOps() {\n    }\n    PoolOps.maxPool = function (x, filterSize, strides, pad, dimRoundingMode) {\n        util.assertArgumentsAreTensors({ x: x }, 'maxPool');\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in maxPool: input must be rank 4 but got rank \" + x4D.rank + \".\");\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in maxPool: pad must be an integer when using, \" +\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad, dimRoundingMode);\n        var grad = function (dy, saved) {\n            var y4D = saved[0];\n            return {\n                x: function () { return PoolOps.maxPoolBackprop(dy, x4D, y4D, filterSize, strides, pad); }\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend, save) { return save(backend.maxPool(x4D, convInfo)); }, { x: x4D }, grad);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.maxPoolBackprop = function (dy, input, output, filterSize, strides, pad, dimRoundingMode) {\n        util.assertArgumentsAreTensors({ dy: dy, input: input, output: output }, 'maxPoolBackprop');\n        util.assert(input.rank === dy.rank, \"Rank of input (\" + input.rank + \") does not match rank of dy (\" + dy.rank + \")\");\n        util.assert(dy.rank === 4, \"Error in maxPoolBackprop: dy must be rank 4 but got rank \" +\n            (dy.rank + \".\"));\n        util.assert(input.rank === 4, \"Error in maxPoolBackprop: input must be rank 4 but got rank \" +\n            (input.rank + \".\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in maxPoolBackprop: pad must be an integer when using, \" +\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(input.shape, filterSize, strides, pad, dimRoundingMode);\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.maxPoolBackprop(dy, input, output, convInfo); }, { dy: dy, input: input });\n        return res;\n    };\n    PoolOps.avgPool = function (x, filterSize, strides, pad, dimRoundingMode) {\n        util.assertArgumentsAreTensors({ x: x }, 'avgPool');\n        util.assert(x.dtype === 'float32', 'The input dtype to avgPool must be float32');\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in avgPool: x must be rank 4 but got rank \" + x4D.rank + \".\");\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in avgPool: pad must be an integer when using, \" +\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad);\n        var grad = function (dy) {\n            return {\n                x: function () { return PoolOps.avgPoolBackprop(dy, x4D, filterSize, strides, pad); }\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.avgPool(x4D, convInfo); }, { x: x4D }, grad);\n        res = res.cast(x.dtype);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.avgPoolBackprop = function (dy, input, filterSize, strides, pad) {\n        util.assertArgumentsAreTensors({ dy: dy, input: input }, 'avgPoolBackprop');\n        util.assert(input.rank === dy.rank, \"Rank of input (\" + input.rank + \") does not match rank of dy (\" + dy.rank + \")\");\n        var input4D = input;\n        var dy4D = dy;\n        var reshapedTo4D = false;\n        if (input.rank === 3) {\n            reshapedTo4D = true;\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n        }\n        util.assert(dy4D.rank === 4, \"Error in avgPoolBackprop: dy must be rank 4 but got rank \" +\n            (dy4D.rank + \".\"));\n        util.assert(input4D.rank === 4, \"Error in avgPoolBackprop: input must be rank 4 but got rank \" +\n            (input4D.rank + \".\"));\n        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad);\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.avgPoolBackprop(dy4D, input4D, convInfo); }, { dy4D: dy4D, input4D: input4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),\n        operation_1.operation\n    ], PoolOps, \"maxPool\", null);\n    __decorate([\n        operation_1.operation\n    ], PoolOps, \"maxPoolBackprop\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),\n        operation_1.operation\n    ], PoolOps, \"avgPool\", null);\n    __decorate([\n        operation_1.operation\n    ], PoolOps, \"avgPoolBackprop\", null);\n    return PoolOps;\n}());\nexports.PoolOps = PoolOps;\n","map":{"version":3,"file":"pool.js","sourceRoot":"","sources":["../src/ops/pool.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {doc} from '../doc';\nimport {ENV} from '../environment';\nimport {Tensor, Tensor3D, Tensor4D} from '../tensor';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport {operation} from './operation';\n\nexport class PoolOps {\n  /**\n   * Computes the 2D max pooling of an image.\n   *\n   * @param x The input tensor, of rank 4 or rank 3 of shape\n   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n   * @param filterSize The filter size, a tuple `[filterHeight, filterWidth]`.\n   * @param strides The strides of the pooling: `[strideHeight, strideWidth]`.\n   * @param pad The type of padding algorithm.\n   *    - `same` and stride 1: output will be of same size as input,\n   *       regardless of filter size.\n   *    - `valid`: output will be smaller than input if filter is larger\n   *       than 1x1.\n   *    - For more info, see this guide:\n   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n   * @param dimRoundingMode The rounding mode used when computing output\n   *     dimensions if pad is a number. If none is provided, it will not round\n   *     and error if the output is of fractional size.\n   */\n  @doc({heading: 'Operations', subheading: 'Convolution'})\n  @operation\n  static maxPool<T extends Tensor3D|Tensor4D>(\n      x: T, filterSize: [number, number]|number,\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    util.assertArgumentsAreTensors({x}, 'maxPool');\n\n    let x4D = x as Tensor4D;\n    let reshapedTo4D = false;\n    if (x.rank === 3) {\n      reshapedTo4D = true;\n      x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n    }\n    util.assert(\n        x4D.rank === 4,\n        `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);\n    if (dimRoundingMode != null) {\n      util.assert(\n          util.isInt(pad as number),\n          `Error in maxPool: pad must be an integer when using, ` +\n              `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const convInfo = conv_util.computePool2DInfo(\n        x4D.shape, filterSize, strides, pad, dimRoundingMode);\n\n    const grad = (dy: Tensor4D, saved: Tensor[]) => {\n      const [y4D] = saved;\n      return {\n        x: () => PoolOps.maxPoolBackprop(\n            dy, x4D, y4D as Tensor4D, filterSize, strides, pad)\n      };\n    };\n\n    const res = ENV.engine.runKernel(\n        (backend, save) => save(backend.maxPool(x4D, convInfo)), {x: x4D},\n        grad);\n    if (reshapedTo4D) {\n      return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n    }\n    return res as T;\n  }\n\n  /**\n   * Computes the backprop of a max pool.\n   *\n   * @param dy The dy error, of rank 4 or rank 3 of shape\n   *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n   * assumed.\n   * @param input The original input image, of rank 4, of shape\n   *     [batchSize, height, width, channels].\n   * @param output The original output image, of rank 4, of shape\n   *     [batchSize, outHeight, outWidth, channels].\n   * @param filterSize The filter size, a tuple [filterHeight, filterWidth].\n   * @param strides The strides of the pooling: [strideHeight, strideWidth].\n   * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n   *     used in the forward prop of the op.\n   * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n   *     rounding mode used when computing output dimensions if pad is a\n   *     number. If none is provided, it will not round and error if the output\n   *     is of fractional size.\n   */\n  @operation\n  static maxPoolBackprop(\n      dy: Tensor4D, input: Tensor4D, output: Tensor4D,\n      filterSize: [number, number]|number, strides: [number, number]|number,\n      pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n    util.assertArgumentsAreTensors({dy, input, output}, 'maxPoolBackprop');\n    util.assert(\n        input.rank === dy.rank,\n        `Rank of input (${input.rank}) does not match rank of dy (${dy.rank})`);\n\n    util.assert(\n        dy.rank === 4,\n        `Error in maxPoolBackprop: dy must be rank 4 but got rank ` +\n            `${dy.rank}.`);\n    util.assert(\n        input.rank === 4,\n        `Error in maxPoolBackprop: input must be rank 4 but got rank ` +\n            `${input.rank}.`);\n    if (dimRoundingMode != null) {\n      util.assert(\n          util.isInt(pad as number),\n          `Error in maxPoolBackprop: pad must be an integer when using, ` +\n              `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n\n    const convInfo = conv_util.computePool2DInfo(\n        input.shape, filterSize, strides, pad, dimRoundingMode);\n    const res = ENV.engine.runKernel(\n        backend => backend.maxPoolBackprop(dy, input, output, convInfo),\n        {dy, input});\n    return res;\n  }\n\n  /**\n   * Computes the 2D average pooling of an image.\n   *\n   * @param x The input tensor, of rank 4 or rank 3 of shape\n   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n   * @param filterSize The filter size, a tuple `[filterHeight, filterWidth]`.\n   * @param strides The strides of the pooling: `[strideHeight, strideWidth]`.\n   * @param pad The type of padding algorithm:\n   *    - `same` and stride 1: output will be of same size as input,\n   *       regardless of filter size.\n   *    - `valid`: output will be smaller than input if filter is larger\n   *       than 1x1.\n   *    - For more info, see this guide:\n   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n   *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n   * @param dimRoundingMode The rounding mode used when computing output\n   *     dimensions if pad is a number. If none is provided, it will not round\n   *     and error if the output is of fractional size.\n   */\n  @doc({heading: 'Operations', subheading: 'Convolution'})\n  @operation\n  static avgPool<T extends Tensor3D|Tensor4D>(\n      x: T, filterSize: [number, number]|number,\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    util.assertArgumentsAreTensors({x}, 'avgPool');\n    util.assert(\n        x.dtype === 'float32', 'The input dtype to avgPool must be float32');\n    let x4D = x as Tensor4D;\n    let reshapedTo4D = false;\n    if (x.rank === 3) {\n      reshapedTo4D = true;\n      x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n    }\n    util.assert(\n        x4D.rank === 4,\n        `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);\n    if (dimRoundingMode != null) {\n      util.assert(\n          util.isInt(pad as number),\n          `Error in avgPool: pad must be an integer when using, ` +\n              `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n\n    const convInfo =\n        conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad);\n\n    const grad = (dy: Tensor4D) => {\n      return {\n        x: () => PoolOps.avgPoolBackprop(dy, x4D, filterSize, strides, pad)\n      };\n    };\n    let res = ENV.engine.runKernel(\n        backend => backend.avgPool(x4D, convInfo), {x: x4D}, grad);\n    res = res.cast(x.dtype);\n    if (reshapedTo4D) {\n      return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n    }\n    return res as T;\n  }\n\n  /**\n   * Computes the backprop of an avg pool.\n   *\n   * @param dy The dy error, of rank 4 or rank 3 of shape\n   *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n   * assumed.\n   * @param input The input image, of rank 4 or rank 3 of shape\n   *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n   * assumed.\n   * @param filterSize The filter size, a tuple [filterHeight, filterWidth].\n   * @param strides The strides of the pooling: [strideHeight, strideWidth].\n   * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n   *     used in the forward prop of the op.\n   */\n  @operation\n  static avgPoolBackprop<T extends Tensor3D|Tensor4D>(\n      dy: T, input: T, filterSize: [number, number]|number,\n      strides: [number, number]|number, pad: 'valid'|'same'|number): T {\n    util.assertArgumentsAreTensors({dy, input}, 'avgPoolBackprop');\n    util.assert(\n        input.rank === dy.rank,\n        `Rank of input (${input.rank}) does not match rank of dy (${dy.rank})`);\n\n    let input4D = input as Tensor4D;\n    let dy4D = dy as Tensor4D;\n    let reshapedTo4D = false;\n    if (input.rank === 3) {\n      reshapedTo4D = true;\n      input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n      dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n    }\n\n    util.assert(\n        dy4D.rank === 4,\n        `Error in avgPoolBackprop: dy must be rank 4 but got rank ` +\n            `${dy4D.rank}.`);\n    util.assert(\n        input4D.rank === 4,\n        `Error in avgPoolBackprop: input must be rank 4 but got rank ` +\n            `${input4D.rank}.`);\n\n    const convInfo =\n        conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad);\n    const res = ENV.engine.runKernel(\n        backend => backend.avgPoolBackprop(dy4D, input4D, convInfo),\n        {dy4D, input4D});\n    if (reshapedTo4D) {\n      return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n    }\n    return res as T;\n  }\n}\n"]}},"hash":"9c77af28eb4c48f5e578171f1967bd42","cacheData":{"env":{}}}