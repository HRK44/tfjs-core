{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"../util","loc":{"line":3,"column":19}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"../util\");\nfunction assertParams(aShape, bShape, axis) {\n    var aRank = aShape.length;\n    var bRank = bShape.length;\n    util.assert(aShape.length === bShape.length, \"Error in concat\" + aRank + \"D: rank of x1 (\" + aRank + \") and x2 (\" + bRank + \") \" +\n        \"must be the same.\");\n    util.assert(axis >= 0 && axis < aRank, \"Error in concat\" + aRank + \"D: axis must be \" +\n        (\"between 0 and \" + (aRank - 1) + \".\"));\n    for (var i = 0; i < aRank; i++) {\n        util.assert((i === axis) || (aShape[i] === bShape[i]), \"Error in concat\" + aRank + \"D: Shape (\" + aShape + \") does not match \" +\n            (\"(\" + bShape + \") along the non-concatenated axis \" + i + \".\"));\n    }\n}\nexports.assertParams = assertParams;\nfunction computeOutShape1D(x1Shape, x2Shape) {\n    util.assert(x1Shape.length === 1 && x2Shape.length === 1, 'x1 and x2 should be 1d array.');\n    var outputShape = x1Shape.slice();\n    outputShape[0] += x2Shape[0];\n    return outputShape;\n}\nexports.computeOutShape1D = computeOutShape1D;\nfunction computeOutShape(x1Shape, x2Shape, axis) {\n    util.assert(x1Shape.length === x2Shape.length, 'x1 and x2 should have the same rank.');\n    var outputShape = x1Shape.slice();\n    outputShape[axis] += x2Shape[axis];\n    return outputShape;\n}\nexports.computeOutShape = computeOutShape;\nfunction computeGradientSliceShapes(aShape, bShape) {\n    return {\n        aBegin: [0, 0],\n        aSize: aShape,\n        bBegin: [0, aShape[1]],\n        bSize: bShape\n    };\n}\nexports.computeGradientSliceShapes = computeGradientSliceShapes;\n","map":{"version":3,"file":"concat_util.js","sourceRoot":"","sources":["../src/ops/concat_util.ts"],"names":[],"mappings":";;AAiBA,8BAAgC;AAEhC,sBAA6B,MAAgB,EAAE,MAAgB,EAAE,IAAY;IAC3E,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC;IAC5B,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC;IAC5B,IAAI,CAAC,MAAM,CACP,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAC/B,oBAAkB,KAAK,uBAAkB,KAAK,kBAAa,KAAK,OAAI;QAChE,mBAAmB,CAAC,CAAC;IAE7B,IAAI,CAAC,MAAM,CACP,IAAI,IAAI,CAAC,IAAI,IAAI,GAAG,KAAK,EACzB,oBAAkB,KAAK,qBAAkB;SACrC,oBAAiB,KAAK,GAAG,CAAC,OAAG,CAAA,CAAC,CAAC;IAEvC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,CACP,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,EACzC,oBAAkB,KAAK,kBAAa,MAAM,sBAAmB;aACzD,MAAI,MAAM,0CAAqC,CAAC,MAAG,CAAA,CAAC,CAAC;IAC/D,CAAC;AACH,CAAC;AAnBD,oCAmBC;AAED,2BACI,OAAiB,EAAE,OAAiB;IACtC,IAAI,CAAC,MAAM,CACP,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAC5C,+BAA+B,CAAC,CAAC;IACrC,IAAM,WAAW,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;IACpC,WAAW,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7B,MAAM,CAAC,WAAW,CAAC;AACrB,CAAC;AARD,8CAQC;AAED,yBACI,OAAiB,EAAE,OAAiB,EAAE,IAAY;IACpD,IAAI,CAAC,MAAM,CACP,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,EACjC,sCAAsC,CAAC,CAAC;IAC5C,IAAM,WAAW,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;IACpC,WAAW,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;IACnC,MAAM,CAAC,WAAW,CAAC;AACrB,CAAC;AARD,0CAQC;AAED,oCACI,MAAwB,EAAE,MAAwB;IACpD,MAAM,CAAC;QACL,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAqB;QAClC,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAqB;QAC1C,KAAK,EAAE,MAAM;KACd,CAAC;AACJ,CAAC;AARD,gEAQC","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\nexport function assertParams(aShape: number[], bShape: number[], axis: number) {\n  const aRank = aShape.length;\n  const bRank = bShape.length;\n  util.assert(\n      aShape.length === bShape.length,\n      `Error in concat${aRank}D: rank of x1 (${aRank}) and x2 (${bRank}) ` +\n          `must be the same.`);\n\n  util.assert(\n      axis >= 0 && axis < aRank,\n      `Error in concat${aRank}D: axis must be ` +\n          `between 0 and ${aRank - 1}.`);\n\n  for (let i = 0; i < aRank; i++) {\n    util.assert(\n        (i === axis) || (aShape[i] === bShape[i]),\n        `Error in concat${aRank}D: Shape (${aShape}) does not match ` +\n            `(${bShape}) along the non-concatenated axis ${i}.`);\n  }\n}\n\nexport function computeOutShape1D(\n    x1Shape: number[], x2Shape: number[]): number[] {\n  util.assert(\n      x1Shape.length === 1 && x2Shape.length === 1,\n      'x1 and x2 should be 1d array.');\n  const outputShape = x1Shape.slice();\n  outputShape[0] += x2Shape[0];\n  return outputShape;\n}\n\nexport function computeOutShape(\n    x1Shape: number[], x2Shape: number[], axis: number): number[] {\n  util.assert(\n      x1Shape.length === x2Shape.length,\n      'x1 and x2 should have the same rank.');\n  const outputShape = x1Shape.slice();\n  outputShape[axis] += x2Shape[axis];\n  return outputShape;\n}\n\nexport function computeGradientSliceShapes(\n    aShape: [number, number], bShape: [number, number]) {\n  return {\n    aBegin: [0, 0] as [number, number],\n    aSize: aShape,\n    bBegin: [0, aShape[1]] as [number, number],\n    bSize: bShape\n  };\n}\n"]}},"hash":"a63d64c7afa24255b50ba44d60b463b1","cacheData":{"env":{}}}