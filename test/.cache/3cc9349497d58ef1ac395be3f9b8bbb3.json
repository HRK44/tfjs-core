{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524062920943},{"name":"../environment","loc":{"line":13,"column":28}},{"name":"../globals","loc":{"line":14,"column":24}},{"name":"../ops/ops","loc":{"line":15,"column":20}},{"name":"../serialization","loc":{"line":16,"column":30}},{"name":"./optimizer","loc":{"line":17,"column":26}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../environment\");\nvar globals_1 = require(\"../globals\");\nvar ops_1 = require(\"../ops/ops\");\nvar serialization_1 = require(\"../serialization\");\nvar optimizer_1 = require(\"./optimizer\");\nvar AdagradOptimizer = (function (_super) {\n    __extends(AdagradOptimizer, _super);\n    function AdagradOptimizer(learningRate, initialAccumulatorValue) {\n        if (initialAccumulatorValue === void 0) { initialAccumulatorValue = 0.1; }\n        var _this = _super.call(this) || this;\n        _this.learningRate = learningRate;\n        _this.initialAccumulatorValue = initialAccumulatorValue;\n        _this.accumulatedGrads = {};\n        _this.c = globals_1.keep(ops_1.scalar(-learningRate));\n        _this.epsilon = globals_1.keep(ops_1.scalar(1e-8));\n        return _this;\n    }\n    AdagradOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        var _loop_1 = function (variableName) {\n            var value = environment_1.ENV.engine.registeredVariables[variableName];\n            if (this_1.accumulatedGrads[variableName] == null) {\n                var trainable_1 = false;\n                globals_1.tidy(function () {\n                    _this.accumulatedGrads[variableName] =\n                        ops_1.fill(value.shape, _this.initialAccumulatorValue)\n                            .variable(trainable_1);\n                });\n            }\n            var gradient = variableGradients[variableName];\n            var accumulatedGrad = this_1.accumulatedGrads[variableName];\n            globals_1.tidy(function () {\n                var newAccumulatedGrad = accumulatedGrad.add(gradient.square());\n                _this.accumulatedGrads[variableName].assign(newAccumulatedGrad);\n                var newValue = _this.c\n                    .mul(gradient.div(newAccumulatedGrad.add(_this.epsilon).sqrt()))\n                    .add(value);\n                value.assign(newValue);\n            });\n        };\n        var this_1 = this;\n        for (var variableName in variableGradients) {\n            _loop_1(variableName);\n        }\n    };\n    AdagradOptimizer.prototype.dispose = function () {\n        var _this = this;\n        this.epsilon.dispose();\n        this.c.dispose();\n        if (this.accumulatedGrads != null) {\n            Object.keys(this.accumulatedGrads)\n                .forEach(function (name) { return _this.accumulatedGrads[name].dispose(); });\n        }\n    };\n    AdagradOptimizer.prototype.getConfig = function () {\n        return {\n            learningRate: this.learningRate,\n            initialAccumulatorValue: this.initialAccumulatorValue,\n        };\n    };\n    AdagradOptimizer.fromConfig = function (cls, config) {\n        return new cls(config.learningRate, config.initialAccumulatorValue);\n    };\n    AdagradOptimizer.className = 'AdagradOptimizer';\n    return AdagradOptimizer;\n}(optimizer_1.Optimizer));\nexports.AdagradOptimizer = AdagradOptimizer;\nserialization_1.SerializationMap.register(AdagradOptimizer);\n","map":{"version":3,"file":"adagrad_optimizer.js","sourceRoot":"","sources":["../src/optimizers/adagrad_optimizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../environment';\nimport {keep, tidy} from '../globals';\nimport {fill, scalar} from '../ops/ops';\n// tslint:disable-next-line:max-line-length\nimport {ConfigDict, Serializable, SerializableConstructor, SerializationMap} from '../serialization';\nimport {Scalar} from '../tensor';\nimport {NamedVariableMap} from '../types';\n\nimport {Optimizer} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n  static className = 'AdagradOptimizer';\n  private c: Scalar;\n  private epsilon: Scalar;\n\n  private accumulatedGrads: NamedVariableMap = {};\n\n  constructor(\n      protected learningRate: number, private initialAccumulatorValue = 0.1) {\n    super();\n    this.c = keep(scalar(-learningRate));\n    this.epsilon = keep(scalar(1e-8));\n  }\n\n  applyGradients(variableGradients: NamedVariableMap) {\n    for (const variableName in variableGradients) {\n      const value = ENV.engine.registeredVariables[variableName];\n      if (this.accumulatedGrads[variableName] == null) {\n        const trainable = false;\n        tidy(() => {\n          this.accumulatedGrads[variableName] =\n              fill(value.shape, this.initialAccumulatorValue)\n                  .variable(trainable);\n        });\n      }\n\n      const gradient = variableGradients[variableName];\n      const accumulatedGrad = this.accumulatedGrads[variableName];\n\n      tidy(() => {\n        const newAccumulatedGrad = accumulatedGrad.add(gradient.square());\n        this.accumulatedGrads[variableName].assign(newAccumulatedGrad);\n\n        const newValue =\n            this.c\n                .mul(gradient.div(newAccumulatedGrad.add(this.epsilon).sqrt()))\n                .add(value);\n        value.assign(newValue);\n      });\n    }\n  }\n\n  dispose() {\n    this.epsilon.dispose();\n    this.c.dispose();\n    if (this.accumulatedGrads != null) {\n      Object.keys(this.accumulatedGrads)\n          .forEach(name => this.accumulatedGrads[name].dispose());\n    }\n  }\n  getConfig(): ConfigDict {\n    return {\n      learningRate: this.learningRate,\n      initialAccumulatorValue: this.initialAccumulatorValue,\n    };\n  }\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config.learningRate, config.initialAccumulatorValue);\n  }\n}\nSerializationMap.register(AdagradOptimizer);\n"]}},"hash":"5a502895835f560ec1f8c5d0efa52c76","cacheData":{"env":{}}}