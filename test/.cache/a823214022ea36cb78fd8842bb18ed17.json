{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"../doc","loc":{"line":44,"column":20}},{"name":"../util","loc":{"line":45,"column":21}},{"name":"./router_registry","loc":{"line":46,"column":32}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar util_1 = require(\"../util\");\nvar router_registry_1 = require(\"./router_registry\");\nvar URL_SCHEME_SUFFIX = '://';\nvar ModelStoreManagerRegistry = (function () {\n    function ModelStoreManagerRegistry() {\n        this.managers = {};\n    }\n    ModelStoreManagerRegistry.getInstance = function () {\n        if (ModelStoreManagerRegistry.instance == null) {\n            ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n        }\n        return ModelStoreManagerRegistry.instance;\n    };\n    ModelStoreManagerRegistry.registerManager = function (scheme, manager) {\n        util_1.assert(scheme != null, 'scheme must not be undefined or null.');\n        if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n            scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n        }\n        util_1.assert(scheme.length > 0, 'scheme must not be an empty string.');\n        var registry = ModelStoreManagerRegistry.getInstance();\n        util_1.assert(registry.managers[scheme] == null, \"A model store manager is already registered for scheme '\" + scheme + \"'.\");\n        registry.managers[scheme] = manager;\n    };\n    ModelStoreManagerRegistry.getManager = function (scheme) {\n        var manager = this.getInstance().managers[scheme];\n        if (manager == null) {\n            throw new Error(\"Cannot find model manager for scheme '\" + scheme + \"'\");\n        }\n        return manager;\n    };\n    ModelStoreManagerRegistry.getSchemes = function () {\n        return Object.keys(this.getInstance().managers);\n    };\n    return ModelStoreManagerRegistry;\n}());\nexports.ModelStoreManagerRegistry = ModelStoreManagerRegistry;\nfunction parseURL(url) {\n    if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n        throw new Error(\"The url string provided does not contain a scheme. \" +\n            \"Supported schemes are: \" +\n            (\"\" + ModelStoreManagerRegistry.getSchemes().join(',')));\n    }\n    return {\n        scheme: url.split(URL_SCHEME_SUFFIX)[0],\n        path: url.split(URL_SCHEME_SUFFIX)[1],\n    };\n}\nfunction cloneModelInternal(sourceURL, destURL, deleteSource) {\n    if (deleteSource === void 0) { deleteSource = false; }\n    return __awaiter(this, void 0, void 0, function () {\n        var loadHandlers, loadHandler, saveHandlers, saveHandler, sourceScheme, sourcePath, sameMedium, modelArtifacts, saveResult;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    util_1.assert(sourceURL !== destURL, \"Old path and new path are the same: '\" + sourceURL + \"'\");\n                    loadHandlers = router_registry_1.IORouterRegistry.getLoadHandlers(sourceURL);\n                    util_1.assert(loadHandlers.length > 0, \"Copying failed because no load handler is found for source URL \" + sourceURL + \".\");\n                    util_1.assert(loadHandlers.length < 2, \"Copying failed because more than one (\" + loadHandlers.length + \") \" +\n                        (\"load handlers for source URL \" + sourceURL + \".\"));\n                    loadHandler = loadHandlers[0];\n                    saveHandlers = router_registry_1.IORouterRegistry.getSaveHandlers(destURL);\n                    util_1.assert(saveHandlers.length > 0, \"Copying failed because no save handler is found for destination URL \" +\n                        (destURL + \".\"));\n                    util_1.assert(saveHandlers.length < 2, \"Copying failed because more than one (\" + loadHandlers.length + \") \" +\n                        (\"save handlers for destination URL \" + destURL + \".\"));\n                    saveHandler = saveHandlers[0];\n                    sourceScheme = parseURL(sourceURL).scheme;\n                    sourcePath = parseURL(sourceURL).path;\n                    sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n                    return [4, loadHandler.load()];\n                case 1:\n                    modelArtifacts = _a.sent();\n                    if (!(deleteSource && sameMedium)) return [3, 3];\n                    return [4, ModelStoreManagerRegistry.getManager(sourceScheme)\n                            .removeModel(sourcePath)];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3: return [4, saveHandler.save(modelArtifacts)];\n                case 4:\n                    saveResult = _a.sent();\n                    if (!(deleteSource && !sameMedium)) return [3, 6];\n                    return [4, ModelStoreManagerRegistry.getManager(sourceScheme)\n                            .removeModel(sourcePath)];\n                case 5:\n                    _a.sent();\n                    _a.label = 6;\n                case 6: return [2, saveResult.modelArtifactsInfo];\n            }\n        });\n    });\n}\nvar ModelManagement = (function () {\n    function ModelManagement() {\n    }\n    ModelManagement.listModels = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var schemes, out, _i, schemes_1, scheme, schemeOut, path, url;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        schemes = ModelStoreManagerRegistry.getSchemes();\n                        out = {};\n                        _i = 0, schemes_1 = schemes;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < schemes_1.length)) return [3, 4];\n                        scheme = schemes_1[_i];\n                        return [4, ModelStoreManagerRegistry.getManager(scheme).listModels()];\n                    case 2:\n                        schemeOut = _a.sent();\n                        for (path in schemeOut) {\n                            url = scheme + URL_SCHEME_SUFFIX + path;\n                            out[url] = schemeOut[path];\n                        }\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3, 1];\n                    case 4: return [2, out];\n                }\n            });\n        });\n    };\n    ModelManagement.removeModel = function (url) {\n        return __awaiter(this, void 0, void 0, function () {\n            var schemeAndPath, manager;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        schemeAndPath = parseURL(url);\n                        manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n                        return [4, manager.removeModel(schemeAndPath.path)];\n                    case 1: return [2, _a.sent()];\n                }\n            });\n        });\n    };\n    ModelManagement.copyModel = function (sourceURL, destURL) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteSource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        deleteSource = false;\n                        return [4, cloneModelInternal(sourceURL, destURL, deleteSource)];\n                    case 1: return [2, _a.sent()];\n                }\n            });\n        });\n    };\n    ModelManagement.moveModel = function (sourceURL, destURL) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteSource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        deleteSource = true;\n                        return [4, cloneModelInternal(sourceURL, destURL, deleteSource)];\n                    case 1: return [2, _a.sent()];\n                }\n            });\n        });\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Models', subheading: 'Management', namespace: 'io' })\n    ], ModelManagement, \"listModels\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Models', subheading: 'Management', namespace: 'io' })\n    ], ModelManagement, \"removeModel\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Models', subheading: 'Management', namespace: 'io' })\n    ], ModelManagement, \"copyModel\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Models', subheading: 'Management', namespace: 'io' })\n    ], ModelManagement, \"moveModel\", null);\n    return ModelManagement;\n}());\nexports.ModelManagement = ModelManagement;\n","map":{"version":3,"file":"model_management.js","sourceRoot":"","sources":["../src/io/model_management.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,8BAA2B;AAC3B,gCAA+B;AAE/B,qDAAmD;AAGnD,IAAM,iBAAiB,GAAG,KAAK,CAAC;AAEhC;IAME;QACE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IAEc,qCAAW,GAA1B;QACE,EAAE,CAAC,CAAC,yBAAyB,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;YAC/C,yBAAyB,CAAC,QAAQ,GAAG,IAAI,yBAAyB,EAAE,CAAC;QACvE,CAAC;QACD,MAAM,CAAC,yBAAyB,CAAC,QAAQ,CAAC;IAC5C,CAAC;IAQM,yCAAe,GAAtB,UAAuB,MAAc,EAAE,OAA0B;QAC/D,aAAM,CAAC,MAAM,IAAI,IAAI,EAAE,uCAAuC,CAAC,CAAC;QAChE,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC9D,CAAC;QACD,aAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,qCAAqC,CAAC,CAAC;QACjE,IAAM,QAAQ,GAAG,yBAAyB,CAAC,WAAW,EAAE,CAAC;QACzD,aAAM,CACF,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,EACjC,6DAA2D,MAAM,OAAI,CAAC,CAAC;QAC3E,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC;IACtC,CAAC;IAEM,oCAAU,GAAjB,UAAkB,MAAc;QAC9B,IAAM,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACpD,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,2CAAyC,MAAM,MAAG,CAAC,CAAC;QACtE,CAAC;QACD,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAEM,oCAAU,GAAjB;QACE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC;IACH,gCAAC;AAAD,CAAC,AA/CD,IA+CC;AA/CY,8DAAyB;AAyDtC,kBAAkB,GAAW;IAC3B,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,IAAI,KAAK,CACX,qDAAqD;YACrD,yBAAyB;aACzB,KAAG,yBAAyB,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,GAAG,CAAG,CAAA,CAAC,CAAC;IAC7D,CAAC;IACD,MAAM,CAAC;QACL,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;KACtC,CAAC;AACJ,CAAC;AAED,4BACI,SAAiB,EAAE,OAAe,EAClC,YAAoB;IAApB,6BAAA,EAAA,oBAAoB;;;;;;oBACtB,aAAM,CACF,SAAS,KAAK,OAAO,EACrB,0CAAwC,SAAS,MAAG,CAAC,CAAC;oBAEpD,YAAY,GAAG,kCAAgB,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;oBACjE,aAAM,CACF,YAAY,CAAC,MAAM,GAAG,CAAC,EACvB,oEACI,SAAS,MAAG,CAAC,CAAC;oBACtB,aAAM,CACF,YAAY,CAAC,MAAM,GAAG,CAAC,EACvB,2CAAyC,YAAY,CAAC,MAAM,OAAI;yBAC5D,kCAAgC,SAAS,MAAG,CAAA,CAAC,CAAC;oBAChD,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;oBAE9B,YAAY,GAAG,kCAAgB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;oBAC/D,aAAM,CACF,YAAY,CAAC,MAAM,GAAG,CAAC,EACvB,sEAAsE;yBAC/D,OAAO,MAAG,CAAA,CAAC,CAAC;oBACvB,aAAM,CACF,YAAY,CAAC,MAAM,GAAG,CAAC,EACvB,2CAAyC,YAAY,CAAC,MAAM,OAAI;yBAC5D,uCAAqC,OAAO,MAAG,CAAA,CAAC,CAAC;oBACnD,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;oBAE9B,YAAY,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;oBAC1C,UAAU,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC;oBACtC,UAAU,GAAG,YAAY,KAAK,QAAQ,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;oBAExC,WAAM,WAAW,CAAC,IAAI,EAAE,EAAA;;oBAAzC,cAAc,GAAG,SAAwB;yBAK3C,CAAA,YAAY,IAAI,UAAU,CAAA,EAA1B,cAA0B;oBAC5B,WAAM,yBAAyB,CAAC,UAAU,CAAC,YAAY,CAAC;6BACnD,WAAW,CAAC,UAAU,CAAC,EAAA;;oBAD5B,SAC4B,CAAC;;wBAGZ,WAAM,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,EAAA;;oBAAnD,UAAU,GAAG,SAAsC;yBAKrD,CAAA,YAAY,IAAI,CAAC,UAAU,CAAA,EAA3B,cAA2B;oBAC7B,WAAM,yBAAyB,CAAC,UAAU,CAAC,YAAY,CAAC;6BACnD,WAAW,CAAC,UAAU,CAAC,EAAA;;oBAD5B,SAC4B,CAAC;;wBAG/B,WAAO,UAAU,CAAC,kBAAkB,EAAC;;;;CACtC;AAED;IAAA;IAyKA,CAAC;IA3Ic,0BAAU,GAAvB;;;;;;wBACQ,OAAO,GAAG,yBAAyB,CAAC,UAAU,EAAE,CAAC;wBACjD,GAAG,GAAwC,EAAE,CAAC;8BACxB,EAAP,mBAAO;;;6BAAP,CAAA,qBAAO,CAAA;wBAAjB,MAAM;wBAEX,WAAM,yBAAyB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,EAAA;;wBAD7D,SAAS,GACX,SAA+D;wBACnE,GAAG,CAAC,CAAO,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;4BACvB,GAAG,GAAG,MAAM,GAAG,iBAAiB,GAAG,IAAI,CAAC;4BAC9C,GAAG,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;wBAC7B,CAAC;;;wBANkB,IAAO,CAAA;;4BAQ5B,WAAO,GAAG,EAAC;;;;KACZ;IA6BY,2BAAW,GAAxB,UAAyB,GAAW;;;;;;wBAC5B,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAC9B,OAAO,GAAG,yBAAyB,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;wBACpE,WAAM,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,EAAA;4BAApD,WAAO,SAA6C,EAAC;;;;KACtD;IA2CY,yBAAS,GAAtB,UAAuB,SAAiB,EAAE,OAAe;;;;;;wBAEjD,YAAY,GAAG,KAAK,CAAC;wBACpB,WAAM,kBAAkB,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,CAAC,EAAA;4BAAjE,WAAO,SAA0D,EAAC;;;;KACnE;IA0CY,yBAAS,GAAtB,UAAuB,SAAiB,EAAE,OAAe;;;;;;wBAEjD,YAAY,GAAG,IAAI,CAAC;wBACnB,WAAM,kBAAkB,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,CAAC,EAAA;4BAAjE,WAAO,SAA0D,EAAC;;;;KACnE;IA1ID;QADC,SAAG,CAAC,EAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;2CAanE;IA6BD;QADC,SAAG,CAAC,EAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;4CAKnE;IA2CD;QADC,SAAG,CAAC,EAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;0CAKnE;IA0CD;QADC,SAAG,CAAC,EAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;0CAKnE;IACH,sBAAC;CAAA,AAzKD,IAyKC;AAzKY,0CAAe","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\n\nimport {doc} from '../doc';\nimport {assert} from '../util';\n\nimport {IORouterRegistry} from './router_registry';\nimport {ModelArtifactsInfo, ModelStoreManager} from './types';\n\nconst URL_SCHEME_SUFFIX = '://';\n\nexport class ModelStoreManagerRegistry {\n  // Singleton instance.\n  private static instance: ModelStoreManagerRegistry;\n\n  private managers: {[scheme: string]: ModelStoreManager};\n\n  private constructor() {\n    this.managers = {};\n  }\n\n  private static getInstance(): ModelStoreManagerRegistry {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n    return ModelStoreManagerRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerManager(scheme: string, manager: ModelStoreManager) {\n    assert(scheme != null, 'scheme must not be undefined or null.');\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n    assert(scheme.length > 0, 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(\n        registry.managers[scheme] == null,\n        `A model store manager is already registered for scheme '${scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n\n  static getManager(scheme: string): ModelStoreManager {\n    const manager = this.getInstance().managers[scheme];\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n    return manager;\n  }\n\n  static getSchemes(): string[] {\n    return Object.keys(this.getInstance().managers);\n  }\n}\n\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url: string): {scheme: string, path: string} {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\n        `The url string provided does not contain a scheme. ` +\n        `Supported schemes are: ` +\n        `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1],\n  };\n}\n\nasync function cloneModelInternal(\n    sourceURL: string, destURL: string,\n    deleteSource = false): Promise<ModelArtifactsInfo> {\n  assert(\n      sourceURL !== destURL,\n      `Old path and new path are the same: '${sourceURL}'`);\n\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(\n      loadHandlers.length > 0,\n      `Copying failed because no load handler is found for source URL ${\n          sourceURL}.`);\n  assert(\n      loadHandlers.length < 2,\n      `Copying failed because more than one (${loadHandlers.length}) ` +\n          `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(\n      saveHandlers.length > 0,\n      `Copying failed because no save handler is found for destination URL ` +\n          `${destURL}.`);\n  assert(\n      saveHandlers.length < 2,\n      `Copying failed because more than one (${loadHandlers.length}) ` +\n          `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n\n  const modelArtifacts = await loadHandler.load();\n\n  // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  const saveResult = await saveHandler.save(modelArtifacts);\n\n  // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  return saveResult.modelArtifactsInfo;\n}\n\nexport class ModelManagement {\n  /**\n   * List all models stored in registered storage mediums.\n   *\n   * For a web browser environment, the registered mediums are Local Storage and\n   * IndexedDB.\n   *\n   * ```js\n   * // First create and save a model.\n   * const model = tf.sequential();\n   * model.add(tf.layers.dense(\n   *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n   * await model.save('localstorage://demo/management/model1');\n   *\n   * // Then list existing models.\n   * console.log(JSON.stringify(await tf.io.listModels()));\n   *\n   * // Delete the model.\n   * await tf.io.removeModel('localstorage://demo/management/model1');\n   *\n   * // List models again.\n   * console.log(JSON.stringify(await tf.io.listModels()));\n   * ```\n   *\n   * @returns A `Promise` of a dictionary mapping URLs of existing models to\n   * their model artifacts info. URLs include medium-specific schemes, e.g.,\n   *   'indexeddb://my/model/1'. Model artifacts info include type of the\n   * model's topology, byte sizes of the topology, weights, etc.\n   */\n  @doc({heading: 'Models', subheading: 'Management', namespace: 'io'})\n  static async listModels(): Promise<{[url: string]: ModelArtifactsInfo}> {\n    const schemes = ModelStoreManagerRegistry.getSchemes();\n    const out: {[url: string]: ModelArtifactsInfo} = {};\n    for (const scheme of schemes) {\n      const schemeOut =\n          await ModelStoreManagerRegistry.getManager(scheme).listModels();\n      for (const path in schemeOut) {\n        const url = scheme + URL_SCHEME_SUFFIX + path;\n        out[url] = schemeOut[path];\n      }\n    }\n    return out;\n  }\n\n  /**\n   * Remove a model specified by URL from a reigstered storage medium.\n   *\n   * ```js\n   * // First create and save a model.\n   * const model = tf.sequential();\n   * model.add(tf.layers.dense(\n   *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n   * await model.save('localstorage://demo/management/model1');\n   *\n   * // Then list existing models.\n   * console.log(JSON.stringify(await tf.io.listModels()));\n   *\n   * // Delete the model.\n   * await tf.io.removeModel('localstorage://demo/management/model1');\n   *\n   * // List models again.\n   * console.log(JSON.stringify(await tf.io.listModels()));\n   * ```\n   *\n   * @param url A URL to a stored model, with a scheme prefix, e.g.,\n   *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n   * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n   *   is successful).\n   * @throws Error if deletion fails, e.g., if no model exists at `path`.\n   */\n  @doc({heading: 'Models', subheading: 'Management', namespace: 'io'})\n  static async removeModel(url: string): Promise<ModelArtifactsInfo> {\n    const schemeAndPath = parseURL(url);\n    const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n    return await manager.removeModel(schemeAndPath.path);\n  }\n\n  /**\n   * Copy a model from one URL to another.\n   *\n   * This function supports:\n   *\n   * 1. Copying within a storage medium, e.g.,\n   *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n   * 2. Copying between two storage mediums, e.g.,\n   *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n   *\n   * ```js\n   * // First create and save a model.\n   * const model = tf.sequential();\n   * model.add(tf.layers.dense(\n   *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n   * await model.save('localstorage://demo/management/model1');\n   *\n   * // Then list existing models.\n   * console.log(JSON.stringify(await tf.io.listModels()));\n   *\n   * // Copy the model, from Local Storage to IndexedDB.\n   * await tf.io.copyModel(\n   *     'localstorage://demo/management/model1',\n   *     'indexeddb://demo/management/model1');\n   *\n   * // List models again.\n   * console.log(JSON.stringify(await tf.io.listModels()));\n   *\n   * // Remove both models.\n   * await tf.io.removeModel('localstorage://demo/management/model1');\n   * await tf.io.removeModel('indexeddb://demo/management/model1');\n   * ```\n   *\n   * @param sourceURL Source URL of copying.\n   * @param destURL Destination URL of copying.\n   * @returns ModelArtifactsInfo of the copied model (if and only if copying\n   *   is successful).\n   * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n   *   if `oldPath` and `newPath` are identical.\n   */\n  @doc({heading: 'Models', subheading: 'Management', namespace: 'io'})\n  static async copyModel(sourceURL: string, destURL: string):\n      Promise<ModelArtifactsInfo> {\n    const deleteSource = false;\n    return await cloneModelInternal(sourceURL, destURL, deleteSource);\n  }\n\n  /**\n   * Move a model from one URL to another.\n   *\n   * This function supports:\n   *\n   * 1. Moving within a storage medium, e.g.,\n   *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n   * 2. Moving between two storage mediums, e.g.,\n   *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n   *\n   * ```js\n   * // First create and save a model.\n   * const model = tf.sequential();\n   * model.add(tf.layers.dense(\n   *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n   * await model.save('localstorage://demo/management/model1');\n   *\n   * // Then list existing models.\n   * console.log(JSON.stringify(await tf.io.listModels()));\n   *\n   * // Move the model, from Local Storage to IndexedDB.\n   * await tf.io.moveModel(\n   *     'localstorage://demo/management/model1',\n   *     'indexeddb://demo/management/model1');\n   *\n   * // List models again.\n   * console.log(JSON.stringify(await tf.io.listModels()));\n   *\n   * // Remove the moved model.\n   * await tf.io.removeModel('indexeddb://demo/management/model1');\n   * ```\n   *\n   * @param sourceURL Source URL of moving.\n   * @param destURL Destination URL of moving.\n   * @returns ModelArtifactsInfo of the copied model (if and only if copying\n   *   is successful).\n   * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n   *   if `oldPath` and `newPath` are identical.\n   */\n  @doc({heading: 'Models', subheading: 'Management', namespace: 'io'})\n  static async moveModel(sourceURL: string, destURL: string):\n      Promise<ModelArtifactsInfo> {\n    const deleteSource = true;\n    return await cloneModelInternal(sourceURL, destURL, deleteSource);\n  }\n}\n"]}},"hash":"4294deaa442e4491153ca0de80063363","cacheData":{"env":{}}}