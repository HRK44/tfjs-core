{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524062920943},{"name":"./array_ops","loc":{"line":3,"column":26}},{"name":"./batchnorm","loc":{"line":4,"column":26}},{"name":"./binary_ops","loc":{"line":5,"column":27}},{"name":"./compare","loc":{"line":6,"column":24}},{"name":"./concat","loc":{"line":7,"column":23}},{"name":"./conv","loc":{"line":8,"column":21}},{"name":"./image_ops","loc":{"line":9,"column":26}},{"name":"./logical_ops","loc":{"line":10,"column":28}},{"name":"./loss_ops","loc":{"line":11,"column":25}},{"name":"./lrn","loc":{"line":12,"column":20}},{"name":"./lstm","loc":{"line":13,"column":21}},{"name":"./matmul","loc":{"line":14,"column":23}},{"name":"./moving_average","loc":{"line":15,"column":31}},{"name":"./norm","loc":{"line":16,"column":21}},{"name":"./pool","loc":{"line":17,"column":21}},{"name":"./reduction_ops","loc":{"line":18,"column":30}},{"name":"./reverse","loc":{"line":19,"column":24}},{"name":"./slice","loc":{"line":20,"column":22}},{"name":"./softmax","loc":{"line":21,"column":24}},{"name":"./transpose","loc":{"line":22,"column":26}},{"name":"./unary_ops","loc":{"line":23,"column":26}},{"name":"../tensor","loc":{"line":179,"column":23}},{"name":"../types","loc":{"line":180,"column":22}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar array_ops_1 = require(\"./array_ops\");\nvar batchnorm_1 = require(\"./batchnorm\");\nvar binary_ops_1 = require(\"./binary_ops\");\nvar compare_1 = require(\"./compare\");\nvar concat_1 = require(\"./concat\");\nvar conv_1 = require(\"./conv\");\nvar image_ops_1 = require(\"./image_ops\");\nvar logical_ops_1 = require(\"./logical_ops\");\nvar loss_ops_1 = require(\"./loss_ops\");\nvar lrn_1 = require(\"./lrn\");\nvar lstm_1 = require(\"./lstm\");\nvar matmul_1 = require(\"./matmul\");\nvar moving_average_1 = require(\"./moving_average\");\nvar norm_1 = require(\"./norm\");\nvar pool_1 = require(\"./pool\");\nvar reduction_ops_1 = require(\"./reduction_ops\");\nvar reverse_1 = require(\"./reverse\");\nvar slice_1 = require(\"./slice\");\nvar softmax_1 = require(\"./softmax\");\nvar transpose_1 = require(\"./transpose\");\nvar unary_ops_1 = require(\"./unary_ops\");\nexports.batchNormalization = batchnorm_1.BatchNormOps.batchNormalization;\nexports.batchNormalization2d = batchnorm_1.BatchNormOps.batchNormalization2d;\nexports.batchNormalization3d = batchnorm_1.BatchNormOps.batchNormalization3d;\nexports.batchNormalization4d = batchnorm_1.BatchNormOps.batchNormalization4d;\nexports.concat = concat_1.ConcatOps.concat;\nexports.concat1d = concat_1.ConcatOps.concat1d;\nexports.concat2d = concat_1.ConcatOps.concat2d;\nexports.concat3d = concat_1.ConcatOps.concat3d;\nexports.concat4d = concat_1.ConcatOps.concat4d;\nexports.conv1d = conv_1.ConvOps.conv1d;\nexports.conv2d = conv_1.ConvOps.conv2d;\nexports.conv2dTranspose = conv_1.ConvOps.conv2dTranspose;\nexports.depthwiseConv2d = conv_1.ConvOps.depthwiseConv2d;\nexports.separableConv2d = conv_1.ConvOps.separableConv2d;\nexports.matMul = matmul_1.MatmulOps.matMul;\nexports.matrixTimesVector = matmul_1.MatmulOps.matrixTimesVector;\nexports.outerProduct = matmul_1.MatmulOps.outerProduct;\nexports.vectorTimesMatrix = matmul_1.MatmulOps.vectorTimesMatrix;\nexports.avgPool = pool_1.PoolOps.avgPool;\nexports.maxPool = pool_1.PoolOps.maxPool;\nexports.transpose = transpose_1.TransposeOps.transpose;\nexports.reverse = reverse_1.ReverseOps.reverse;\nexports.reverse1d = reverse_1.ReverseOps.reverse1d;\nexports.reverse2d = reverse_1.ReverseOps.reverse2d;\nexports.reverse3d = reverse_1.ReverseOps.reverse3d;\nexports.reverse4d = reverse_1.ReverseOps.reverse4d;\nexports.slice = slice_1.SliceOps.slice;\nexports.slice1d = slice_1.SliceOps.slice1d;\nexports.slice2d = slice_1.SliceOps.slice2d;\nexports.slice3d = slice_1.SliceOps.slice3d;\nexports.slice4d = slice_1.SliceOps.slice4d;\nexports.argMax = reduction_ops_1.ReductionOps.argMax;\nexports.argMin = reduction_ops_1.ReductionOps.argMin;\nexports.logSumExp = reduction_ops_1.ReductionOps.logSumExp;\nexports.max = reduction_ops_1.ReductionOps.max;\nexports.mean = reduction_ops_1.ReductionOps.mean;\nexports.min = reduction_ops_1.ReductionOps.min;\nexports.moments = reduction_ops_1.ReductionOps.moments;\nexports.sum = reduction_ops_1.ReductionOps.sum;\nexports.equal = compare_1.CompareOps.equal;\nexports.equalStrict = compare_1.CompareOps.equalStrict;\nexports.greater = compare_1.CompareOps.greater;\nexports.greaterStrict = compare_1.CompareOps.greaterStrict;\nexports.greaterEqual = compare_1.CompareOps.greaterEqual;\nexports.greaterEqualStrict = compare_1.CompareOps.greaterEqualStrict;\nexports.less = compare_1.CompareOps.less;\nexports.lessStrict = compare_1.CompareOps.lessStrict;\nexports.lessEqual = compare_1.CompareOps.lessEqual;\nexports.lessEqualStrict = compare_1.CompareOps.lessEqualStrict;\nexports.notEqual = compare_1.CompareOps.notEqual;\nexports.notEqualStrict = compare_1.CompareOps.notEqualStrict;\nexports.logicalNot = logical_ops_1.LogicalOps.logicalNot;\nexports.logicalAnd = logical_ops_1.LogicalOps.logicalAnd;\nexports.logicalOr = logical_ops_1.LogicalOps.logicalOr;\nexports.logicalXor = logical_ops_1.LogicalOps.logicalXor;\nexports.where = logical_ops_1.LogicalOps.where;\nexports.abs = unary_ops_1.UnaryOps.abs;\nexports.acos = unary_ops_1.UnaryOps.acos;\nexports.acosh = unary_ops_1.UnaryOps.acosh;\nexports.asin = unary_ops_1.UnaryOps.asin;\nexports.asinh = unary_ops_1.UnaryOps.asinh;\nexports.atan = unary_ops_1.UnaryOps.atan;\nexports.atanh = unary_ops_1.UnaryOps.atanh;\nexports.ceil = unary_ops_1.UnaryOps.ceil;\nexports.clipByValue = unary_ops_1.UnaryOps.clipByValue;\nexports.cos = unary_ops_1.UnaryOps.cos;\nexports.cosh = unary_ops_1.UnaryOps.cosh;\nexports.elu = unary_ops_1.UnaryOps.elu;\nexports.exp = unary_ops_1.UnaryOps.exp;\nexports.expm1 = unary_ops_1.UnaryOps.expm1;\nexports.floor = unary_ops_1.UnaryOps.floor;\nexports.sign = unary_ops_1.UnaryOps.sign;\nexports.leakyRelu = unary_ops_1.UnaryOps.leakyRelu;\nexports.log = unary_ops_1.UnaryOps.log;\nexports.log1p = unary_ops_1.UnaryOps.log1p;\nexports.logSigmoid = unary_ops_1.UnaryOps.logSigmoid;\nexports.neg = unary_ops_1.UnaryOps.neg;\nexports.prelu = unary_ops_1.UnaryOps.prelu;\nexports.relu = unary_ops_1.UnaryOps.relu;\nexports.reciprocal = unary_ops_1.UnaryOps.reciprocal;\nexports.round = unary_ops_1.UnaryOps.round;\nexports.selu = unary_ops_1.UnaryOps.selu;\nexports.sigmoid = unary_ops_1.UnaryOps.sigmoid;\nexports.sin = unary_ops_1.UnaryOps.sin;\nexports.sinh = unary_ops_1.UnaryOps.sinh;\nexports.softplus = unary_ops_1.UnaryOps.softplus;\nexports.sqrt = unary_ops_1.UnaryOps.sqrt;\nexports.rsqrt = unary_ops_1.UnaryOps.rsqrt;\nexports.square = unary_ops_1.UnaryOps.square;\nexports.step = unary_ops_1.UnaryOps.step;\nexports.tan = unary_ops_1.UnaryOps.tan;\nexports.tanh = unary_ops_1.UnaryOps.tanh;\nexports.erf = unary_ops_1.UnaryOps.erf;\nexports.add = binary_ops_1.BinaryOps.add;\nexports.addStrict = binary_ops_1.BinaryOps.addStrict;\nexports.atan2 = binary_ops_1.BinaryOps.atan2;\nexports.div = binary_ops_1.BinaryOps.div;\nexports.divStrict = binary_ops_1.BinaryOps.divStrict;\nexports.maximum = binary_ops_1.BinaryOps.maximum;\nexports.maximumStrict = binary_ops_1.BinaryOps.maximumStrict;\nexports.minimum = binary_ops_1.BinaryOps.minimum;\nexports.minimumStrict = binary_ops_1.BinaryOps.minimumStrict;\nexports.mod = binary_ops_1.BinaryOps.mod;\nexports.modStrict = binary_ops_1.BinaryOps.modStrict;\nexports.mul = binary_ops_1.BinaryOps.mul;\nexports.mulStrict = binary_ops_1.BinaryOps.mulStrict;\nexports.pow = binary_ops_1.BinaryOps.pow;\nexports.powStrict = binary_ops_1.BinaryOps.powStrict;\nexports.sub = binary_ops_1.BinaryOps.sub;\nexports.subStrict = binary_ops_1.BinaryOps.subStrict;\nexports.squaredDifference = binary_ops_1.BinaryOps.squaredDifference;\nexports.squaredDifferenceStrict = binary_ops_1.BinaryOps.squaredDifferenceStrict;\nexports.norm = norm_1.NormOps.norm;\nexports.cast = array_ops_1.ArrayOps.cast;\nexports.clone = array_ops_1.ArrayOps.clone;\nexports.fromPixels = array_ops_1.ArrayOps.fromPixels;\nexports.toPixels = array_ops_1.ArrayOps.toPixels;\nexports.ones = array_ops_1.ArrayOps.ones;\nexports.onesLike = array_ops_1.ArrayOps.onesLike;\nexports.zeros = array_ops_1.ArrayOps.zeros;\nexports.zerosLike = array_ops_1.ArrayOps.zerosLike;\nexports.rand = array_ops_1.ArrayOps.rand;\nexports.randomNormal = array_ops_1.ArrayOps.randomNormal;\nexports.truncatedNormal = array_ops_1.ArrayOps.truncatedNormal;\nexports.randomUniform = array_ops_1.ArrayOps.randomUniform;\nexports.multinomial = array_ops_1.ArrayOps.multinomial;\nexports.reshape = array_ops_1.ArrayOps.reshape;\nexports.squeeze = array_ops_1.ArrayOps.squeeze;\nexports.tile = array_ops_1.ArrayOps.tile;\nexports.gather = array_ops_1.ArrayOps.gather;\nexports.oneHot = array_ops_1.ArrayOps.oneHot;\nexports.linspace = array_ops_1.ArrayOps.linspace;\nexports.range = array_ops_1.ArrayOps.range;\nexports.buffer = array_ops_1.ArrayOps.buffer;\nexports.fill = array_ops_1.ArrayOps.fill;\nexports.tensor = array_ops_1.ArrayOps.tensor;\nexports.scalar = array_ops_1.ArrayOps.scalar;\nexports.tensor1d = array_ops_1.ArrayOps.tensor1d;\nexports.tensor2d = array_ops_1.ArrayOps.tensor2d;\nexports.tensor3d = array_ops_1.ArrayOps.tensor3d;\nexports.tensor4d = array_ops_1.ArrayOps.tensor4d;\nexports.print = array_ops_1.ArrayOps.print;\nexports.expandDims = array_ops_1.ArrayOps.expandDims;\nexports.stack = array_ops_1.ArrayOps.stack;\nexports.split = array_ops_1.ArrayOps.split;\nexports.pad = array_ops_1.ArrayOps.pad;\nexports.pad1d = array_ops_1.ArrayOps.pad1d;\nexports.pad2d = array_ops_1.ArrayOps.pad2d;\nexports.pad3d = array_ops_1.ArrayOps.pad3d;\nexports.pad4d = array_ops_1.ArrayOps.pad4d;\nexports.movingAverage = moving_average_1.MovingAverageOps.movingAverage;\nexports.basicLSTMCell = lstm_1.LSTMOps.basicLSTMCell;\nexports.multiRNNCell = lstm_1.LSTMOps.multiRNNCell;\nexports.softmax = softmax_1.SoftmaxOps.softmax;\nexports.localResponseNormalization = lrn_1.LRNOps.localResponseNormalization;\nvar tensor_1 = require(\"../tensor\");\nvar types_1 = require(\"../types\");\n[tensor_1.Tensor, types_1.Rank];\n[loss_ops_1.Reduction];\nexports.losses = {\n    absoluteDifference: loss_ops_1.LossOps.absoluteDifference,\n    computeWeightedLoss: loss_ops_1.LossOps.computeWeightedLoss,\n    cosineDistance: loss_ops_1.LossOps.cosineDistance,\n    meanSquaredError: loss_ops_1.LossOps.meanSquaredError,\n    softmaxCrossEntropy: softmax_1.SoftmaxOps.softmaxCrossEntropy\n};\nexports.image = {\n    resizeBilinear: image_ops_1.ImageOps.resizeBilinear,\n    resizeNearestNeighbor: image_ops_1.ImageOps.resizeNearestNeighbor,\n};\n","map":{"version":3,"file":"ops.js","sourceRoot":"","sources":["../src/ops/ops.ts"],"names":[],"mappings":";;AAiBA,yCAAqC;AACrC,yCAAyC;AACzC,2CAAuC;AACvC,qCAAqC;AACrC,mCAAmC;AACnC,+BAA+B;AAC/B,yCAAqC;AACrC,6CAAyC;AACzC,uCAA8C;AAC9C,6BAA6B;AAC7B,+BAA+B;AAC/B,mCAAmC;AACnC,mDAAkD;AAClD,+BAA+B;AAC/B,+BAA+B;AAC/B,iDAA6C;AAC7C,qCAAqC;AACrC,iCAAiC;AACjC,qCAAqC;AACrC,yCAAyC;AACzC,yCAAqC;AAExB,QAAA,kBAAkB,GAAG,wBAAY,CAAC,kBAAkB,CAAC;AACrD,QAAA,oBAAoB,GAAG,wBAAY,CAAC,oBAAoB,CAAC;AACzD,QAAA,oBAAoB,GAAG,wBAAY,CAAC,oBAAoB,CAAC;AACzD,QAAA,oBAAoB,GAAG,wBAAY,CAAC,oBAAoB,CAAC;AAEzD,QAAA,MAAM,GAAG,kBAAS,CAAC,MAAM,CAAC;AAC1B,QAAA,QAAQ,GAAG,kBAAS,CAAC,QAAQ,CAAC;AAC9B,QAAA,QAAQ,GAAG,kBAAS,CAAC,QAAQ,CAAC;AAC9B,QAAA,QAAQ,GAAG,kBAAS,CAAC,QAAQ,CAAC;AAC9B,QAAA,QAAQ,GAAG,kBAAS,CAAC,QAAQ,CAAC;AAE9B,QAAA,MAAM,GAAG,cAAO,CAAC,MAAM,CAAC;AACxB,QAAA,MAAM,GAAG,cAAO,CAAC,MAAM,CAAC;AACxB,QAAA,eAAe,GAAG,cAAO,CAAC,eAAe,CAAC;AAC1C,QAAA,eAAe,GAAG,cAAO,CAAC,eAAe,CAAC;AAC1C,QAAA,eAAe,GAAG,cAAO,CAAC,eAAe,CAAC;AAE1C,QAAA,MAAM,GAAG,kBAAS,CAAC,MAAM,CAAC;AAC1B,QAAA,iBAAiB,GAAG,kBAAS,CAAC,iBAAiB,CAAC;AAChD,QAAA,YAAY,GAAG,kBAAS,CAAC,YAAY,CAAC;AACtC,QAAA,iBAAiB,GAAG,kBAAS,CAAC,iBAAiB,CAAC;AAEhD,QAAA,OAAO,GAAG,cAAO,CAAC,OAAO,CAAC;AAC1B,QAAA,OAAO,GAAG,cAAO,CAAC,OAAO,CAAC;AAE1B,QAAA,SAAS,GAAG,wBAAY,CAAC,SAAS,CAAC;AAEnC,QAAA,OAAO,GAAG,oBAAU,CAAC,OAAO,CAAC;AAC7B,QAAA,SAAS,GAAG,oBAAU,CAAC,SAAS,CAAC;AACjC,QAAA,SAAS,GAAG,oBAAU,CAAC,SAAS,CAAC;AACjC,QAAA,SAAS,GAAG,oBAAU,CAAC,SAAS,CAAC;AACjC,QAAA,SAAS,GAAG,oBAAU,CAAC,SAAS,CAAC;AAEjC,QAAA,KAAK,GAAG,gBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,OAAO,GAAG,gBAAQ,CAAC,OAAO,CAAC;AAC3B,QAAA,OAAO,GAAG,gBAAQ,CAAC,OAAO,CAAC;AAC3B,QAAA,OAAO,GAAG,gBAAQ,CAAC,OAAO,CAAC;AAC3B,QAAA,OAAO,GAAG,gBAAQ,CAAC,OAAO,CAAC;AAE3B,QAAA,MAAM,GAAG,4BAAY,CAAC,MAAM,CAAC;AAC7B,QAAA,MAAM,GAAG,4BAAY,CAAC,MAAM,CAAC;AAC7B,QAAA,SAAS,GAAG,4BAAY,CAAC,SAAS,CAAC;AACnC,QAAA,GAAG,GAAG,4BAAY,CAAC,GAAG,CAAC;AACvB,QAAA,IAAI,GAAG,4BAAY,CAAC,IAAI,CAAC;AACzB,QAAA,GAAG,GAAG,4BAAY,CAAC,GAAG,CAAC;AACvB,QAAA,OAAO,GAAG,4BAAY,CAAC,OAAO,CAAC;AAC/B,QAAA,GAAG,GAAG,4BAAY,CAAC,GAAG,CAAC;AAEvB,QAAA,KAAK,GAAG,oBAAU,CAAC,KAAK,CAAC;AACzB,QAAA,WAAW,GAAG,oBAAU,CAAC,WAAW,CAAC;AACrC,QAAA,OAAO,GAAG,oBAAU,CAAC,OAAO,CAAC;AAC7B,QAAA,aAAa,GAAG,oBAAU,CAAC,aAAa,CAAC;AACzC,QAAA,YAAY,GAAG,oBAAU,CAAC,YAAY,CAAC;AACvC,QAAA,kBAAkB,GAAG,oBAAU,CAAC,kBAAkB,CAAC;AACnD,QAAA,IAAI,GAAG,oBAAU,CAAC,IAAI,CAAC;AACvB,QAAA,UAAU,GAAG,oBAAU,CAAC,UAAU,CAAC;AACnC,QAAA,SAAS,GAAG,oBAAU,CAAC,SAAS,CAAC;AACjC,QAAA,eAAe,GAAG,oBAAU,CAAC,eAAe,CAAC;AAC7C,QAAA,QAAQ,GAAG,oBAAU,CAAC,QAAQ,CAAC;AAC/B,QAAA,cAAc,GAAG,oBAAU,CAAC,cAAc,CAAC;AAE3C,QAAA,UAAU,GAAG,wBAAU,CAAC,UAAU,CAAC;AACnC,QAAA,UAAU,GAAG,wBAAU,CAAC,UAAU,CAAC;AACnC,QAAA,SAAS,GAAG,wBAAU,CAAC,SAAS,CAAC;AACjC,QAAA,UAAU,GAAG,wBAAU,CAAC,UAAU,CAAC;AACnC,QAAA,KAAK,GAAG,wBAAU,CAAC,KAAK,CAAC;AAEzB,QAAA,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC;AACnB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,WAAW,GAAG,oBAAQ,CAAC,WAAW,CAAC;AACnC,QAAA,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC;AACnB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC;AACnB,QAAA,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC;AACnB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,SAAS,GAAG,oBAAQ,CAAC,SAAS,CAAC;AAC/B,QAAA,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC;AACnB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,UAAU,GAAG,oBAAQ,CAAC,UAAU,CAAC;AACjC,QAAA,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC;AACnB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,UAAU,GAAG,oBAAQ,CAAC,UAAU,CAAC;AACjC,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,OAAO,GAAG,oBAAQ,CAAC,OAAO,CAAC;AAC3B,QAAA,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC;AACnB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,QAAQ,GAAG,oBAAQ,CAAC,QAAQ,CAAC;AAC7B,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,MAAM,GAAG,oBAAQ,CAAC,MAAM,CAAC;AACzB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC;AACnB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC;AAEnB,QAAA,GAAG,GAAG,sBAAS,CAAC,GAAG,CAAC;AACpB,QAAA,SAAS,GAAG,sBAAS,CAAC,SAAS,CAAC;AAChC,QAAA,KAAK,GAAG,sBAAS,CAAC,KAAK,CAAC;AACxB,QAAA,GAAG,GAAG,sBAAS,CAAC,GAAG,CAAC;AACpB,QAAA,SAAS,GAAG,sBAAS,CAAC,SAAS,CAAC;AAChC,QAAA,OAAO,GAAG,sBAAS,CAAC,OAAO,CAAC;AAC5B,QAAA,aAAa,GAAG,sBAAS,CAAC,aAAa,CAAC;AACxC,QAAA,OAAO,GAAG,sBAAS,CAAC,OAAO,CAAC;AAC5B,QAAA,aAAa,GAAG,sBAAS,CAAC,aAAa,CAAC;AACxC,QAAA,GAAG,GAAG,sBAAS,CAAC,GAAG,CAAC;AACpB,QAAA,SAAS,GAAG,sBAAS,CAAC,SAAS,CAAC;AAChC,QAAA,GAAG,GAAG,sBAAS,CAAC,GAAG,CAAC;AACpB,QAAA,SAAS,GAAG,sBAAS,CAAC,SAAS,CAAC;AAChC,QAAA,GAAG,GAAG,sBAAS,CAAC,GAAG,CAAC;AACpB,QAAA,SAAS,GAAG,sBAAS,CAAC,SAAS,CAAC;AAChC,QAAA,GAAG,GAAG,sBAAS,CAAC,GAAG,CAAC;AACpB,QAAA,SAAS,GAAG,sBAAS,CAAC,SAAS,CAAC;AAEhC,QAAA,iBAAiB,GAAG,sBAAS,CAAC,iBAAiB,CAAC;AAChD,QAAA,uBAAuB,GAAG,sBAAS,CAAC,uBAAuB,CAAC;AAE5D,QAAA,IAAI,GAAG,cAAO,CAAC,IAAI,CAAC;AAEpB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,UAAU,GAAG,oBAAQ,CAAC,UAAU,CAAC;AACjC,QAAA,QAAQ,GAAG,oBAAQ,CAAC,QAAQ,CAAC;AAC7B,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,QAAQ,GAAG,oBAAQ,CAAC,QAAQ,CAAC;AAC7B,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,SAAS,GAAG,oBAAQ,CAAC,SAAS,CAAC;AAC/B,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,YAAY,GAAG,oBAAQ,CAAC,YAAY,CAAC;AACrC,QAAA,eAAe,GAAG,oBAAQ,CAAC,eAAe,CAAC;AAC3C,QAAA,aAAa,GAAG,oBAAQ,CAAC,aAAa,CAAC;AACvC,QAAA,WAAW,GAAG,oBAAQ,CAAC,WAAW,CAAC;AACnC,QAAA,OAAO,GAAG,oBAAQ,CAAC,OAAO,CAAC;AAC3B,QAAA,OAAO,GAAG,oBAAQ,CAAC,OAAO,CAAC;AAC3B,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,MAAM,GAAG,oBAAQ,CAAC,MAAM,CAAC;AACzB,QAAA,MAAM,GAAG,oBAAQ,CAAC,MAAM,CAAC;AACzB,QAAA,QAAQ,GAAG,oBAAQ,CAAC,QAAQ,CAAC;AAC7B,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,MAAM,GAAG,oBAAQ,CAAC,MAAM,CAAC;AACzB,QAAA,IAAI,GAAG,oBAAQ,CAAC,IAAI,CAAC;AACrB,QAAA,MAAM,GAAG,oBAAQ,CAAC,MAAM,CAAC;AACzB,QAAA,MAAM,GAAG,oBAAQ,CAAC,MAAM,CAAC;AACzB,QAAA,QAAQ,GAAG,oBAAQ,CAAC,QAAQ,CAAC;AAC7B,QAAA,QAAQ,GAAG,oBAAQ,CAAC,QAAQ,CAAC;AAC7B,QAAA,QAAQ,GAAG,oBAAQ,CAAC,QAAQ,CAAC;AAC7B,QAAA,QAAQ,GAAG,oBAAQ,CAAC,QAAQ,CAAC;AAC7B,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,UAAU,GAAG,oBAAQ,CAAC,UAAU,CAAC;AACjC,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AAEvB,QAAA,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC;AACnB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AACvB,QAAA,KAAK,GAAG,oBAAQ,CAAC,KAAK,CAAC;AAEvB,QAAA,aAAa,GAAG,iCAAgB,CAAC,aAAa,CAAC;AAE/C,QAAA,aAAa,GAAG,cAAO,CAAC,aAAa,CAAC;AACtC,QAAA,YAAY,GAAG,cAAO,CAAC,YAAY,CAAC;AAEpC,QAAA,OAAO,GAAG,oBAAU,CAAC,OAAO,CAAC;AAE7B,QAAA,0BAA0B,GAAG,YAAM,CAAC,0BAA0B,CAAC;AAG5E,oCAAiC;AACjC,kCAA8B;AAE9B,CAAC,eAAM,EAAE,YAAI,CAAC,CAAC;AAGf,CAAC,oBAAS,CAAC,CAAC;AAEC,QAAA,MAAM,GAAG;IACpB,kBAAkB,EAAE,kBAAO,CAAC,kBAAkB;IAC9C,mBAAmB,EAAE,kBAAO,CAAC,mBAAmB;IAChD,cAAc,EAAE,kBAAO,CAAC,cAAc;IACtC,gBAAgB,EAAE,kBAAO,CAAC,gBAAgB;IAC1C,mBAAmB,EAAE,oBAAU,CAAC,mBAAmB;CACpD,CAAC;AAEW,QAAA,KAAK,GAAG;IACnB,cAAc,EAAE,oBAAQ,CAAC,cAAc;IACvC,qBAAqB,EAAE,oBAAQ,CAAC,qBAAqB;CACtD,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArrayOps} from './array_ops';\nimport {BatchNormOps} from './batchnorm';\nimport {BinaryOps} from './binary_ops';\nimport {CompareOps} from './compare';\nimport {ConcatOps} from './concat';\nimport {ConvOps} from './conv';\nimport {ImageOps} from './image_ops';\nimport {LogicalOps} from './logical_ops';\nimport {LossOps, Reduction} from './loss_ops';\nimport {LRNOps} from './lrn';\nimport {LSTMOps} from './lstm';\nimport {MatmulOps} from './matmul';\nimport {MovingAverageOps} from './moving_average';\nimport {NormOps} from './norm';\nimport {PoolOps} from './pool';\nimport {ReductionOps} from './reduction_ops';\nimport {ReverseOps} from './reverse';\nimport {SliceOps} from './slice';\nimport {SoftmaxOps} from './softmax';\nimport {TransposeOps} from './transpose';\nimport {UnaryOps} from './unary_ops';\n\nexport const batchNormalization = BatchNormOps.batchNormalization;\nexport const batchNormalization2d = BatchNormOps.batchNormalization2d;\nexport const batchNormalization3d = BatchNormOps.batchNormalization3d;\nexport const batchNormalization4d = BatchNormOps.batchNormalization4d;\n\nexport const concat = ConcatOps.concat;\nexport const concat1d = ConcatOps.concat1d;\nexport const concat2d = ConcatOps.concat2d;\nexport const concat3d = ConcatOps.concat3d;\nexport const concat4d = ConcatOps.concat4d;\n\nexport const conv1d = ConvOps.conv1d;\nexport const conv2d = ConvOps.conv2d;\nexport const conv2dTranspose = ConvOps.conv2dTranspose;\nexport const depthwiseConv2d = ConvOps.depthwiseConv2d;\nexport const separableConv2d = ConvOps.separableConv2d;\n\nexport const matMul = MatmulOps.matMul;\nexport const matrixTimesVector = MatmulOps.matrixTimesVector;\nexport const outerProduct = MatmulOps.outerProduct;\nexport const vectorTimesMatrix = MatmulOps.vectorTimesMatrix;\n\nexport const avgPool = PoolOps.avgPool;\nexport const maxPool = PoolOps.maxPool;\n\nexport const transpose = TransposeOps.transpose;\n\nexport const reverse = ReverseOps.reverse;\nexport const reverse1d = ReverseOps.reverse1d;\nexport const reverse2d = ReverseOps.reverse2d;\nexport const reverse3d = ReverseOps.reverse3d;\nexport const reverse4d = ReverseOps.reverse4d;\n\nexport const slice = SliceOps.slice;\nexport const slice1d = SliceOps.slice1d;\nexport const slice2d = SliceOps.slice2d;\nexport const slice3d = SliceOps.slice3d;\nexport const slice4d = SliceOps.slice4d;\n\nexport const argMax = ReductionOps.argMax;\nexport const argMin = ReductionOps.argMin;\nexport const logSumExp = ReductionOps.logSumExp;\nexport const max = ReductionOps.max;\nexport const mean = ReductionOps.mean;\nexport const min = ReductionOps.min;\nexport const moments = ReductionOps.moments;\nexport const sum = ReductionOps.sum;\n\nexport const equal = CompareOps.equal;\nexport const equalStrict = CompareOps.equalStrict;\nexport const greater = CompareOps.greater;\nexport const greaterStrict = CompareOps.greaterStrict;\nexport const greaterEqual = CompareOps.greaterEqual;\nexport const greaterEqualStrict = CompareOps.greaterEqualStrict;\nexport const less = CompareOps.less;\nexport const lessStrict = CompareOps.lessStrict;\nexport const lessEqual = CompareOps.lessEqual;\nexport const lessEqualStrict = CompareOps.lessEqualStrict;\nexport const notEqual = CompareOps.notEqual;\nexport const notEqualStrict = CompareOps.notEqualStrict;\n\nexport const logicalNot = LogicalOps.logicalNot;\nexport const logicalAnd = LogicalOps.logicalAnd;\nexport const logicalOr = LogicalOps.logicalOr;\nexport const logicalXor = LogicalOps.logicalXor;\nexport const where = LogicalOps.where;\n\nexport const abs = UnaryOps.abs;\nexport const acos = UnaryOps.acos;\nexport const acosh = UnaryOps.acosh;\nexport const asin = UnaryOps.asin;\nexport const asinh = UnaryOps.asinh;\nexport const atan = UnaryOps.atan;\nexport const atanh = UnaryOps.atanh;\nexport const ceil = UnaryOps.ceil;\nexport const clipByValue = UnaryOps.clipByValue;\nexport const cos = UnaryOps.cos;\nexport const cosh = UnaryOps.cosh;\nexport const elu = UnaryOps.elu;\nexport const exp = UnaryOps.exp;\nexport const expm1 = UnaryOps.expm1;\nexport const floor = UnaryOps.floor;\nexport const sign = UnaryOps.sign;\nexport const leakyRelu = UnaryOps.leakyRelu;\nexport const log = UnaryOps.log;\nexport const log1p = UnaryOps.log1p;\nexport const logSigmoid = UnaryOps.logSigmoid;\nexport const neg = UnaryOps.neg;\nexport const prelu = UnaryOps.prelu;\nexport const relu = UnaryOps.relu;\nexport const reciprocal = UnaryOps.reciprocal;\nexport const round = UnaryOps.round;\nexport const selu = UnaryOps.selu;\nexport const sigmoid = UnaryOps.sigmoid;\nexport const sin = UnaryOps.sin;\nexport const sinh = UnaryOps.sinh;\nexport const softplus = UnaryOps.softplus;\nexport const sqrt = UnaryOps.sqrt;\nexport const rsqrt = UnaryOps.rsqrt;\nexport const square = UnaryOps.square;\nexport const step = UnaryOps.step;\nexport const tan = UnaryOps.tan;\nexport const tanh = UnaryOps.tanh;\nexport const erf = UnaryOps.erf;\n\nexport const add = BinaryOps.add;\nexport const addStrict = BinaryOps.addStrict;\nexport const atan2 = BinaryOps.atan2;\nexport const div = BinaryOps.div;\nexport const divStrict = BinaryOps.divStrict;\nexport const maximum = BinaryOps.maximum;\nexport const maximumStrict = BinaryOps.maximumStrict;\nexport const minimum = BinaryOps.minimum;\nexport const minimumStrict = BinaryOps.minimumStrict;\nexport const mod = BinaryOps.mod;\nexport const modStrict = BinaryOps.modStrict;\nexport const mul = BinaryOps.mul;\nexport const mulStrict = BinaryOps.mulStrict;\nexport const pow = BinaryOps.pow;\nexport const powStrict = BinaryOps.powStrict;\nexport const sub = BinaryOps.sub;\nexport const subStrict = BinaryOps.subStrict;\n\nexport const squaredDifference = BinaryOps.squaredDifference;\nexport const squaredDifferenceStrict = BinaryOps.squaredDifferenceStrict;\n\nexport const norm = NormOps.norm;\n\nexport const cast = ArrayOps.cast;\nexport const clone = ArrayOps.clone;\nexport const fromPixels = ArrayOps.fromPixels;\nexport const toPixels = ArrayOps.toPixels;\nexport const ones = ArrayOps.ones;\nexport const onesLike = ArrayOps.onesLike;\nexport const zeros = ArrayOps.zeros;\nexport const zerosLike = ArrayOps.zerosLike;\nexport const rand = ArrayOps.rand;\nexport const randomNormal = ArrayOps.randomNormal;\nexport const truncatedNormal = ArrayOps.truncatedNormal;\nexport const randomUniform = ArrayOps.randomUniform;\nexport const multinomial = ArrayOps.multinomial;\nexport const reshape = ArrayOps.reshape;\nexport const squeeze = ArrayOps.squeeze;\nexport const tile = ArrayOps.tile;\nexport const gather = ArrayOps.gather;\nexport const oneHot = ArrayOps.oneHot;\nexport const linspace = ArrayOps.linspace;\nexport const range = ArrayOps.range;\nexport const buffer = ArrayOps.buffer;\nexport const fill = ArrayOps.fill;\nexport const tensor = ArrayOps.tensor;\nexport const scalar = ArrayOps.scalar;\nexport const tensor1d = ArrayOps.tensor1d;\nexport const tensor2d = ArrayOps.tensor2d;\nexport const tensor3d = ArrayOps.tensor3d;\nexport const tensor4d = ArrayOps.tensor4d;\nexport const print = ArrayOps.print;\nexport const expandDims = ArrayOps.expandDims;\nexport const stack = ArrayOps.stack;\nexport const split = ArrayOps.split;\n\nexport const pad = ArrayOps.pad;\nexport const pad1d = ArrayOps.pad1d;\nexport const pad2d = ArrayOps.pad2d;\nexport const pad3d = ArrayOps.pad3d;\nexport const pad4d = ArrayOps.pad4d;\n\nexport const movingAverage = MovingAverageOps.movingAverage;\n\nexport const basicLSTMCell = LSTMOps.basicLSTMCell;\nexport const multiRNNCell = LSTMOps.multiRNNCell;\n\nexport const softmax = SoftmaxOps.softmax;\n\nexport const localResponseNormalization = LRNOps.localResponseNormalization;\n\n// So typings can propagate.\nimport {Tensor} from '../tensor';\nimport {Rank} from '../types';\n// tslint:disable-next-line:no-unused-expression\n[Tensor, Rank];\n\n// tslint:disable-next-line:no-unused-expression\n[Reduction];\n\nexport const losses = {\n  absoluteDifference: LossOps.absoluteDifference,\n  computeWeightedLoss: LossOps.computeWeightedLoss,\n  cosineDistance: LossOps.cosineDistance,\n  meanSquaredError: LossOps.meanSquaredError,\n  softmaxCrossEntropy: SoftmaxOps.softmaxCrossEntropy\n};\n\nexport const image = {\n  resizeBilinear: ImageOps.resizeBilinear,\n  resizeNearestNeighbor: ImageOps.resizeNearestNeighbor,\n};\n"]}},"hash":"563be8ef60341894d8b1cbcf8a8b94e0","cacheData":{"env":{}}}