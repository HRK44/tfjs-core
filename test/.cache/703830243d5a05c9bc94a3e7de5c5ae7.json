{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./operation","loc":{"line":12,"column":26}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar operation_1 = require(\"./operation\");\nvar ImageOps = (function () {\n    function ImageOps() {\n    }\n    ImageOps.resizeBilinear = function (images, size, alignCorners) {\n        if (alignCorners === void 0) { alignCorners = false; }\n        util.assertArgumentsAreTensors({ images: images }, 'resizeBilinear');\n        util.assert(images.rank === 3 || images.rank === 4, \"Error in resizeBilinear: x must be rank 3 or 4, but got \" +\n            (\"rank \" + images.rank + \".\"));\n        util.assert(size.length === 2, \"Error in resizeBilinear: new shape must 2D, but got shape \" +\n            (size + \".\"));\n        var batchImages = images;\n        var reshapedTo4D = false;\n        if (images.rank === 3) {\n            reshapedTo4D = true;\n            batchImages =\n                images.as4D(1, images.shape[0], images.shape[1], images.shape[2]);\n        }\n        var newHeight = size[0], newWidth = size[1];\n        var forward = function (backend, save) {\n            return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);\n        };\n        var backward = function (dy, saved) {\n            return {\n                batchImages: function () { return environment_1.ENV.engine.runKernel(function (backend) {\n                    return backend.resizeBilinearBackprop(dy, batchImages, alignCorners);\n                }, {}); }\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(forward, { batchImages: batchImages }, backward);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    ImageOps.resizeNearestNeighbor = function (images, size, alignCorners) {\n        if (alignCorners === void 0) { alignCorners = false; }\n        util.assertArgumentsAreTensors({ images: images }, 'resizeNearestNeighbor');\n        util.assert(images.rank === 3 || images.rank === 4, \"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got \" +\n            (\"rank \" + images.rank + \".\"));\n        util.assert(size.length === 2, \"Error in resizeNearestNeighbor: new shape must 2D, but got shape \" +\n            (size + \".\"));\n        util.assert(images.dtype === 'float32' || images.dtype === 'int32', '`images` must have `int32` or `float32` as dtype');\n        var batchImages = images;\n        var reshapedTo4D = false;\n        if (images.rank === 3) {\n            reshapedTo4D = true;\n            batchImages =\n                images.as4D(1, images.shape[0], images.shape[1], images.shape[2]);\n        }\n        var newHeight = size[0], newWidth = size[1];\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners); }, { batchImages: batchImages });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Images', namespace: 'image' }),\n        operation_1.operation\n    ], ImageOps, \"resizeBilinear\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Images', namespace: 'image' }),\n        operation_1.operation\n    ], ImageOps, \"resizeNearestNeighbor\", null);\n    return ImageOps;\n}());\nexports.ImageOps = ImageOps;\n","map":{"version":3,"file":"image_ops.js","sourceRoot":"","sources":["../src/ops/image_ops.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {doc} from '../doc';\nimport {ForwardFunc} from '../engine';\nimport {ENV} from '../environment';\nimport {Tensor, Tensor3D, Tensor4D} from '../tensor';\nimport * as util from '../util';\nimport {operation} from './operation';\n\nexport class ImageOps {\n  /**\n   * Bilinear resize a batch of 3D images to a new shape.\n   *\n   * @param images The images, of rank 4 or rank 3, of shape\n   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n   * @param size The new shape `[newHeight, newWidth]` to resize the\n   *     images to. Each channel is resized individually.\n   * @param alignCorners Defaults to False. If true, rescale\n   *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n   *     corners of images and resized images. If false, rescale by\n   *     `new_height / height`. Treat similarly the width dimension.\n   */\n  @doc({heading: 'Operations', subheading: 'Images', namespace: 'image'})\n  @operation\n  static resizeBilinear<T extends Tensor3D|Tensor4D>(\n      images: T, size: [number, number], alignCorners = false): T {\n    util.assertArgumentsAreTensors({images}, 'resizeBilinear');\n    util.assert(\n        images.rank === 3 || images.rank === 4,\n        `Error in resizeBilinear: x must be rank 3 or 4, but got ` +\n            `rank ${images.rank}.`);\n    util.assert(\n        size.length === 2,\n        `Error in resizeBilinear: new shape must 2D, but got shape ` +\n            `${size}.`);\n\n    let batchImages = images as Tensor4D;\n    let reshapedTo4D = false;\n    if (images.rank === 3) {\n      reshapedTo4D = true;\n      batchImages =\n          images.as4D(1, images.shape[0], images.shape[1], images.shape[2]);\n    }\n\n    const [newHeight, newWidth] = size;\n    const forward: ForwardFunc<Tensor4D> = (backend, save) =>\n        backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);\n\n    const backward = (dy: Tensor4D, saved: Tensor[]) => {\n      return {\n        batchImages: () => ENV.engine.runKernel(\n            backend =>\n                backend.resizeBilinearBackprop(dy, batchImages, alignCorners),\n            {})\n      };\n    };\n\n    const res = ENV.engine.runKernel(forward, {batchImages}, backward);\n    if (reshapedTo4D) {\n      return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n    }\n    return res as T;\n  }\n\n  /**\n   * NearestNeighbor resize a batch of 3D images to a new shape.\n   *\n   * @param images The images, of rank 4 or rank 3, of shape\n   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n   * @param size The new shape `[newHeight, newWidth]` to resize the\n   *     images to. Each channel is resized individually.\n   * @param alignCorners Defaults to False. If true, rescale\n   *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n   *     corners of images and resized images. If false, rescale by\n   *     `new_height / height`. Treat similarly the width dimension.\n   */\n  @doc({heading: 'Operations', subheading: 'Images', namespace: 'image'})\n  @operation\n  static resizeNearestNeighbor<T extends Tensor3D|Tensor4D>(\n      images: T, size: [number, number], alignCorners = false): T {\n    util.assertArgumentsAreTensors({images}, 'resizeNearestNeighbor');\n    util.assert(\n        images.rank === 3 || images.rank === 4,\n        `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +\n            `rank ${images.rank}.`);\n    util.assert(\n        size.length === 2,\n        `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +\n            `${size}.`);\n    util.assert(\n        images.dtype === 'float32' || images.dtype === 'int32',\n        '`images` must have `int32` or `float32` as dtype');\n\n    let batchImages = images as Tensor4D;\n    let reshapedTo4D = false;\n    if (images.rank === 3) {\n      reshapedTo4D = true;\n      batchImages =\n          images.as4D(1, images.shape[0], images.shape[1], images.shape[2]);\n    }\n    const [newHeight, newWidth] = size;\n    const res = ENV.engine.runKernel(\n        backend => backend.resizeNearestNeighbor(\n            batchImages, newHeight, newWidth, alignCorners),\n        {batchImages});\n    if (reshapedTo4D) {\n      return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n    }\n    return res as T;\n  }\n}\n"]}},"hash":"3109884f73b1a40af83dfe3845585b4d","cacheData":{"env":{}}}