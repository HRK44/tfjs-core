{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"./util","loc":{"line":3,"column":19}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Profiler = (function () {\n    function Profiler(backendTimer, logger) {\n        this.backendTimer = backendTimer;\n        this.logger = logger;\n        if (logger == null) {\n            this.logger = new Logger();\n        }\n    }\n    Profiler.prototype.profileKernel = function (name, f) {\n        var _this = this;\n        var result;\n        var holdResultWrapperFn = function () {\n            result = f();\n        };\n        var timer = this.backendTimer.time(holdResultWrapperFn);\n        var vals = result.dataSync();\n        util.checkForNaN(vals, result.dtype, name);\n        timer.then(function (timing) {\n            _this.logger.logKernelProfile(name, result, vals, timing.kernelMs);\n        });\n        return result;\n    };\n    return Profiler;\n}());\nexports.Profiler = Profiler;\nvar Logger = (function () {\n    function Logger() {\n    }\n    Logger.prototype.logKernelProfile = function (name, result, vals, timeMs) {\n        var time = util.rightPad(timeMs + \"ms\", 9);\n        var paddedName = util.rightPad(name, 25);\n        var rank = result.rank;\n        var size = result.size;\n        var shape = util.rightPad(result.shape.toString(), 14);\n        console.log(\"%c\" + paddedName + \"\\t%c\" + time + \"\\t%c\" + rank + \"D \" + shape + \"\\t%c\" + size, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange');\n    };\n    return Logger;\n}());\nexports.Logger = Logger;\n","map":{"version":3,"file":"profiler.js","sourceRoot":"","sources":["../src/profiler.ts"],"names":[],"mappings":";;AAoBA,6BAA+B;AAE/B;IACE,kBAAoB,YAA0B,EAAU,MAAe;QAAnD,iBAAY,GAAZ,YAAY,CAAc;QAAU,WAAM,GAAN,MAAM,CAAS;QACrE,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;QAC7B,CAAC;IACH,CAAC;IAED,gCAAa,GAAb,UAAgC,IAAY,EAAE,CAAU;QAAxD,iBAeC;QAdC,IAAI,MAAS,CAAC;QACd,IAAM,mBAAmB,GAAG;YAC1B,MAAM,GAAG,CAAC,EAAE,CAAC;QACf,CAAC,CAAC;QACF,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAE1D,IAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC/B,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAE3C,KAAK,CAAC,IAAI,CAAC,UAAA,MAAM;YACf,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,MAAW,CAAC;IACrB,CAAC;IACH,eAAC;AAAD,CAAC,AAvBD,IAuBC;AAvBY,4BAAQ;AAyBrB;IAAA;IAYA,CAAC;IAXC,iCAAgB,GAAhB,UACI,IAAY,EAAE,MAAc,EAAE,IAAgB,EAAE,MAAc;QAChE,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAI,MAAM,OAAI,EAAE,CAAC,CAAC,CAAC;QAC7C,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC3C,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACzB,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACzB,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;QACzD,OAAO,CAAC,GAAG,CACP,OAAK,UAAU,YAAO,IAAI,YAAO,IAAI,UAAK,KAAK,YAAO,IAAM,EAC5D,kBAAkB,EAAE,WAAW,EAAE,YAAY,EAAE,eAAe,CAAC,CAAC;IACtE,CAAC;IACH,aAAC;AAAD,CAAC,AAZD,IAYC;AAZY,wBAAM","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer} from './kernels/backend';\nimport {Tensor} from './tensor';\nimport {TypedArray} from './types';\nimport * as util from './util';\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel<T extends Tensor>(name: string, f: () => T): T {\n    let result: T;\n    const holdResultWrapperFn = () => {\n      result = f();\n    };\n    const timer = this.backendTimer.time(holdResultWrapperFn);\n\n    const vals = result.dataSync();\n    util.checkForNaN(vals, result.dtype, name);\n\n    timer.then(timing => {\n      this.logger.logKernelProfile(name, result, vals, timing.kernelMs);\n    });\n\n    return result as T;\n  }\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray, timeMs: number) {\n    const time = util.rightPad(`${timeMs}ms`, 9);\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange');\n  }\n}\n"]}},"hash":"52133e4267a930dbccca54eabf9257ea","cacheData":{"env":{}}}