{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"./shader_compiler","loc":{"line":3,"column":32}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shader_compiler_1 = require(\"./shader_compiler\");\nvar StridedSliceProgram = (function () {\n    function StridedSliceProgram(begin, strides, shape) {\n        this.variableNames = ['x'];\n        this.outputShape = shape;\n        this.rank = shape.length;\n        var dtype = shader_compiler_1.getCoordsDataType(this.rank);\n        var newCoords = '';\n        if (this.rank === 1) {\n            newCoords = 'coords * strides + begin';\n        }\n        else {\n            newCoords =\n                shape.map(function (_, i) { return \"coords[\" + i + \"] * strides[\" + i + \"] + begin[\" + i + \"]\"; })\n                    .join(',');\n        }\n        this.userCode = \"\\n      \" + dtype + \" begin = \" + dtype + \"(\" + begin + \");\\n      \" + dtype + \" strides = \" + dtype + \"(\" + strides + \");\\n\\n      void main() {\\n        \" + dtype + \" coords = getOutputCoords();\\n        setOutput(getX(\" + newCoords + \"));\\n      }\\n    \";\n    }\n    return StridedSliceProgram;\n}());\nexports.StridedSliceProgram = StridedSliceProgram;\n","map":{"version":3,"file":"strided_slice_gpu.js","sourceRoot":"","sources":["../src/kernels/webgl/strided_slice_gpu.ts"],"names":[],"mappings":";;AAkBA,qDAAoD;AAEpD;IAME,6BAAY,KAAe,EAAE,OAAiB,EAAE,KAAe;QAL/D,kBAAa,GAAG,CAAC,GAAG,CAAC,CAAC;QAMpB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC;QACzB,IAAM,KAAK,GAAG,mCAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE3C,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,SAAS,GAAG,0BAA0B,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,SAAS;gBACL,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,YAAU,CAAC,oBAAe,CAAC,kBAAa,CAAC,MAAG,EAA5C,CAA4C,CAAC;qBAC5D,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,aACZ,KAAK,iBAAY,KAAK,SAAI,KAAK,kBAC/B,KAAK,mBAAc,KAAK,SAAI,OAAO,2CAGjC,KAAK,6DACU,SAAS,uBAE7B,CAAC;IACJ,CAAC;IACH,0BAAC;AAAD,CAAC,AA9BD,IA8BC;AA9BY,kDAAmB","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(begin: number[], strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    this.rank = shape.length;\n    const dtype = getCoordsDataType(this.rank);\n\n    let newCoords = '';\n    if (this.rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      newCoords =\n          shape.map((_, i) => `coords[${i}] * strides[${i}] + begin[${i}]`)\n              .join(',');\n    }\n\n    this.userCode = `\n      ${dtype} begin = ${dtype}(${begin});\n      ${dtype} strides = ${dtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n"]}},"hash":"e8a36f05e83dbb8ad4cb62643e9ebf66","cacheData":{"env":{}}}