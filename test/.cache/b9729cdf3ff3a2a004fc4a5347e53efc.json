{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"../util","loc":{"line":3,"column":19}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"../util\");\nfunction assertParamsValid(input, begin, size) {\n    util.assert(input.rank === begin.length, \"Error in slice\" + input.rank + \"D: Length of begin \" + begin + \" must \" +\n        (\"match the rank of the array (\" + input.rank + \").\"));\n    util.assert(input.rank === size.length, \"Error in slice\" + input.rank + \"D: Length of size \" + size + \" must \" +\n        (\"match the rank of the array (\" + input.rank + \").\"));\n    for (var i = 0; i < input.rank; ++i) {\n        util.assert(begin[i] + size[i] <= input.shape[i], \"Error in slice\" + input.rank + \"D: begin[\" + i + \"] + size[\" + i + \"] \" +\n            (\"(\" + (begin[i] + size[i]) + \") would overflow input.shape[\" + i + \"] (\" + input.shape[i] + \")\"));\n    }\n}\nexports.assertParamsValid = assertParamsValid;\nfunction getStridedSlicedInfo(shape, begin, end, strides, beginMask, endMask) {\n    if (beginMask === void 0) { beginMask = 0; }\n    if (endMask === void 0) { endMask = 0; }\n    var startIndex = [];\n    var endIndex = [];\n    for (var i = 0; i < shape.length; i++) {\n        startIndex[i] = startForAxis(beginMask, begin, strides, shape, i);\n        endIndex[i] = stopForAxis(endMask, end, strides, shape, i);\n    }\n    var size = new Array(shape.length).fill(0);\n    size = size.map(function (d, i) {\n        var count = 0;\n        for (var start = startIndex[i]; !(strides[i] > 0 ? start >= endIndex[i] : start <= endIndex[i]); start += strides[i]) {\n            count += 1;\n        }\n        return count;\n    });\n    return [startIndex, size];\n}\nexports.getStridedSlicedInfo = getStridedSlicedInfo;\nfunction startForAxis(beginMask, startIndices, strides, inputShape, axis) {\n    var start = startIndices[axis];\n    if (beginMask & 1 << axis) {\n        if (strides[axis] > 0) {\n            start = Number.MIN_SAFE_INTEGER;\n        }\n        else {\n            start = Number.MAX_SAFE_INTEGER;\n        }\n    }\n    var axisSize = inputShape[axis];\n    if (start < 0) {\n        start += axisSize;\n    }\n    start = util.clamp(0, start, axisSize - 1);\n    return start;\n}\nexports.startForAxis = startForAxis;\nfunction stopForAxis(endMask, stopIndices, strides, inputShape, axis) {\n    var stop = stopIndices[axis];\n    if (endMask & (1 << axis)) {\n        if (strides[axis] > 0) {\n            stop = Number.MAX_SAFE_INTEGER;\n        }\n        else {\n            stop = Number.MIN_SAFE_INTEGER;\n        }\n    }\n    var axisSize = inputShape[axis];\n    if (stop < 0) {\n        stop += axisSize;\n    }\n    if (strides[axis] > 0) {\n        stop = util.clamp(0, stop, axisSize);\n    }\n    else {\n        stop = util.clamp(-1, stop, axisSize - 1);\n    }\n    return stop;\n}\nexports.stopForAxis = stopForAxis;\n","map":{"version":3,"file":"slice_util.js","sourceRoot":"","sources":["../src/ops/slice_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\nexport function assertParamsValid(\n    input: Tensor, begin: number[], size: number[]): void {\n  util.assert(\n      input.rank === begin.length,\n      `Error in slice${input.rank}D: Length of begin ${begin} must ` +\n          `match the rank of the array (${input.rank}).`);\n  util.assert(\n      input.rank === size.length,\n      `Error in slice${input.rank}D: Length of size ${size} must ` +\n          `match the rank of the array (${input.rank}).`);\n\n  for (let i = 0; i < input.rank; ++i) {\n    util.assert(\n        begin[i] + size[i] <= input.shape[i],\n        `Error in slice${input.rank}D: begin[${i}] + size[${i}] ` +\n            `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${\n                input.shape[i]})`);\n  }\n}\n\n/**\n * Calculate the start index and output tensor shape for strided slice op.\n */\nexport function getStridedSlicedInfo(\n    shape: number[], begin: number[], end: number[], strides: number[],\n    beginMask = 0, endMask = 0): [number[], number[]] {\n  // Note that the axis orders are reversed for runtime ops, so the indices,\n  // strides and masks must be as well too.\n  const startIndex: number[] = [];\n  const endIndex: number[] = [];\n  for (let i = 0; i < shape.length; i++) {\n    startIndex[i] = startForAxis(beginMask, begin, strides, shape, i);\n    endIndex[i] = stopForAxis(endMask, end, strides, shape, i);\n  }\n\n  let size = new Array(shape.length).fill(0);\n  size = size.map((d, i) => {\n    let count = 0;\n    for (let start = startIndex[i];\n         !(strides[i] > 0 ? start >= endIndex[i] : start <= endIndex[i]);\n         start += strides[i]) {\n      count += 1;\n    }\n    return count;\n  });\n  return [startIndex, size];\n}\n\nexport function startForAxis(\n    beginMask: number, startIndices: number[], strides: number[],\n    inputShape: number[], axis: number): number {\n  // Begin with the specified index\n  let start = startIndices[axis];\n\n  // Check the axis bit from right of beginMask\n  if (beginMask & 1 << axis) {\n    if (strides[axis] > 0) {\n      // Forward iteration - use the first element. These values will get\n      // clamped below (Note: We could have set them to 0 and axis_size-1, but\n      // use lowest() and max() to maintain symmetry with StopForAxis())\n      start = Number.MIN_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the last element.\n      start = Number.MAX_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (start < 0) {\n    start += axisSize;\n  }\n\n  // Clamping\n  start = util.clamp(0, start, axisSize - 1);\n\n  return start;\n}\n\nexport function stopForAxis(\n    endMask: number, stopIndices: number[], strides: number[],\n    inputShape: number[], axis: number): number {\n  // Begin with the specified index\n  let stop = stopIndices[axis];\n\n  // Check the axis bit from right of endMask\n  if (endMask & (1 << axis)) {\n    if (strides[axis] > 0) {\n      // Forward iteration - use the last element. These values will get\n      // clamped below\n      stop = Number.MAX_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the first element.\n      stop = Number.MIN_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (stop < 0) {\n    stop += axisSize;\n  }\n\n  // Clamping\n  // Because the end index points one past the last element, we need slightly\n  // different clamping ranges depending on the direction.\n  if (strides[axis] > 0) {\n    // Forward iteration\n    stop = util.clamp(0, stop, axisSize);\n  } else {\n    // Backward iteration\n    stop = util.clamp(-1, stop, axisSize - 1);\n  }\n\n  return stop;\n}\n"]}},"hash":"4e8d5fd7d4e0cb8d1255e157a9898151","cacheData":{"env":{}}}