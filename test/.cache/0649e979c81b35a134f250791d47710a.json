{"dependencies":[{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528755312004},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1524411533119},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528754597009},{"name":"../environment","loc":{"line":38,"column":28}},{"name":"../ops/axis_util","loc":{"line":39,"column":24}},{"name":"../ops/ops","loc":{"line":40,"column":18}},{"name":"../ops/reduce_util","loc":{"line":41,"column":26}},{"name":"../ops/segment_util","loc":{"line":42,"column":27}},{"name":"../ops/slice_util","loc":{"line":43,"column":27}},{"name":"../tensor","loc":{"line":44,"column":23}},{"name":"../types","loc":{"line":45,"column":20}},{"name":"../util","loc":{"line":46,"column":19}},{"name":"./backend_util","loc":{"line":47,"column":27}},{"name":"./webgl/argminmax_gpu","loc":{"line":48,"column":30}},{"name":"./webgl/avg_pool_backprop_gpu","loc":{"line":49,"column":38}},{"name":"./webgl/batchnorm_gpu","loc":{"line":50,"column":30}},{"name":"./webgl/binaryop_gpu","loc":{"line":52,"column":29}},{"name":"./webgl/clip_gpu","loc":{"line":53,"column":25}},{"name":"./webgl/concat_gpu","loc":{"line":54,"column":27}},{"name":"./webgl/conv_backprop_gpu","loc":{"line":55,"column":34}},{"name":"./webgl/conv_backprop_gpu_depthwise","loc":{"line":56,"column":44}},{"name":"./webgl/conv_gpu","loc":{"line":57,"column":25}},{"name":"./webgl/conv_gpu_depthwise","loc":{"line":58,"column":35}},{"name":"./webgl/cumsum_gpu","loc":{"line":59,"column":27}},{"name":"./webgl/encode_float_gpu","loc":{"line":60,"column":33}},{"name":"./webgl/from_pixels_gpu","loc":{"line":61,"column":32}},{"name":"./webgl/gather_gpu","loc":{"line":62,"column":27}},{"name":"./webgl/gpgpu_context","loc":{"line":63,"column":30}},{"name":"./webgl/gpgpu_math","loc":{"line":64,"column":25}},{"name":"./webgl/gpgpu_util","loc":{"line":65,"column":25}},{"name":"./webgl/logical_gpu","loc":{"line":66,"column":28}},{"name":"./webgl/lrn_gpu","loc":{"line":67,"column":24}},{"name":"./webgl/max_pool_backprop_gpu","loc":{"line":68,"column":38}},{"name":"./webgl/mulmat_gpu","loc":{"line":69,"column":27}},{"name":"./webgl/multinomial_gpu","loc":{"line":70,"column":32}},{"name":"./webgl/onehot_gpu","loc":{"line":71,"column":27}},{"name":"./webgl/pad_gpu","loc":{"line":72,"column":24}},{"name":"./webgl/pool_gpu","loc":{"line":73,"column":25}},{"name":"./webgl/reduce_gpu","loc":{"line":74,"column":27}},{"name":"./webgl/resize_bilinear_backprop_gpu","loc":{"line":75,"column":45}},{"name":"./webgl/resize_bilinear_gpu","loc":{"line":76,"column":36}},{"name":"./webgl/resize_nearest_neighbor_gpu","loc":{"line":77,"column":44}},{"name":"./webgl/reverse_gpu","loc":{"line":78,"column":28}},{"name":"./webgl/segment_gpu","loc":{"line":79,"column":28}},{"name":"./webgl/slice_gpu","loc":{"line":80,"column":26}},{"name":"./webgl/strided_slice_gpu","loc":{"line":81,"column":34}},{"name":"./webgl/tex_util","loc":{"line":82,"column":25}},{"name":"./webgl/texture_manager","loc":{"line":83,"column":32}},{"name":"./webgl/tile_gpu","loc":{"line":84,"column":25}},{"name":"./webgl/transpose_gpu","loc":{"line":85,"column":30}},{"name":"./webgl/unaryop_gpu","loc":{"line":87,"column":28}},{"name":"./webgl/webgl_util","loc":{"line":88,"column":25}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../environment\");\nvar axis_util = require(\"../ops/axis_util\");\nvar ops = require(\"../ops/ops\");\nvar reduce_util = require(\"../ops/reduce_util\");\nvar segment_util = require(\"../ops/segment_util\");\nvar slice_util_1 = require(\"../ops/slice_util\");\nvar tensor_1 = require(\"../tensor\");\nvar types = require(\"../types\");\nvar util = require(\"../util\");\nvar backend_util = require(\"./backend_util\");\nvar argminmax_gpu_1 = require(\"./webgl/argminmax_gpu\");\nvar avg_pool_backprop_gpu_1 = require(\"./webgl/avg_pool_backprop_gpu\");\nvar batchnorm_gpu_1 = require(\"./webgl/batchnorm_gpu\");\nvar binaryop_gpu = require(\"./webgl/binaryop_gpu\");\nvar binaryop_gpu_1 = require(\"./webgl/binaryop_gpu\");\nvar clip_gpu_1 = require(\"./webgl/clip_gpu\");\nvar concat_gpu_1 = require(\"./webgl/concat_gpu\");\nvar conv_backprop_gpu_1 = require(\"./webgl/conv_backprop_gpu\");\nvar conv_backprop_gpu_depthwise_1 = require(\"./webgl/conv_backprop_gpu_depthwise\");\nvar conv_gpu_1 = require(\"./webgl/conv_gpu\");\nvar conv_gpu_depthwise_1 = require(\"./webgl/conv_gpu_depthwise\");\nvar cumsum_gpu_1 = require(\"./webgl/cumsum_gpu\");\nvar encode_float_gpu_1 = require(\"./webgl/encode_float_gpu\");\nvar from_pixels_gpu_1 = require(\"./webgl/from_pixels_gpu\");\nvar gather_gpu_1 = require(\"./webgl/gather_gpu\");\nvar gpgpu_context_1 = require(\"./webgl/gpgpu_context\");\nvar gpgpu_math = require(\"./webgl/gpgpu_math\");\nvar gpgpu_util = require(\"./webgl/gpgpu_util\");\nvar logical_gpu_1 = require(\"./webgl/logical_gpu\");\nvar lrn_gpu_1 = require(\"./webgl/lrn_gpu\");\nvar max_pool_backprop_gpu_1 = require(\"./webgl/max_pool_backprop_gpu\");\nvar mulmat_gpu_1 = require(\"./webgl/mulmat_gpu\");\nvar multinomial_gpu_1 = require(\"./webgl/multinomial_gpu\");\nvar onehot_gpu_1 = require(\"./webgl/onehot_gpu\");\nvar pad_gpu_1 = require(\"./webgl/pad_gpu\");\nvar pool_gpu_1 = require(\"./webgl/pool_gpu\");\nvar reduce_gpu_1 = require(\"./webgl/reduce_gpu\");\nvar resize_bilinear_backprop_gpu_1 = require(\"./webgl/resize_bilinear_backprop_gpu\");\nvar resize_bilinear_gpu_1 = require(\"./webgl/resize_bilinear_gpu\");\nvar resize_nearest_neighbor_gpu_1 = require(\"./webgl/resize_nearest_neighbor_gpu\");\nvar reverse_gpu_1 = require(\"./webgl/reverse_gpu\");\nvar segment_gpu_1 = require(\"./webgl/segment_gpu\");\nvar slice_gpu_1 = require(\"./webgl/slice_gpu\");\nvar strided_slice_gpu_1 = require(\"./webgl/strided_slice_gpu\");\nvar tex_util_1 = require(\"./webgl/tex_util\");\nvar texture_manager_1 = require(\"./webgl/texture_manager\");\nvar tile_gpu_1 = require(\"./webgl/tile_gpu\");\nvar transpose_gpu_1 = require(\"./webgl/transpose_gpu\");\nvar unary_op = require(\"./webgl/unaryop_gpu\");\nvar unaryop_gpu_1 = require(\"./webgl/unaryop_gpu\");\nvar webgl_util = require(\"./webgl/webgl_util\");\nvar BEFORE_PAGING_CONSTANT = 300;\nexports.SIZE_UPLOAD_UNIFORM = 32;\nvar MathBackendWebGL = (function () {\n    function MathBackendWebGL(gpgpu, delayedStorage) {\n        if (delayedStorage === void 0) { delayedStorage = true; }\n        this.gpgpu = gpgpu;\n        this.delayedStorage = delayedStorage;\n        this.texData = new WeakMap();\n        this.pendingRead = new WeakMap();\n        this.pendingDisposal = new WeakSet();\n        this.lruDataGPU = [];\n        this.numBytesInGPU = 0;\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        this.binaryCache = {};\n        this.disposed = false;\n        if (environment_1.ENV.get('WEBGL_VERSION') < 1) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (environment_1.ENV.get('IS_BROWSER')) {\n            this.canvas = document.createElement('canvas');\n        }\n        if (gpgpu == null) {\n            this.gpgpu = new gpgpu_context_1.GPGPUContext(gpgpu_util.createWebGLContext(this.canvas));\n            this.gpgpuCreatedLocally = true;\n        }\n        else {\n            this.gpgpuCreatedLocally = false;\n        }\n        this.NUM_BYTES_BEFORE_PAGING =\n            (window.screen.height * window.screen.width * window.devicePixelRatio) *\n                BEFORE_PAGING_CONSTANT;\n        this.textureManager = new texture_manager_1.TextureManager(this.gpgpu);\n    }\n    MathBackendWebGL.prototype.register = function (dataId, shape, dtype) {\n        if (this.texData.has(dataId)) {\n            throw new Error('Data buffer is already registered');\n        }\n        this.texData.set(dataId, {\n            shape: shape,\n            dtype: dtype,\n            values: null,\n            texture: null,\n            texShape: null,\n            texType: tex_util_1.LogicalTextureType.FLOAT_RENDER\n        });\n    };\n    MathBackendWebGL.prototype.fromPixels = function (pixels, numChannels) {\n        if (pixels == null) {\n            throw new Error('MathBackendWebGL.writePixels(): pixels can not be null');\n        }\n        var texShape = [pixels.height, pixels.width];\n        var outShape = [pixels.height, pixels.width, numChannels];\n        if (pixels instanceof HTMLVideoElement) {\n            if (this.fromPixelsCanvas == null) {\n                if (!environment_1.ENV.get('IS_BROWSER')) {\n                    throw new Error('Can\\'t read pixels from HTMLImageElement outside the browser.');\n                }\n                if (document.readyState !== 'complete') {\n                    throw new Error('The DOM is not ready yet. Please call tf.fromPixels() ' +\n                        'once the DOM is ready. One way to do that is to add an event ' +\n                        'listener for `DOMContentLoaded` on the document object');\n                }\n                this.fromPixelsCanvas = document.createElement('canvas');\n            }\n            this.fromPixelsCanvas.width = pixels.width;\n            this.fromPixelsCanvas.height = pixels.height;\n            this.fromPixelsCanvas.getContext('2d').drawImage(pixels, 0, 0, pixels.width, pixels.height);\n            pixels = this.fromPixelsCanvas;\n        }\n        var tempPixelArray = tensor_1.Tensor.make(texShape, {}, 'int32');\n        this.texData.get(tempPixelArray.dataId).texType =\n            tex_util_1.LogicalTextureType.UNSIGNED_BYTE;\n        this.gpgpu.uploadPixelDataToTexture(this.getTexture(tempPixelArray.dataId), pixels);\n        var program = new from_pixels_gpu_1.FromPixelsProgram(outShape);\n        var res = this.compileAndRun(program, [tempPixelArray]);\n        tempPixelArray.dispose();\n        return res;\n    };\n    MathBackendWebGL.prototype.write = function (dataId, values) {\n        if (values == null) {\n            throw new Error('MathBackendWebGL.write(): values can not be null');\n        }\n        this.throwIfNoData(dataId);\n        var texData = this.texData.get(dataId);\n        var texture = texData.texture, texShape = texData.texShape, texType = texData.texType;\n        if (texture != null) {\n            this.releaseTexture(dataId, texture, texShape, texType);\n            texData.texture = null;\n            texData.texShape = null;\n        }\n        texData.texType = tex_util_1.LogicalTextureType.FLOAT_UPLOAD;\n        texData.values = values;\n        if (!this.delayedStorage) {\n            this.uploadToGPU(dataId);\n        }\n    };\n    MathBackendWebGL.prototype.readSync = function (dataId) {\n        this.throwIfNoData(dataId);\n        var texData = this.texData.get(dataId);\n        var shape = texData.shape, texture = texData.texture, values = texData.values, texShape = texData.texShape, dtype = texData.dtype;\n        if (values != null) {\n            this.cacheOnCPU(dataId);\n            return values;\n        }\n        var shouldTimeProgram = this.activeTimers != null;\n        var start;\n        if (shouldTimeProgram) {\n            start = performance.now();\n        }\n        var float32Values;\n        if (environment_1.ENV.get('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            float32Values = this.gpgpu.downloadFloat32MatrixFromOutputTexture(texture, texShape[0], texShape[1]);\n        }\n        else {\n            var tmpTarget = tensor_1.Tensor.make(shape, {});\n            this.texData.get(tmpTarget.dataId).texType =\n                tex_util_1.LogicalTextureType.UNSIGNED_BYTE;\n            var tmpInput = tensor_1.Tensor.make(shape, { dataId: dataId }, dtype);\n            var program = new encode_float_gpu_1.EncodeFloatProgram(shape);\n            var res = this.compileAndRun(program, [tmpInput], tmpTarget);\n            var tmpData = this.texData.get(tmpTarget.dataId);\n            float32Values =\n                this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]);\n            res.dispose();\n            tmpInput.dispose();\n            tmpTarget.dispose();\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += performance.now() - start;\n        }\n        this.cacheOnCPU(dataId, float32Values);\n        return texData.values;\n    };\n    MathBackendWebGL.prototype.read = function (dataId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var subscribers_1, texData, texture, values, texShape, float32Values, subscribers, vals;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.pendingRead.has(dataId)) {\n                            subscribers_1 = this.pendingRead.get(dataId);\n                            return [2, new Promise(function (resolve) { return subscribers_1.push(resolve); })];\n                        }\n                        this.throwIfNoData(dataId);\n                        texData = this.texData.get(dataId);\n                        texture = texData.texture, values = texData.values, texShape = texData.texShape;\n                        if (values != null) {\n                            this.cacheOnCPU(dataId);\n                            return [2, values];\n                        }\n                        if (!environment_1.ENV.get('WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED')) return [3, 2];\n                        return [4, this.gpgpu.downloadMatrixFromTextureAsync(texture, texShape[0], texShape[1])];\n                    case 1:\n                        float32Values = _a.sent();\n                        this.cacheOnCPU(dataId, float32Values);\n                        return [2, texData.values];\n                    case 2:\n                        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 0) {\n                            return [2, this.readSync(dataId)];\n                        }\n                        this.pendingRead.set(dataId, []);\n                        return [4, this.gpgpu.runQuery(function () { })];\n                    case 3:\n                        _a.sent();\n                        subscribers = this.pendingRead.get(dataId);\n                        this.pendingRead.delete(dataId);\n                        vals = this.readSync(dataId);\n                        subscribers.forEach(function (resolve) { return resolve(vals); });\n                        if (this.pendingDisposal.has(dataId)) {\n                            this.pendingDisposal.delete(dataId);\n                            this.disposeData(dataId);\n                        }\n                        return [2, vals];\n                }\n            });\n        });\n    };\n    MathBackendWebGL.prototype.time = function (f) {\n        return __awaiter(this, void 0, void 0, function () {\n            var oldActiveTimers, newActiveTimers, outerMostTime, flattenedActiveTimers, kernelMs, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        oldActiveTimers = this.activeTimers;\n                        newActiveTimers = [];\n                        outerMostTime = false;\n                        if (this.programTimersStack == null) {\n                            this.programTimersStack = newActiveTimers;\n                            outerMostTime = true;\n                        }\n                        else {\n                            this.activeTimers.push(newActiveTimers);\n                        }\n                        this.activeTimers = newActiveTimers;\n                        f();\n                        flattenedActiveTimers = util.flatten(this.activeTimers);\n                        this.activeTimers = oldActiveTimers;\n                        if (outerMostTime) {\n                            this.programTimersStack = null;\n                        }\n                        return [4, Promise.all(flattenedActiveTimers).then(function (results) {\n                                var sum = 0;\n                                results.forEach(function (result) { return sum += result; });\n                                return sum;\n                            })];\n                    case 1:\n                        kernelMs = _a.sent();\n                        res = {\n                            uploadWaitMs: this.uploadWaitMs,\n                            downloadWaitMs: this.downloadWaitMs,\n                            kernelMs: kernelMs,\n                            wallMs: null\n                        };\n                        this.uploadWaitMs = 0;\n                        this.downloadWaitMs = 0;\n                        return [2, res];\n                }\n            });\n        });\n    };\n    MathBackendWebGL.prototype.memory = function () {\n        return { unreliable: false, numBytesInGPU: this.numBytesInGPU };\n    };\n    MathBackendWebGL.prototype.startTimer = function () {\n        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: performance.now(), endMs: null };\n    };\n    MathBackendWebGL.prototype.endTimer = function (query) {\n        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = performance.now();\n        return query;\n    };\n    MathBackendWebGL.prototype.getQueryTime = function (query) {\n        return __awaiter(this, void 0, void 0, function () {\n            var timerQuery;\n            return __generator(this, function (_a) {\n                if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n                    return [2, this.gpgpu.pollQueryTime(query)];\n                }\n                timerQuery = query;\n                return [2, timerQuery.endMs - timerQuery.startMs];\n            });\n        });\n    };\n    MathBackendWebGL.prototype.disposeData = function (dataId) {\n        if (this.pendingDisposal.has(dataId)) {\n            return;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            return;\n        }\n        if (this.texData.has(dataId)) {\n            var _a = this.texData.get(dataId), texture = _a.texture, texShape = _a.texShape, texType = _a.texType;\n            if (texture != null) {\n                this.releaseTexture(dataId, texture, texShape, texType);\n            }\n            this.texData.delete(dataId);\n        }\n    };\n    MathBackendWebGL.prototype.getTexture = function (dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    };\n    MathBackendWebGL.prototype.getGPGPUContext = function () {\n        return this.gpgpu;\n    };\n    MathBackendWebGL.prototype.getCanvas = function () {\n        return this.canvas;\n    };\n    MathBackendWebGL.prototype.slice = function (x, begin, size) {\n        var program = new slice_gpu_1.SliceProgram(size);\n        var customSetup = program.getCustomSetupFunc(begin);\n        return this.compileAndRun(program, [x], null, customSetup);\n    };\n    MathBackendWebGL.prototype.stridedSlice = function (x, begin, end, strides, beginMask, endMask) {\n        var _a = slice_util_1.getStridedSlicedInfo(x.shape, begin, end, strides, beginMask, endMask), beginIndex = _a[0], size = _a[1];\n        if (size.some(function (axis) { return axis === 0; })) {\n            return ops.tensor([], size);\n        }\n        var program = new strided_slice_gpu_1.StridedSliceProgram(beginIndex, strides, size);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.reverse = function (x, axis) {\n        var program = new reverse_gpu_1.ReverseProgram(x.shape, axis);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.concat = function (a, b) {\n        var program = new concat_gpu_1.ConcatProgram(a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.neg = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.NEG);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.matMul = function (a, b, transposeA, transposeB) {\n        var program = new mulmat_gpu_1.MatMulProgram(a.shape, b.shape, transposeA, transposeB);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.multiply = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        var inputs = [x, mean, variance];\n        var offsetShape = null;\n        if (offset != null) {\n            offsetShape = offset.shape;\n            inputs.push(offset);\n        }\n        var scaleShape = null;\n        if (scale != null) {\n            scaleShape = scale.shape;\n            inputs.push(scale);\n        }\n        var program = new batchnorm_gpu_1.BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n        return this.compileAndRun(program, inputs);\n    };\n    MathBackendWebGL.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {\n        var program = new lrn_gpu_1.LRNProgram(x.shape, radius, bias, alpha, beta);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.tile = function (x, reps) {\n        var program = new tile_gpu_1.TileProgram(x.shape, reps);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.pad = function (x, paddings, constantValue) {\n        var program = new pad_gpu_1.PadProgram(x.shape, paddings, constantValue);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.transpose = function (x, perm) {\n        var program = new transpose_gpu_1.TransposeProgram(x.shape, perm);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.gather = function (x, indices, axis) {\n        var program = new gather_gpu_1.GatherProgram(x.shape, indices.size, axis);\n        return this.compileAndRun(program, [x, indices]);\n    };\n    MathBackendWebGL.prototype.reduce = function (x, reduceType, dtype) {\n        var batchSize = x.shape[0];\n        var inSize = x.shape[1];\n        var windowSize = reduce_util.computeOptimalWindowSize(inSize);\n        var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };\n        var program = new reduce_gpu_1.ReduceProgram(reduceInfo, reduceType);\n        var _a = program.outputShape, rows = _a[0], cols = _a[1];\n        var output = this.makeOutputArray([rows, cols], dtype);\n        this.compileAndRun(program, [x], output);\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.reduce(output, reduceType, dtype);\n    };\n    MathBackendWebGL.prototype.argReduce = function (x, reduceType, bestIndicesA) {\n        if (bestIndicesA === void 0) { bestIndicesA = null; }\n        var batchSize = x.shape[0];\n        var inSize = x.shape[1];\n        if (bestIndicesA != null) {\n            batchSize = bestIndicesA.shape[0];\n            inSize = bestIndicesA.shape[1];\n        }\n        var windowSize = reduce_util.computeOptimalWindowSize(inSize);\n        var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };\n        var program = new argminmax_gpu_1.ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n        var _a = program.outputShape, rows = _a[0], cols = _a[1];\n        var output = this.makeOutputArray([rows, cols], 'int32');\n        var inputs = [x];\n        if (bestIndicesA != null) {\n            inputs.push(bestIndicesA);\n        }\n        this.compileAndRun(program, inputs, output);\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.argReduce(x, reduceType, output);\n    };\n    MathBackendWebGL.prototype.sum = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        var outputDType = types.sumOutType(x.dtype);\n        return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n    };\n    MathBackendWebGL.prototype.unsortedSegmentSum = function (x, segmentIds, numSegments) {\n        var axis = axis_util.getInnerMostAxes(1, x.rank)[0];\n        var outShape = segment_util.computeOutShape(x.shape, axis, numSegments);\n        var inSize = util.sizeFromShape([x.shape[axis]]);\n        var a2D = x.as2D(-1, inSize);\n        var outputDType = types.sumOutType(x.dtype);\n        return this\n            .segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments)\n            .reshape(outShape);\n    };\n    MathBackendWebGL.prototype.segOpCompute = function (x, segOpType, segmentIds, dtype, numSegments) {\n        var batchSize = x.shape[0];\n        var inSize = x.shape[1];\n        var windowSize = segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n        var segOpInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize, numSegments: numSegments };\n        var program = new segment_gpu_1.SegmentOpProgram(segOpInfo, segOpType);\n        var _a = program.outputShape, rows = _a[0], cols = _a[1];\n        var output = this.makeOutputArray([rows, cols], dtype);\n        this.compileAndRun(program, [x, segmentIds], output);\n        if (output.shape[1] === numSegments) {\n            return output;\n        }\n        segmentIds = ops.range(0, numSegments).tile([inSize / windowSize]);\n        return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n    };\n    MathBackendWebGL.prototype.argMin = function (x, axis) {\n        var axes = [axis];\n        axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.argReduce(a2D, 'min').reshape(outShape);\n    };\n    MathBackendWebGL.prototype.argMax = function (x, axis) {\n        var axes = [axis];\n        axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.argReduce(a2D, 'max').reshape(outShape);\n    };\n    MathBackendWebGL.prototype.cumsum = function (x, axis, exclusive, reverse) {\n        if (axis !== x.rank - 1) {\n            throw new Error(\"WebGL cumsum shader expects an inner-most axis=\" + (x.rank - 1) + \" \" +\n                (\"but got axis=\" + axis));\n        }\n        var program = new cumsum_gpu_1.CumSumProgram(x.shape, exclusive, reverse);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.equal = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.notEqual = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.less = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.lessEqual = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.greater = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.greaterEqual = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.logicalNot = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.logicalAnd = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.logicalOr = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.where = function (condition, a, b, dtype) {\n        var program = new logical_gpu_1.WhereProgram(condition.rank, a.shape, a.rank);\n        var output = this.makeOutputArray(program.outputShape, dtype);\n        return this.compileAndRun(program, [condition, a, b], output);\n    };\n    MathBackendWebGL.prototype.topKValues = function (x, k) {\n        throw new Error('topKValues GPU not yet implemented!');\n    };\n    MathBackendWebGL.prototype.topKIndices = function (x, k) {\n        throw new Error('topKIndices GPU not yet implemented!');\n    };\n    MathBackendWebGL.prototype.min = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n    };\n    MathBackendWebGL.prototype.minimum = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.mod = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.max = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'max', a2D.dtype).reshape(outShape);\n    };\n    MathBackendWebGL.prototype.maximum = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.squaredDifference = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.SQUARED_DIFFERENCE, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.realDivide = function (a, b) {\n        var op = binaryop_gpu.DIV;\n        var outputDtype = 'float32';\n        var program = new binaryop_gpu_1.BinaryOpProgram(op, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, outputDtype);\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.floorDiv = function (a, b) {\n        var op = binaryop_gpu.INT_DIV;\n        var outputDtype = 'int32';\n        var program = new binaryop_gpu_1.BinaryOpProgram(op, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, outputDtype);\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.add = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.subtract = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.pow = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.ceil = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.CEIL);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.floor = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.FLOOR);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sign = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SIGN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.round = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ROUND);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.exp = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.EXP);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.expm1 = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.EXPM1);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.log = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.LOG);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.log1p = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.LOG1P);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sqrt = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SQRT);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.rsqrt = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.RSQRT);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.square = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SQUARE);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.reciprocal = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.relu = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.RELU);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.elu = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ELU);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.eluDer = function (dy, y) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n        return this.compileAndRun(program, [dy, y]);\n    };\n    MathBackendWebGL.prototype.selu = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SELU);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.int = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.TO_INT);\n        var output = this.makeOutputArray(program.outputShape, 'int32');\n        return this.compileAndRun(program, [x], output);\n    };\n    MathBackendWebGL.prototype.clip = function (x, min, max) {\n        var program = new clip_gpu_1.ClipProgram(x.shape, min, max);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.abs = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ABS);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sigmoid = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SIGMOID);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.softplus = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sin = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SIN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.cos = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.COS);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.tan = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.TAN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.asin = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ASIN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.acos = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ACOS);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.atan = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ATAN);\n        console.log(program.userCode);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.atan2 = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.sinh = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SINH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.cosh = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.COSH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.tanh = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.TANH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.asinh = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ASINH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.acosh = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ACOSH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.atanh = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ATANH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.erf = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ERF);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.step = function (x, alpha) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.conv2d = function (x, filter, convInfo) {\n        var program = new conv_gpu_1.Conv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    };\n    MathBackendWebGL.prototype.conv2dDerInput = function (dy, filter, convInfo) {\n        var program = new conv_backprop_gpu_1.Conv2DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    };\n    MathBackendWebGL.prototype.conv2dDerFilter = function (x, dy, convInfo) {\n        var program = new conv_backprop_gpu_1.Conv2DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    };\n    MathBackendWebGL.prototype.depthwiseConv2D = function (x, filter, convInfo) {\n        var program = new conv_gpu_depthwise_1.DepthwiseConv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    };\n    MathBackendWebGL.prototype.depthwiseConv2DDerInput = function (dy, filter, convInfo) {\n        var program = new conv_backprop_gpu_depthwise_1.DepthwiseConv2DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    };\n    MathBackendWebGL.prototype.depthwiseConv2DDerFilter = function (x, dy, convInfo) {\n        var program = new conv_backprop_gpu_depthwise_1.DepthwiseConv2DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    };\n    MathBackendWebGL.prototype.maxPool = function (x, convInfo) {\n        var program = new pool_gpu_1.Pool2DProgram(convInfo, 'max', false);\n        var output = this.makeOutputArray(program.outputShape, x.dtype);\n        return this.compileAndRun(program, [x], output);\n    };\n    MathBackendWebGL.prototype.avgPool = function (x, convInfo) {\n        var program = new pool_gpu_1.Pool2DProgram(convInfo, 'avg', false);\n        var output = this.makeOutputArray(program.outputShape, 'float32');\n        return this.compileAndRun(program, [x], output);\n    };\n    MathBackendWebGL.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {\n        var getPositions = true;\n        var maxPoolPositionsProgram = new pool_gpu_1.Pool2DProgram(convInfo, 'max', getPositions);\n        var maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);\n        var maxPoolBackPropProgram = new max_pool_backprop_gpu_1.MaxPool2DBackpropProgram(convInfo);\n        var output = this.makeOutputArray(maxPoolBackPropProgram.outputShape, x.dtype);\n        var result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], output);\n        maxPoolPositions.dispose();\n        return result;\n    };\n    MathBackendWebGL.prototype.avgPoolBackprop = function (dy, x, convInfo) {\n        var avgPoolBackpropProgram = new avg_pool_backprop_gpu_1.AvgPool2DBackpropProgram(convInfo);\n        var output = this.makeOutputArray(avgPoolBackpropProgram.outputShape, x.dtype);\n        return this.compileAndRun(avgPoolBackpropProgram, [dy], output);\n    };\n    MathBackendWebGL.prototype.cast = function (x, dtype) {\n        return backend_util.castTensor(x, dtype, this);\n    };\n    MathBackendWebGL.prototype.reshape = function (x, shape) {\n        return backend_util.reshapeTensor(x, shape);\n    };\n    MathBackendWebGL.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {\n        var program = new resize_bilinear_gpu_1.ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.resizeBilinearBackprop = function (dy, x, alignCorners) {\n        var program = new resize_bilinear_backprop_gpu_1.ResizeBilinearBackpropProgram(dy, x, alignCorners);\n        return this.compileAndRun(program, [dy]);\n    };\n    MathBackendWebGL.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {\n        var program = new resize_nearest_neighbor_gpu_1.ResizeNearestNeighborProgram(x.shape, newHeight, newWidth, alignCorners);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.multinomial = function (logits, normalized, numSamples, seed) {\n        var probs = normalized ? logits : ops.softmax(logits);\n        var batchSize = probs.shape[0];\n        var numOutcomes = probs.shape[1];\n        var program = new multinomial_gpu_1.MultinomialProgram(batchSize, numOutcomes, numSamples);\n        var output = this.makeOutputArray(program.outputShape, 'int32');\n        var customSetup = program.getCustomSetupFunc(seed);\n        return this.compileAndRun(program, [probs], output, customSetup);\n    };\n    MathBackendWebGL.prototype.oneHot = function (indices, depth, onValue, offValue) {\n        var program = new onehot_gpu_1.OneHotProgram(indices.size, depth, onValue, offValue);\n        return this.compileAndRun(program, [indices]);\n    };\n    MathBackendWebGL.prototype.makeOutputArray = function (shape, dtype) {\n        return tensor_1.Tensor.make(shape, {}, dtype);\n    };\n    MathBackendWebGL.prototype.compileAndRun = function (program, inputs, output, customSetup) {\n        var _this = this;\n        if (output == null) {\n            output = this.makeOutputArray(program.outputShape, inputs[0].dtype);\n        }\n        var inputsData = inputs.map(function (tensor) {\n            var texData = _this.texData.get(tensor.dataId);\n            if (texData.texture == null && tensor.size <= exports.SIZE_UPLOAD_UNIFORM) {\n                return { tensor: tensor, texData: null, isUniform: true };\n            }\n            _this.uploadToGPU(tensor.dataId);\n            return { tensor: tensor, texData: texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        var outputData = {\n            tensor: output,\n            texData: this.texData.get(output.dataId),\n            isUniform: false\n        };\n        var key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        var binary = this.getAndSaveBinary(key, function () {\n            return gpgpu_math.compileProgram(_this.gpgpu, program, inputsData, outputData);\n        });\n        var shouldTimeProgram = this.activeTimers != null;\n        var query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(binary, inputsData, outputData, customSetup);\n        if (this.numBytesInGPU > this.NUM_BYTES_BEFORE_PAGING) {\n            var numBytesToPage = this.numBytesInGPU - this.NUM_BYTES_BEFORE_PAGING;\n            while (numBytesToPage > 0) {\n                var dataId = this.lruDataGPU.shift();\n                var _a = this.texData.get(dataId), shape = _a.shape, dtype = _a.dtype;\n                numBytesToPage -= this.computeBytes(shape, dtype);\n                this.read(dataId);\n            }\n        }\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push(this.getQueryTime(query));\n        }\n        return output;\n    };\n    MathBackendWebGL.prototype.getAndSaveBinary = function (key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    };\n    MathBackendWebGL.prototype.getTextureManager = function () {\n        return this.textureManager;\n    };\n    MathBackendWebGL.prototype.dispose = function () {\n        if (this.disposed) {\n            return;\n        }\n        for (var key in this.binaryCache) {\n            this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        }\n        this.textureManager.dispose();\n        this.canvas.remove();\n        if (this.fromPixelsCanvas != null) {\n            this.fromPixelsCanvas.remove();\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    };\n    MathBackendWebGL.prototype.throwIfNoData = function (dataId) {\n        if (!this.texData.has(dataId)) {\n            throw new Error(\"WebGL backend: No data found for this tensor. \" +\n                \"Did you change your backend in the middle of the program? \" +\n                \"New backends can't use Tensors created with previous backends\");\n        }\n    };\n    MathBackendWebGL.prototype.uploadToGPU = function (dataId) {\n        this.throwIfNoData(dataId);\n        var texData = this.texData.get(dataId);\n        var shape = texData.shape, values = texData.values, texture = texData.texture, dtype = texData.dtype, texType = texData.texType;\n        if (texture != null) {\n            this.lruDataGPU.splice(this.lruDataGPU.indexOf(dataId), 1);\n            this.lruDataGPU.push(dataId);\n            return;\n        }\n        var shouldTimeProgram = this.activeTimers != null;\n        var start;\n        if (shouldTimeProgram) {\n            start = performance.now();\n        }\n        var texShape = webgl_util.getTextureShapeFromLogicalShape(this.gpgpu.gl, shape);\n        texData.texShape = texShape;\n        var newTexture = this.acquireTexture(dataId, texShape, texType);\n        texData.texture = newTexture;\n        if (values != null) {\n            this.gpgpu.uploadMatrixToTexture(newTexture, texShape[0], texShape[1], typedArrayToFloat32(values, dtype));\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += performance.now() - start;\n            }\n        }\n    };\n    MathBackendWebGL.prototype.cacheOnCPU = function (dataId, float32Values) {\n        var dontKeepCopyOnGPU = this.delayedStorage;\n        var texData = this.texData.get(dataId);\n        var texture = texData.texture, texShape = texData.texShape, dtype = texData.dtype, texType = texData.texType;\n        if (dontKeepCopyOnGPU && texture != null) {\n            this.releaseTexture(dataId, texture, texShape, texType);\n            texData.texture = null;\n            texData.texShape = null;\n        }\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n    };\n    MathBackendWebGL.prototype.releaseTexture = function (dataId, texture, texShape, texType) {\n        var _a = this.texData.get(dataId), shape = _a.shape, dtype = _a.dtype;\n        var idx = this.lruDataGPU.indexOf(dataId);\n        if (idx >= 0) {\n            this.lruDataGPU.splice(idx, 1);\n        }\n        this.numBytesInGPU -= this.computeBytes(shape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, texType);\n    };\n    MathBackendWebGL.prototype.acquireTexture = function (dataId, texShape, texType) {\n        var _a = this.texData.get(dataId), shape = _a.shape, dtype = _a.dtype;\n        this.lruDataGPU.push(dataId);\n        this.numBytesInGPU += this.computeBytes(shape, dtype);\n        return this.textureManager.acquireTexture(texShape, texType);\n    };\n    MathBackendWebGL.prototype.computeBytes = function (shape, dtype) {\n        return util.sizeFromShape(shape) * util.bytesPerElement(dtype);\n    };\n    return MathBackendWebGL;\n}());\nexports.MathBackendWebGL = MathBackendWebGL;\nif (environment_1.ENV.get('IS_BROWSER')) {\n    environment_1.ENV.registerBackend('webgl', function () { return new MathBackendWebGL(); }, 2);\n}\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        var result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (var i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(\"Unknown dtype \" + dtype);\n    }\n}\nfunction typedArrayToFloat32(a, dtype) {\n    return (a instanceof Float32Array) ? a : new Float32Array(a);\n}\n","map":{"version":3,"file":"backend_webgl.js","sourceRoot":"","sources":["../src/kernels/backend_webgl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MemoryInfo, TimingInfo} from '../engine';\nimport {ENV} from '../environment';\nimport * as axis_util from '../ops/axis_util';\nimport {Conv2DInfo} from '../ops/conv_util';\nimport * as ops from '../ops/ops';\nimport * as reduce_util from '../ops/reduce_util';\nimport * as segment_util from '../ops/segment_util';\nimport {getStridedSlicedInfo} from '../ops/slice_util';\n// tslint:disable-next-line:max-line-length\nimport {DataId, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport * as types from '../types';\nimport {DataType, DataTypeMap, RecursiveArray, TypedArray} from '../types';\nimport * as util from '../util';\n\nimport {KernelBackend} from './backend';\nimport * as backend_util from './backend_util';\nimport {ArgMinMaxProgram} from './webgl/argminmax_gpu';\nimport {AvgPool2DBackpropProgram} from './webgl/avg_pool_backprop_gpu';\nimport {BatchNormProgram} from './webgl/batchnorm_gpu';\nimport * as binaryop_gpu from './webgl/binaryop_gpu';\nimport {BinaryOpProgram} from './webgl/binaryop_gpu';\nimport {ClipProgram} from './webgl/clip_gpu';\nimport {ConcatProgram} from './webgl/concat_gpu';\n// tslint:disable-next-line:max-line-length\nimport {Conv2DDerFilterProgram, Conv2DDerInputProgram} from './webgl/conv_backprop_gpu';\n// tslint:disable-next-line:max-line-length\nimport {DepthwiseConv2DDerFilterProgram, DepthwiseConv2DDerInputProgram} from './webgl/conv_backprop_gpu_depthwise';\nimport {Conv2DProgram} from './webgl/conv_gpu';\nimport {DepthwiseConv2DProgram} from './webgl/conv_gpu_depthwise';\nimport {CumSumProgram} from './webgl/cumsum_gpu';\nimport {EncodeFloatProgram} from './webgl/encode_float_gpu';\nimport {FromPixelsProgram} from './webgl/from_pixels_gpu';\nimport {GatherProgram} from './webgl/gather_gpu';\nimport {GPGPUContext} from './webgl/gpgpu_context';\nimport * as gpgpu_math from './webgl/gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './webgl/gpgpu_math';\nimport * as gpgpu_util from './webgl/gpgpu_util';\nimport {WhereProgram} from './webgl/logical_gpu';\nimport {LRNProgram} from './webgl/lrn_gpu';\nimport {MaxPool2DBackpropProgram} from './webgl/max_pool_backprop_gpu';\nimport {MatMulProgram} from './webgl/mulmat_gpu';\nimport {MultinomialProgram} from './webgl/multinomial_gpu';\nimport {OneHotProgram} from './webgl/onehot_gpu';\nimport {PadProgram} from './webgl/pad_gpu';\nimport {Pool2DProgram} from './webgl/pool_gpu';\nimport {ReduceProgram} from './webgl/reduce_gpu';\n// tslint:disable-next-line:max-line-length\nimport {ResizeBilinearBackpropProgram} from './webgl/resize_bilinear_backprop_gpu';\nimport {ResizeBilinearProgram} from './webgl/resize_bilinear_gpu';\n// tslint:disable-next-line:max-line-length\nimport {ResizeNearestNeighborProgram} from './webgl/resize_nearest_neighbor_gpu';\nimport {ReverseProgram} from './webgl/reverse_gpu';\nimport {SegmentOpProgram} from './webgl/segment_gpu';\nimport {SliceProgram} from './webgl/slice_gpu';\nimport {StridedSliceProgram} from './webgl/strided_slice_gpu';\nimport {LogicalTextureType, TextureData} from './webgl/tex_util';\nimport {TextureManager} from './webgl/texture_manager';\nimport {TileProgram} from './webgl/tile_gpu';\nimport {TransposeProgram} from './webgl/transpose_gpu';\nimport * as unary_op from './webgl/unaryop_gpu';\nimport {UnaryOpProgram} from './webgl/unaryop_gpu';\nimport {WebGLQuery} from './webgl/webgl_types';\nimport * as webgl_util from './webgl/webgl_util';\n\ntype TimerNode = RecursiveArray<Promise<number>>|Promise<number>;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\n// Empirically determined constant used to decide the number of bytes on GPU\n// before we start paging. The bytes are this constant * screen area * dpi.\nconst BEFORE_PAGING_CONSTANT = 300;\n// Tensors with size <= than this will be uploaded as uniforms, not textures.\nexport const SIZE_UPLOAD_UNIFORM = 32;\n\nexport class MathBackendWebGL implements KernelBackend {\n  private texData = new WeakMap<DataId, TextureData>();\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n  // List of data ids that are currently residing on gpu memory. Sorted with\n  // least recently used being first.\n  private lruDataGPU: DataId[] = [];\n  private numBytesInGPU = 0;\n  /**\n   * Number of bytes allocated on the GPU before we start moving data to cpu.\n   * Moving avoids gpu memory leaks and relies on JS's garbage collector.\n   */\n  private NUM_BYTES_BEFORE_PAGING: number;\n\n  private canvas: HTMLCanvasElement;\n  private fromPixelsCanvas: HTMLCanvasElement;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  register(dataId: DataId, shape: number[], dtype: DataType): void {\n    if (this.texData.has(dataId)) {\n      throw new Error('Data buffer is already registered');\n    }\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values: null,\n      texture: null,\n      texShape: null,\n      texType: LogicalTextureType.FLOAT_RENDER\n    });\n  }\n  fromPixels(\n      pixels: ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement,\n      numChannels: number): Tensor3D {\n    if (pixels == null) {\n      throw new Error('MathBackendWebGL.writePixels(): pixels can not be null');\n    }\n    const texShape: [number, number] = [pixels.height, pixels.width];\n    const outShape = [pixels.height, pixels.width, numChannels];\n\n    if (pixels instanceof HTMLVideoElement) {\n      if (this.fromPixelsCanvas == null) {\n        if (!ENV.get('IS_BROWSER')) {\n          throw new Error(\n              'Can\\'t read pixels from HTMLImageElement outside the browser.');\n        }\n        if (document.readyState !== 'complete') {\n          throw new Error(\n              'The DOM is not ready yet. Please call tf.fromPixels() ' +\n              'once the DOM is ready. One way to do that is to add an event ' +\n              'listener for `DOMContentLoaded` on the document object');\n        }\n        this.fromPixelsCanvas = document.createElement('canvas');\n      }\n      this.fromPixelsCanvas.width = pixels.width;\n      this.fromPixelsCanvas.height = pixels.height;\n      this.fromPixelsCanvas.getContext('2d').drawImage(\n          pixels, 0, 0, pixels.width, pixels.height);\n      pixels = this.fromPixelsCanvas;\n    }\n    const tempPixelArray = Tensor.make(texShape, {}, 'int32');\n\n    // This is a byte texture with pixels.\n    this.texData.get(tempPixelArray.dataId).texType =\n        LogicalTextureType.UNSIGNED_BYTE;\n    this.gpgpu.uploadPixelDataToTexture(\n        this.getTexture(tempPixelArray.dataId), pixels);\n    const program = new FromPixelsProgram(outShape);\n    const res = this.compileAndRun(program, [tempPixelArray]);\n\n    tempPixelArray.dispose();\n\n    return res as Tensor3D;\n  }\n  write(dataId: DataId, values: TypedArray): void {\n    if (values == null) {\n      throw new Error('MathBackendWebGL.write(): values can not be null');\n    }\n    this.throwIfNoData(dataId);\n\n    const texData = this.texData.get(dataId);\n    const {texture, texShape, texType} = texData;\n    if (texture != null) {\n      // Release the old texture.\n      this.releaseTexture(dataId, texture, texShape, texType);\n      texData.texture = null;\n      texData.texShape = null;\n    }\n    texData.texType = LogicalTextureType.FLOAT_UPLOAD;\n    texData.values = values;\n\n    if (!this.delayedStorage) {\n      this.uploadToGPU(dataId);\n    }\n  }\n  readSync(dataId: DataId): TypedArray {\n    this.throwIfNoData(dataId);\n    const texData = this.texData.get(dataId);\n    const {shape, texture, values, texShape, dtype} = texData;\n    if (values != null) {\n      this.cacheOnCPU(dataId);\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = performance.now();\n    }\n\n    let float32Values;\n    if (ENV.get('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      float32Values = this.gpgpu.downloadFloat32MatrixFromOutputTexture(\n          texture, texShape[0], texShape[1]);\n    } else {\n      const tmpTarget = Tensor.make(shape, {});\n      this.texData.get(tmpTarget.dataId).texType =\n          LogicalTextureType.UNSIGNED_BYTE;\n\n      const tmpInput = Tensor.make(shape, {dataId}, dtype);\n      const program = new EncodeFloatProgram(shape);\n      const res = this.compileAndRun(program, [tmpInput], tmpTarget);\n\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      float32Values =\n          this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(\n              tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]);\n\n      res.dispose();\n      tmpInput.dispose();\n      tmpTarget.dispose();\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += performance.now() - start;\n    }\n    this.cacheOnCPU(dataId, float32Values);\n    return texData.values;\n  }\n  async read(dataId: DataId): Promise<TypedArray> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    this.throwIfNoData(dataId);\n    const texData = this.texData.get(dataId);\n    const {texture, values, texShape} = texData;\n    if (values != null) {\n      this.cacheOnCPU(dataId);\n      return values;\n    }\n    if (ENV.get('WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED')) {\n      const float32Values = await this.gpgpu.downloadMatrixFromTextureAsync(\n          texture, texShape[0], texShape[1]);\n      this.cacheOnCPU(dataId, float32Values);\n      return texData.values;\n    }\n\n    if (ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 0) {\n      return this.readSync(dataId);\n    }\n\n    this.pendingRead.set(dataId, []);\n    // Construct an empty query. We're just interested in getting a callback\n    // when the GPU command queue has executed until this point in time.\n    await this.gpgpu.runQuery(() => {});\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n    const vals = this.readSync(dataId);\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(vals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      this.disposeData(dataId);\n    }\n    return vals;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    const flattenedActiveTimers = util.flatten(this.activeTimers);\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const kernelMs = await Promise.all(flattenedActiveTimers).then(results => {\n      let sum = 0;\n      results.forEach(result => sum += result);\n      return sum;\n    });\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs,\n      wallMs: null  // will be filled by the engine\n    };\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {unreliable: false, numBytesInGPU: this.numBytesInGPU} as\n        WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: performance.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|\n      {startMs: number, endMs: number} {\n    if (ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = performance.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      return this.gpgpu.pollQueryTime(query);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  disposeData(dataId: DataId): void {\n    if (this.pendingDisposal.has(dataId)) {\n      return;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      return;\n    }\n    if (this.texData.has(dataId)) {\n      const {texture, texShape, texType} = this.texData.get(dataId);\n      if (texture != null) {\n        this.releaseTexture(dataId, texture, texShape, texType);\n      }\n      this.texData.delete(dataId);\n    }\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary} = {};\n  private gpgpuCreatedLocally: boolean;\n\n  constructor(private gpgpu?: GPGPUContext, private delayedStorage = true) {\n    if (ENV.get('WEBGL_VERSION') < 1) {\n      throw new Error('WebGL is not supported on this device');\n    }\n    if (ENV.get('IS_BROWSER')) {\n      this.canvas = document.createElement('canvas');\n    }\n    if (gpgpu == null) {\n      this.gpgpu = new GPGPUContext(gpgpu_util.createWebGLContext(this.canvas));\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpuCreatedLocally = false;\n    }\n    // Use the device screen's resolution as a heuristic to decide on the\n    // maximum memory allocated on the GPU before starting to page.\n    this.NUM_BYTES_BEFORE_PAGING =\n        (window.screen.height * window.screen.width * window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT;\n    this.textureManager = new TextureManager(this.gpgpu);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n  getCanvas(): HTMLCanvasElement {\n    return this.canvas;\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    const program = new SliceProgram(size);\n    const customSetup = program.getCustomSetupFunc(begin);\n    return this.compileAndRun(program, [x], null, customSetup);\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[],\n      beginMask: number, endMask: number): T {\n    const [beginIndex, size] =\n        getStridedSlicedInfo(x.shape, begin, end, strides, beginMask, endMask);\n\n    if (size.some(axis => axis === 0)) {\n      return ops.tensor([], size) as T;\n    }\n\n    const program = new StridedSliceProgram(beginIndex, strides, size);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    const program = new ReverseProgram(x.shape, axis);\n    return this.compileAndRun(program, [x]);\n  }\n\n  // Concats 2d tensors along axis=1. See comments in MathBackend.concat().\n  concat(a: Tensor2D, b: Tensor2D): Tensor2D {\n    const program = new ConcatProgram(a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.NEG);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  matMul(a: Tensor2D, b: Tensor2D, transposeA: boolean, transposeB: boolean):\n      Tensor2D {\n    const program = new MatMulProgram(a.shape, b.shape, transposeA, transposeB);\n    return this.compileAndRun<Tensor2D, Tensor2D>(program, [a, b]);\n  }\n\n  multiply(a: Tensor, b: Tensor): Tensor {\n    const program = new BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n    const output =\n        this.makeOutputArray(\n            program.outputShape, types.upcastType(a.dtype, b.dtype)) as Tensor;\n    return this.compileAndRun(program, [a, b], output) as Tensor;\n  }\n\n  batchNormalization(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      varianceEpsilon: number, scale?: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D): Tensor4D {\n    const inputs = [x, mean, variance];\n\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      inputs.push(offset);\n    }\n\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      inputs.push(scale);\n    }\n\n    const program = new BatchNormProgram(\n        x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n        varianceEpsilon);\n    return this.compileAndRun(program, inputs);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, radius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    const program = new LRNProgram(x.shape, radius, bias, alpha, beta);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    const program = new TileProgram(x.shape, reps);\n    return this.compileAndRun(program, [x]);\n  }\n\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T {\n    const program = new PadProgram(x.shape, paddings, constantValue);\n    return this.compileAndRun(program, [x]);\n  }\n\n  transpose<T extends Tensor>(x: T, perm: number[]): T {\n    const program = new TransposeProgram(x.shape, perm);\n    return this.compileAndRun(program, [x]);\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    const program = new GatherProgram(x.shape, indices.size, axis);\n    return this.compileAndRun(program, [x, indices]);\n  }\n\n  private reduce(x: Tensor2D, reduceType: 'max'|'min'|'sum', dtype: DataType):\n      Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize = reduce_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {windowSize, inSize, batchSize};\n    const program = new ReduceProgram(reduceInfo, reduceType);\n    const [rows, cols] = program.outputShape;\n    const output = this.makeOutputArray<Tensor2D>([rows, cols], dtype);\n    this.compileAndRun(program, [x], output);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.reduce(output, reduceType, dtype);\n  }\n\n  private argReduce(\n      x: Tensor2D, reduceType: 'max'|'min',\n      bestIndicesA: Tensor2D = null): Tensor2D {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n      batchSize = bestIndicesA.shape[0];\n      inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = reduce_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {windowSize, inSize, batchSize};\n    const program =\n        new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const [rows, cols] = program.outputShape;\n    const output = this.makeOutputArray<Tensor2D>([rows, cols], 'int32');\n    const inputs = [x];\n    if (bestIndicesA != null) {\n      inputs.push(bestIndicesA);\n    }\n    this.compileAndRun(program, inputs, output);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.argReduce(x, reduceType, output);\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = types.sumOutType(x.dtype);\n    return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    const axis = axis_util.getInnerMostAxes(1, x.rank)[0];\n    const outShape = segment_util.computeOutShape(x.shape, axis, numSegments);\n    const inSize = util.sizeFromShape([x.shape[axis]]);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = types.sumOutType(x.dtype);\n    return this\n        .segOpCompute(\n            a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments)\n        .reshape(outShape);\n  }\n\n  private segOpCompute(\n      x: Tensor2D, segOpType: 'unsortedSegmentSum', segmentIds: Tensor1D,\n      dtype: DataType, numSegments: number): Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize =\n        segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n    const program = new SegmentOpProgram(segOpInfo, segOpType);\n    const [rows, cols] = program.outputShape;\n    const output = this.makeOutputArray<Tensor2D>([rows, cols], dtype);\n    this.compileAndRun(program, [x, segmentIds], output);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n    segmentIds = ops.range(0, numSegments).tile([inSize / windowSize]);\n    return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    const axes = [axis];\n    axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.argReduce(a2D, 'min').reshape(outShape);\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    const axes = [axis];\n    axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.argReduce(a2D, 'max').reshape(outShape);\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const program = new CumSumProgram(x.shape, exclusive, reverse);\n    return this.compileAndRun(program, [x]);\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    const program = new BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    const program =\n        new BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    const program = new BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    const program = new BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    const program =\n        new BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  logicalNot<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  where(condition: Tensor, a: Tensor, b: Tensor, dtype: DataType): Tensor {\n    const program = new WhereProgram(condition.rank, a.shape, a.rank);\n    const output = this.makeOutputArray(program.outputShape, dtype);\n    return this.compileAndRun(program, [condition, a, b], output);\n  }\n\n  topKValues<T extends Tensor>(x: T, k: number): Tensor1D {\n    throw new Error('topKValues GPU not yet implemented!');\n  }\n\n  topKIndices(x: Tensor, k: number): Tensor1D {\n    throw new Error('topKIndices GPU not yet implemented!');\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    const program = new BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    const program = new BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  max(x: Tensor, axes: number[]): Tensor {\n    axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'max', a2D.dtype).reshape(outShape);\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    const program = new BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  squaredDifference(a: Tensor, b: Tensor): Tensor {\n    const program =\n        new BinaryOpProgram(binaryop_gpu.SQUARED_DIFFERENCE, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  realDivide(a: Tensor, b: Tensor): Tensor {\n    const op = binaryop_gpu.DIV;\n    const outputDtype = 'float32';\n    const program = new BinaryOpProgram(op, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, outputDtype);\n    return this.compileAndRun<Tensor, Tensor>(program, [a, b], output);\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    const op = binaryop_gpu.INT_DIV;\n    const outputDtype = 'int32';\n    const program = new BinaryOpProgram(op, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, outputDtype);\n    return this.compileAndRun<Tensor, Tensor>(program, [a, b], output);\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    const program = new BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n    const output =\n        this.makeOutputArray(\n            program.outputShape, types.upcastType(a.dtype, b.dtype)) as Tensor;\n    return this.compileAndRun<Tensor, Tensor>(program, [a, b], output);\n  }\n\n  subtract(a: Tensor, b: Tensor): Tensor {\n    const program = new BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n    const output =\n        this.makeOutputArray(\n            program.outputShape, types.upcastType(a.dtype, b.dtype)) as Tensor;\n    return this.compileAndRun<Tensor, Tensor>(program, [a, b], output);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    const program = new BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n    const output =\n        this.makeOutputArray(\n            program.outputShape, types.upcastType(a.dtype, b.dtype)) as T;\n    return this.compileAndRun<Tensor, T>(program, [a, b], output);\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.CEIL);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  floor<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.FLOOR);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGN);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  round<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ROUND);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  exp<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.EXP);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  expm1<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.EXPM1);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  log<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  log1p<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG1P);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  sqrt<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SQRT);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  rsqrt<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.RSQRT);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  square<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SQUARE);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  reciprocal<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  relu<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.RELU);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  elu<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ELU);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    const program =\n        new BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n    return this.compileAndRun(program, [dy, y]) as T;\n  }\n\n  selu<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SELU);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  int<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TO_INT);\n    const output = this.makeOutputArray(program.outputShape, 'int32');\n    return this.compileAndRun(program, [x], output) as T;\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    const program = new ClipProgram(x.shape, min, max);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGMOID);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIN);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  cos<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.COS);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  tan<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TAN);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASIN);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  acos<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOS);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  atan<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATAN);\n    console.log(program.userCode);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  atan2<T extends Tensor>(a: T, b: T): T {\n    const program = new BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]) as T;\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SINH);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  cosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.COSH);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  tanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TANH);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASINH);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  acosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOSH);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  atanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATANH);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ERF);\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  step<T extends Tensor>(x: T, alpha: number): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n    return this.compileAndRun(program, [x]) as T;\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const program = new Conv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv2dDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const program = new Conv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  depthwiseConv2D(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const program = new DepthwiseConv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  depthwiseConv2DDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const program = new DepthwiseConv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  depthwiseConv2DDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  maxPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const program = new Pool2DProgram(convInfo, 'max', false);\n    const output =\n        this.makeOutputArray(program.outputShape, x.dtype) as Tensor4D;\n    return this.compileAndRun(program, [x], output);\n  }\n\n  avgPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const program = new Pool2DProgram(convInfo, 'avg', false);\n    const output = this.makeOutputArray(program.outputShape, 'float32');\n    return this.compileAndRun(program, [x], output) as Tensor4D;\n  }\n\n  maxPoolBackprop(dy: Tensor4D, x: Tensor4D, y: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const getPositions = true;\n    const maxPoolPositionsProgram =\n        new Pool2DProgram(convInfo, 'max', getPositions);\n    const maxPoolPositions: Tensor4D =\n        this.compileAndRun(maxPoolPositionsProgram, [x]);\n\n    const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n    const output =\n        this.makeOutputArray(maxPoolBackPropProgram.outputShape, x.dtype);\n    const result = this.compileAndRun(\n        maxPoolBackPropProgram, [dy, maxPoolPositions], output);\n    maxPoolPositions.dispose();\n    return result as Tensor4D;\n  }\n\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n    const output =\n        this.makeOutputArray(avgPoolBackpropProgram.outputShape, x.dtype);\n    return this.compileAndRun(avgPoolBackpropProgram, [dy], output) as Tensor4D;\n  }\n\n  cast<T extends Tensor<types.Rank>>(x: T, dtype: DataType): T {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  reshape<T extends Tensor<types.Rank>, R extends types.Rank>(\n      x: T, shape: types.ShapeMap[R]): Tensor<R> {\n    return backend_util.reshapeTensor(x, shape);\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program =\n        new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x]);\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean):\n      Tensor4D {\n    const program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);\n\n    return this.compileAndRun(program, [dy]);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program = new ResizeNearestNeighborProgram(\n        x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x]);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    const probs = normalized ? logits : ops.softmax(logits);\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const output =\n        this.makeOutputArray(program.outputShape, 'int32') as Tensor2D;\n    const customSetup = program.getCustomSetupFunc(seed);\n    return this.compileAndRun(program, [probs], output, customSetup);\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    const program = new OneHotProgram(indices.size, depth, onValue, offValue);\n    return this.compileAndRun(program, [indices]);\n  }\n\n  private makeOutputArray<T extends Tensor>(shape: number[], dtype: DataType):\n      T {\n    return Tensor.make(shape, {}, dtype) as T;\n  }\n\n  private compileAndRun<T extends Tensor, K extends Tensor>(\n      program: GPGPUProgram, inputs: T[], output?: K,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void):\n      K {\n    if (output == null) {\n      output = this.makeOutputArray(program.outputShape, inputs[0].dtype);\n    }\n    const inputsData: Array<TensorData<T>> = inputs.map(tensor => {\n      const texData = this.texData.get(tensor.dataId);\n      // Upload small tensors that live on the CPU as uniforms, not as textures.\n      if (texData.texture == null && tensor.size <= SIZE_UPLOAD_UNIFORM) {\n        return {tensor, texData: null, isUniform: true};\n      }\n      this.uploadToGPU(tensor.dataId);\n      return {tensor, texData, isUniform: false};\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      tensor: output,\n      texData: this.texData.get(output.dataId),\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(binary, inputsData, outputData, customSetup);\n\n    if (this.numBytesInGPU > this.NUM_BYTES_BEFORE_PAGING) {\n      let numBytesToPage = this.numBytesInGPU - this.NUM_BYTES_BEFORE_PAGING;\n      while (numBytesToPage > 0) {\n        const dataId = this.lruDataGPU.shift();\n        const {shape, dtype} = this.texData.get(dataId);\n        numBytesToPage -= this.computeBytes(shape, dtype);\n        this.read(dataId);\n      }\n    }\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(this.getQueryTime(query));\n    }\n    return output;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    for (const key in this.binaryCache) {\n      this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n    }\n    this.textureManager.dispose();\n    this.canvas.remove();\n    if (this.fromPixelsCanvas != null) {\n      this.fromPixelsCanvas.remove();\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  private throwIfNoData(dataId: DataId) {\n    if (!this.texData.has(dataId)) {\n      throw new Error(\n          `WebGL backend: No data found for this tensor. ` +\n          `Did you change your backend in the middle of the program? ` +\n          `New backends can't use Tensors created with previous backends`);\n    }\n  }\n\n  private uploadToGPU(dataId: DataId): void {\n    this.throwIfNoData(dataId);\n    const texData = this.texData.get(dataId);\n    const {shape, values, texture, dtype, texType} = texData;\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      // Touching the texture.\n      this.lruDataGPU.splice(this.lruDataGPU.indexOf(dataId), 1);\n      this.lruDataGPU.push(dataId);\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = performance.now();\n    }\n    const texShape =\n        webgl_util.getTextureShapeFromLogicalShape(this.gpgpu.gl, shape);\n    texData.texShape = texShape;\n    const newTexture = this.acquireTexture(dataId, texShape, texType);\n    texData.texture = newTexture;\n    if (values != null) {\n      this.gpgpu.uploadMatrixToTexture(\n          newTexture, texShape[0],\n          // TODO(smilkov): Propagate the original typed array to gpgpu.\n          texShape[1], typedArrayToFloat32(values, dtype));\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += performance.now() - start;\n      }\n    }\n  }\n\n  private cacheOnCPU(dataId: DataId, float32Values?: Float32Array) {\n    // In delayed storage mode, when the user reads data, we don't keep a copy\n    // on the gpu, to minimize likelihood of memory leak. We re-upload to gpu\n    // the next time a gpgpu program needs the texture.\n    const dontKeepCopyOnGPU = this.delayedStorage;\n    const texData = this.texData.get(dataId);\n    const {texture, texShape, dtype, texType} = texData;\n    if (dontKeepCopyOnGPU && texture != null) {\n      this.releaseTexture(dataId, texture, texShape, texType);\n      texData.texture = null;\n      texData.texShape = null;\n    }\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n  }\n\n  private releaseTexture(\n      dataId: DataId, texture: WebGLTexture, texShape: [number, number],\n      texType: LogicalTextureType) {\n    const {shape, dtype} = this.texData.get(dataId);\n    const idx = this.lruDataGPU.indexOf(dataId);\n    if (idx >= 0) {\n      this.lruDataGPU.splice(idx, 1);\n    }\n    this.numBytesInGPU -= this.computeBytes(shape, dtype);\n    this.textureManager.releaseTexture(texture, texShape, texType);\n  }\n\n  private acquireTexture(\n      dataId: DataId, texShape: [number, number],\n      texType: LogicalTextureType): WebGLTexture {\n    const {shape, dtype} = this.texData.get(dataId);\n    this.lruDataGPU.push(dataId);\n    this.numBytesInGPU += this.computeBytes(shape, dtype);\n    return this.textureManager.acquireTexture(texShape, texType);\n  }\n\n  private computeBytes(shape: number[], dtype: DataType) {\n    return util.sizeFromShape(shape) * util.bytesPerElement(dtype);\n  }\n}\n\nif (ENV.get('IS_BROWSER')) {\n  ENV.registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\nfunction float32ToTypedArray<D extends DataType>(\n    a: Float32Array, dtype: D): DataTypeMap[D] {\n  if (dtype === 'float32') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nfunction typedArrayToFloat32<D extends DataType>(\n    a: DataTypeMap[D], dtype: D): Float32Array {\n  return (a instanceof Float32Array) ? a : new Float32Array(a);\n}\n"]}},"hash":"c319bc52778388144272d50877d3de09","cacheData":{"env":{}}}