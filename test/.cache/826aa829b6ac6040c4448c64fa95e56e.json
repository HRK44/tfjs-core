{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524062920943},{"name":"./doc","loc":{"line":9,"column":20}},{"name":"./environment","loc":{"line":10,"column":28}},{"name":"./util","loc":{"line":11,"column":21}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"./doc\");\nvar environment_1 = require(\"./environment\");\nvar util_1 = require(\"./util\");\nvar Tracking = (function () {\n    function Tracking() {\n    }\n    Tracking.tidy = function (nameOrFn, fn, gradMode) {\n        if (gradMode === void 0) { gradMode = false; }\n        var name = null;\n        if (fn == null) {\n            if (typeof nameOrFn !== 'function') {\n                throw new Error('Please provide a function to tidy()');\n            }\n            fn = nameOrFn;\n        }\n        else {\n            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n                throw new Error('When calling with two arguments, the first argument ' +\n                    'to tidy() must be a string');\n            }\n            if (typeof fn !== 'function') {\n                throw new Error('When calling with two arguments, the 2nd argument ' +\n                    'to tidy() must be a function');\n            }\n            name = nameOrFn;\n        }\n        environment_1.ENV.engine.startScope(name, gradMode);\n        var result = fn();\n        if (result instanceof Promise) {\n            console.error('Cannot return a Promise inside of tidy.');\n        }\n        environment_1.ENV.engine.endScope(result, gradMode);\n        return result;\n    };\n    Tracking.dispose = function (container) {\n        var tensors = util_1.extractTensorsFromAny(container);\n        tensors.forEach(function (tensor) { return tensor.dispose(); });\n    };\n    Tracking.keep = function (result) {\n        return environment_1.ENV.engine.keep(result);\n    };\n    Tracking.time = function (f) {\n        return environment_1.ENV.engine.time(f);\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Performance', subheading: 'Memory' })\n    ], Tracking, \"tidy\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Performance', subheading: 'Memory' })\n    ], Tracking, \"keep\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Performance', subheading: 'Timing' })\n    ], Tracking, \"time\", null);\n    return Tracking;\n}());\nexports.Tracking = Tracking;\n","map":{"version":3,"file":"tracking.js","sourceRoot":"","sources":["../src/tracking.ts"],"names":[],"mappings":";;;;;;;;AAiBA,6BAA0B;AAE1B,6CAAkC;AAGlC,+BAA6C;AAE7C;IAAA;IAuJA,CAAC;IA7GQ,aAAI,GAAX,UACI,QAA2B,EAAE,EAAe,EAAE,QAAgB;QAAhB,yBAAA,EAAA,gBAAgB;QAChE,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;YAEf,EAAE,CAAC,CAAC,OAAO,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC;gBACnC,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;YACzD,CAAC;YACD,EAAE,GAAG,QAAQ,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YAEN,EAAE,CAAC,CAAC,OAAO,QAAQ,KAAK,QAAQ,IAAI,CAAC,CAAC,QAAQ,YAAY,MAAM,CAAC,CAAC,CAAC,CAAC;gBAClE,MAAM,IAAI,KAAK,CACX,sDAAsD;oBACtD,4BAA4B,CAAC,CAAC;YACpC,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC;gBAC7B,MAAM,IAAI,KAAK,CACX,oDAAoD;oBACpD,8BAA8B,CAAC,CAAC;YACtC,CAAC;YACD,IAAI,GAAG,QAAkB,CAAC;QAG5B,CAAC;QACD,iBAAG,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACtC,IAAM,MAAM,GAAG,EAAE,EAAE,CAAC;QACpB,EAAE,CAAC,CAAC,MAAM,YAAY,OAAO,CAAC,CAAC,CAAC;YAC9B,OAAO,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;QAC3D,CAAC;QACD,iBAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAYM,gBAAO,GAAd,UAAe,SAAc;QAC3B,IAAM,OAAO,GAAG,4BAAqB,CAAC,SAAS,CAAC,CAAC;QACjD,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,OAAO,EAAE,EAAhB,CAAgB,CAAC,CAAC;IAC9C,CAAC;IAiCM,aAAI,GAAX,UAA8B,MAAS;QACrC,MAAM,CAAC,iBAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAwBM,aAAI,GAAX,UAAY,CAAa;QACvB,MAAM,CAAC,iBAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IA5GD;QADC,SAAG,CAAC,EAAC,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAC,CAAC;8BAiCnD;IAgDD;QADC,SAAG,CAAC,EAAC,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAC,CAAC;8BAGnD;IAwBD;QADC,SAAG,CAAC,EAAC,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAC,CAAC;8BAGnD;IACH,eAAC;CAAA,AAvJD,IAuJC;AAvJY,4BAAQ","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {doc} from './doc';\nimport {ScopeFn, TimingInfo} from './engine';\nimport {ENV} from './environment';\nimport {Tensor} from './tensor';\nimport {TensorContainer} from './types';\nimport {extractTensorsFromAny} from './util';\n\nexport class Tracking {\n  /**\n   * Executes the provided function `f` and after it is executed, cleans up all\n   * intermediate tensors allocated by `f` except those returned by `f`.\n   * `f` must not return a Promise (async functions not allowed).\n   * The returned result can be a complex object, however tidy only walks the\n   * top-level properties (depth 1) of that object to search for tensors, or\n   * lists of tensors that need to be tracked in the parent scope.\n   *\n   * Using this method helps avoid memory leaks. In general, wrap calls to\n   * operations in `tidy` for automatic memory cleanup.\n   *\n   * When in safe mode, you must enclose all `Tensor` creation and ops\n   * inside a `tidy` to prevent memory leaks.\n   *\n   * ```js\n   * // y = 2 ^ 2 + 1\n   * const y = tf.tidy(() => {\n   *   // a, b, and one will be cleaned up when the tidy ends.\n   *   const one = tf.scalar(1);\n   *   const a = tf.scalar(2);\n   *   const b = a.square();\n   *\n   *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n   *\n   *   // The value returned inside the tidy function will return\n   *   // through the tidy, in this case to the variable y.\n   *   return b.add(one);\n   * });\n   *\n   * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n   * y.print();\n   * ```\n   *\n   * @param nameOrFn The name of the closure, or the function to execute.\n   *     If a name is provided, the 2nd argument should be the function.\n   *     If debug mode is on, the timing and the memory usage of the function\n   *     will be tracked and displayed on the console using the provided name.\n   * @param fn The function to execute.\n   * @param gradMode If true, starts a tape and doesn't dispose tensors.\n   */\n  @doc({heading: 'Performance', subheading: 'Memory'})\n  static tidy<T extends TensorContainer>(\n      nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>, gradMode = false): T {\n    let name = null;\n    if (fn == null) {\n      // Called with only 1 argument.\n      if (typeof nameOrFn !== 'function') {\n        throw new Error('Please provide a function to tidy()');\n      }\n      fn = nameOrFn;\n    } else {\n      // Called with 2 arguments.\n      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n        throw new Error(\n            'When calling with two arguments, the first argument ' +\n            'to tidy() must be a string');\n      }\n      if (typeof fn !== 'function') {\n        throw new Error(\n            'When calling with two arguments, the 2nd argument ' +\n            'to tidy() must be a function');\n      }\n      name = nameOrFn as string;\n      // TODO(nsthorat,smilkov): Do operation logging and performance\n      // profiling.\n    }\n    ENV.engine.startScope(name, gradMode);\n    const result = fn();\n    if (result instanceof Promise) {\n      console.error('Cannot return a Promise inside of tidy.');\n    }\n    ENV.engine.endScope(result, gradMode);\n    return result;\n  }\n\n  /**\n   * Disposes any `Tensor`s found within the provided object up to depth 1.\n   *\n   * @param container an object that may be a `Tensor` or may directly contain\n   *     `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`.  If the\n   *     object is not a `Tensor` or does not contain `Tensors`, nothing\n   *     happens. In general it is safe to pass any object here, except that\n   *     `Promise`s are not supported.\n   */\n  // tslint:disable-next-line:no-any\n  static dispose(container: any) {\n    const tensors = extractTensorsFromAny(container);\n    tensors.forEach(tensor => tensor.dispose());\n  }\n\n  /**\n   * Keeps a `Tensor` generated inside a `tidy` from being disposed\n   * automatically.\n   *\n   * ```js\n   * let b;\n   * const y = tf.tidy(() => {\n   *   const one = tf.scalar(1);\n   *   const a = tf.scalar(2);\n   *\n   *   // b will not be cleaned up by the tidy. a and one will be cleaned up\n   *   // when the tidy ends.\n   *   b = tf.keep(a.square());\n   *\n   *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n   *\n   *   // The value returned inside the tidy function will return\n   *   // through the tidy, in this case to the variable y.\n   *   return b.add(one);\n   * });\n   *\n   * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n   * console.log('y:');\n   * y.print();\n   * console.log('b:');\n   * b.print();\n   * ```\n   *\n   * @param result The tensor to keep from being disposed.\n   */\n  @doc({heading: 'Performance', subheading: 'Memory'})\n  static keep<T extends Tensor>(result: T): T {\n    return ENV.engine.keep(result);\n  }\n\n  /**\n   * Executes `f()` and returns a promise that resolves with timing\n   * information.\n   *\n   * The result is an object with the following properties:\n   *\n   * - `wallMs`: Wall execution time.\n   * - `kernelMs`: Kernel execution time, ignoring data transfer.\n   * - On `WebGL` The following additional properties exist:\n   *   - `uploadWaitMs`: CPU blocking time on texture uploads.\n   *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\n   *\n   * ```js\n   * const x = tf.randomNormal([20, 20]);\n   * const time = await tf.time(() => x.matMul(x));\n   *\n   * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\n   * ```\n   *\n   * @param f The function to execute and time.\n   */\n  @doc({heading: 'Performance', subheading: 'Timing'})\n  static time(f: () => void): Promise<TimingInfo> {\n    return ENV.engine.time(f);\n  }\n}\n"]}},"hash":"a7f5efeba1fef7032d5b856216292840","cacheData":{"env":{}}}