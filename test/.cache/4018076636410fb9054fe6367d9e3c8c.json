{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524062920943},{"name":"../../environment","loc":{"line":38,"column":28}},{"name":"../../util","loc":{"line":39,"column":19}},{"name":"./gpgpu_util","loc":{"line":40,"column":25}},{"name":"./tex_util","loc":{"line":41,"column":23}},{"name":"./webgl_util","loc":{"line":42,"column":25}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../../environment\");\nvar util = require(\"../../util\");\nvar gpgpu_util = require(\"./gpgpu_util\");\nvar tex_util = require(\"./tex_util\");\nvar webgl_util = require(\"./webgl_util\");\nvar GPGPUContext = (function () {\n    function GPGPUContext(gl) {\n        this.outputTexture = null;\n        this.program = null;\n        this.disposed = false;\n        this.autoDebugValidate = false;\n        this.vertexAttrsAreBound = false;\n        if (gl != null) {\n            this.gl = gl;\n        }\n        else {\n            this.gl = gpgpu_util.createWebGLContext();\n        }\n        if (environment_1.ENV.get('WEBGL_VERSION') === 1) {\n            this.textureFloatExtension =\n                webgl_util.getExtensionOrThrow(this.gl, 'OES_texture_float');\n            this.colorBufferFloatExtension =\n                this.gl.getExtension('WEBGL_color_buffer_float');\n            if (!environment_1.ENV.get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                this.textureHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, 'OES_texture_half_float');\n                this.colorBufferHalfFloatExtension =\n                    this.gl.getExtension('EXT_color_buffer_half_float');\n            }\n        }\n        else {\n            this.colorBufferFloatExtension =\n                webgl_util.getExtensionOrThrow(this.gl, 'EXT_color_buffer_float');\n        }\n        this.loseContextExtension =\n            webgl_util.getExtensionOrThrow(this.gl, 'WEBGL_lose_context');\n        if (environment_1.ENV.get('WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED')) {\n            this.getBufferSubDataAsyncExtension =\n                this.gl.getExtension('WEBGL_get_buffer_sub_data_async');\n        }\n        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n        this.framebuffer = webgl_util.createFramebuffer(this.gl);\n        this.textureConfig =\n            gpgpu_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n    }\n    GPGPUContext.prototype.dispose = function () {\n        var _this = this;\n        if (this.disposed) {\n            return;\n        }\n        if (this.program != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n                ' This is probably a resource leak, delete the program with ' +\n                'GPGPUContext.deleteProgram before disposing.');\n        }\n        if (this.outputTexture != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +\n                'texture.  This is probably a resource leak, delete the output ' +\n                'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n                'disposing.');\n        }\n        var gl = this.gl;\n        webgl_util.callAndCheck(gl, function () { return gl.finish(); });\n        webgl_util.callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, null); });\n        webgl_util.callAndCheck(gl, function () { return gl.deleteFramebuffer(_this.framebuffer); });\n        webgl_util.callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, null); });\n        webgl_util.callAndCheck(gl, function () { return gl.deleteBuffer(_this.vertexBuffer); });\n        webgl_util.callAndCheck(gl, function () { return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null); });\n        webgl_util.callAndCheck(gl, function () { return gl.deleteBuffer(_this.indexBuffer); });\n        this.loseContextExtension.loseContext();\n        this.disposed = true;\n    };\n    GPGPUContext.prototype.enableAutomaticDebugValidation = function (enabled) {\n        this.autoDebugValidate = enabled;\n        webgl_util.enableDebugWebGLErrorChecking(enabled);\n    };\n    GPGPUContext.prototype.createFloat32MatrixTexture = function (rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    };\n    GPGPUContext.prototype.createFloat16MatrixTexture = function (rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    };\n    GPGPUContext.prototype.createUnsignedBytesMatrixTexture = function (rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    };\n    GPGPUContext.prototype.uploadPixelDataToTexture = function (texture, pixels) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    };\n    GPGPUContext.prototype.createPackedMatrixTexture = function (rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    };\n    GPGPUContext.prototype.deleteMatrixTexture = function (texture) {\n        var _this = this;\n        this.throwIfDisposed();\n        if (this.outputTexture === texture) {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n            this.outputTexture = null;\n        }\n        webgl_util.callAndCheck(this.gl, function () { return _this.gl.deleteTexture(texture); });\n    };\n    GPGPUContext.prototype.uploadMatrixToTexture = function (texture, rows, columns, matrix) {\n        this.throwIfDisposed();\n        var numChannels = webgl_util.getNumChannels();\n        return gpgpu_util.uploadMatrixToTexture(this.gl, texture, rows, columns, matrix, numChannels, this.textureConfig);\n    };\n    GPGPUContext.prototype.uploadMatrixToPackedTexture = function (texture, rows, columns, matrix) {\n        this.throwIfDisposed();\n        return gpgpu_util.uploadMatrixToPackedTexture(this.gl, texture, rows, columns, matrix, this.textureConfig);\n    };\n    GPGPUContext.prototype.downloadFloat32MatrixFromOutputTexture = function (texture, rows, columns) {\n        var _this = this;\n        return this.downloadMatrixDriver(texture, function () { return gpgpu_util.downloadFloat32MatrixFromOutputTexture(_this.gl, rows, columns, _this.textureConfig); });\n    };\n    GPGPUContext.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function (texture, rows, columns) {\n        var _this = this;\n        return this.downloadMatrixDriver(texture, function () { return gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(_this.gl, rows, columns, _this.textureConfig); });\n    };\n    GPGPUContext.prototype.downloadMatrixFromTextureAsync = function (texture, rows, columns) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.getBufferSubDataAsyncExtension == null) {\n                    throw new Error(\"Cannot download matrix from output texture asynchronously, \" +\n                        \"WEBGL_get_buffer_sub_data_async is not enabled.\");\n                }\n                return [2, this.downloadMatrixDriverAsync(texture, function () { return gpgpu_util.downloadMatrixFromOutputTextureAsync(_this.gl, _this.getBufferSubDataAsyncExtension, rows, columns, _this.textureConfig); })];\n            });\n        });\n    };\n    GPGPUContext.prototype.downloadMatrixFromPackedTexture = function (texture, rows, columns) {\n        var _this = this;\n        return this.downloadMatrixDriver(texture, function () { return gpgpu_util.downloadMatrixFromPackedOutputTexture(_this.gl, rows, columns, _this.textureConfig); });\n    };\n    GPGPUContext.prototype.createProgram = function (fragmentShaderSource) {\n        this.throwIfDisposed();\n        var gl = this.gl;\n        var fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);\n        var vertexShader = gpgpu_util.createVertexShader(gl);\n        var program = webgl_util.createProgram(gl);\n        webgl_util.callAndCheck(gl, function () { return gl.attachShader(program, vertexShader); });\n        webgl_util.callAndCheck(gl, function () { return gl.attachShader(program, fragmentShader); });\n        webgl_util.linkProgram(gl, program);\n        if (this.autoDebugValidate) {\n            webgl_util.validateProgram(gl, program);\n        }\n        if (!this.vertexAttrsAreBound) {\n            this.setProgram(program);\n            this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n        }\n        return program;\n    };\n    GPGPUContext.prototype.deleteProgram = function (program) {\n        var _this = this;\n        this.throwIfDisposed();\n        if (program === this.program) {\n            this.program = null;\n        }\n        if (program != null) {\n            webgl_util.callAndCheck(this.gl, function () { return _this.gl.deleteProgram(program); });\n        }\n    };\n    GPGPUContext.prototype.setProgram = function (program) {\n        var _this = this;\n        this.throwIfDisposed();\n        this.program = program;\n        if ((this.program != null) && this.autoDebugValidate) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.callAndCheck(this.gl, function () { return _this.gl.useProgram(program); });\n    };\n    GPGPUContext.prototype.getUniformLocation = function (program, uniformName, shouldThrow) {\n        if (shouldThrow === void 0) { shouldThrow = true; }\n        this.throwIfDisposed();\n        if (shouldThrow) {\n            return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n        }\n        else {\n            return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n        }\n    };\n    GPGPUContext.prototype.getAttributeLocation = function (program, attribute) {\n        var _this = this;\n        this.throwIfDisposed();\n        return webgl_util.callAndCheck(this.gl, function () { return _this.gl.getAttribLocation(program, attribute); });\n    };\n    GPGPUContext.prototype.getUniformLocationNoThrow = function (program, uniformName) {\n        this.throwIfDisposed();\n        return this.gl.getUniformLocation(program, uniformName);\n    };\n    GPGPUContext.prototype.setInputMatrixTexture = function (inputMatrixTexture, uniformLocation, textureUnit) {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        webgl_util.bindTextureToProgramUniformSampler(this.gl, this.program, inputMatrixTexture, uniformLocation, textureUnit);\n    };\n    GPGPUContext.prototype.setOutputMatrixTexture = function (outputMatrixTexture, rows, columns) {\n        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    };\n    GPGPUContext.prototype.setOutputPackedMatrixTexture = function (outputPackedMatrixTexture, rows, columns) {\n        this.throwIfDisposed();\n        var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];\n        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    };\n    GPGPUContext.prototype.setOutputMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {\n        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    };\n    GPGPUContext.prototype.setOutputPackedMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {\n        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    };\n    GPGPUContext.prototype.debugValidate = function () {\n        if (this.program != null) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.validateFramebuffer(this.gl);\n    };\n    GPGPUContext.prototype.executeProgram = function () {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        var gl = this.gl;\n        if (this.autoDebugValidate) {\n            this.debugValidate();\n        }\n        webgl_util.callAndCheck(gl, function () { return gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0); });\n    };\n    GPGPUContext.prototype.blockUntilAllProgramsCompleted = function () {\n        var _this = this;\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, function () { return _this.gl.finish(); });\n    };\n    GPGPUContext.prototype.getQueryTimerExtension = function () {\n        if (this.disjointQueryTimerExtension == null) {\n            this.disjointQueryTimerExtension =\n                webgl_util.getExtensionOrThrow(this.gl, environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                    'EXT_disjoint_timer_query_webgl2' :\n                    'EXT_disjoint_timer_query');\n        }\n        return this.disjointQueryTimerExtension;\n    };\n    GPGPUContext.prototype.getQueryTimerExtensionWebGL2 = function () {\n        return this.getQueryTimerExtension();\n    };\n    GPGPUContext.prototype.getQueryTimerExtensionWebGL1 = function () {\n        return this.getQueryTimerExtension();\n    };\n    GPGPUContext.prototype.runQuery = function (queryFn) {\n        var query = this.beginQuery();\n        queryFn();\n        this.endQuery();\n        return this.pollQueryTime(query);\n    };\n    GPGPUContext.prototype.beginQuery = function () {\n        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            var gl2 = this.gl;\n            var ext_1 = this.getQueryTimerExtensionWebGL2();\n            var query_1 = gl2.createQuery();\n            gl2.beginQuery(ext_1.TIME_ELAPSED_EXT, query_1);\n            return query_1;\n        }\n        var ext = this.getQueryTimerExtensionWebGL1();\n        var query = ext.createQueryEXT();\n        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n        return query;\n    };\n    GPGPUContext.prototype.endQuery = function () {\n        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            var gl2 = this.gl;\n            var ext_2 = this.getQueryTimerExtensionWebGL2();\n            gl2.endQuery(ext_2.TIME_ELAPSED_EXT);\n            return;\n        }\n        var ext = this.getQueryTimerExtensionWebGL1();\n        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    };\n    GPGPUContext.prototype.isQueryAvailable = function (query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return true;\n        }\n        if (queryTimerVersion === 2) {\n            var gl2 = this.gl;\n            var ext = this.getQueryTimerExtensionWebGL2();\n            var available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n            var disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            return available && !disjoint;\n        }\n        else {\n            var ext = this.getQueryTimerExtensionWebGL1();\n            var available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n            var disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            return available && !disjoint;\n        }\n    };\n    GPGPUContext.prototype.pollQueryTime = function (query) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var resolveWithWarning = function () {\n                console.warn('Disjoint query timer never available.');\n                resolve(-1);\n            };\n            var queryTimerVersion = environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION');\n            util.repeatedTry(function () { return _this.isQueryAvailable(query, queryTimerVersion); })\n                .then(function () { return resolve(_this.getQueryTime(query, queryTimerVersion)); })\n                .catch(resolveWithWarning);\n        });\n    };\n    GPGPUContext.prototype.getQueryTime = function (query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return null;\n        }\n        if (queryTimerVersion === 2) {\n            var gl2 = this.gl;\n            var timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n            return timeElapsedNanos / 1000000;\n        }\n        else {\n            var ext = this.getQueryTimerExtensionWebGL1();\n            var timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n            return timeElapsedNanos / 1000000;\n        }\n    };\n    GPGPUContext.prototype.downloadMatrixDriverSetup = function (texture) {\n        this.throwIfDisposed();\n        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n        if (this.autoDebugValidate) {\n            webgl_util.validateFramebuffer(this.gl);\n        }\n    };\n    GPGPUContext.prototype.downloadMatrixDriverTeardown = function () {\n        if (this.outputTexture != null) {\n            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n            if (this.autoDebugValidate) {\n                webgl_util.validateFramebuffer(this.gl);\n            }\n        }\n        else {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        }\n    };\n    GPGPUContext.prototype.downloadMatrixDriver = function (texture, downloadAndDecode) {\n        this.downloadMatrixDriverSetup(texture);\n        var result = downloadAndDecode();\n        this.downloadMatrixDriverTeardown();\n        return result;\n    };\n    GPGPUContext.prototype.downloadMatrixDriverAsync = function (texture, downloadAndDecode) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.downloadMatrixDriverSetup(texture);\n                        return [4, downloadAndDecode()];\n                    case 1:\n                        result = _a.sent();\n                        this.downloadMatrixDriverTeardown();\n                        return [2, result];\n                }\n            });\n        });\n    };\n    GPGPUContext.prototype.setOutputMatrixTextureDriver = function (outputMatrixTextureMaybePacked, width, height) {\n        this.throwIfDisposed();\n        var gl = this.gl;\n        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n        if (this.autoDebugValidate) {\n            webgl_util.validateFramebuffer(gl);\n        }\n        this.outputTexture = outputMatrixTextureMaybePacked;\n        webgl_util.callAndCheck(gl, function () { return gl.viewport(0, 0, width, height); });\n        webgl_util.callAndCheck(gl, function () { return gl.scissor(0, 0, width, height); });\n    };\n    GPGPUContext.prototype.setOutputMatrixWriteRegionDriver = function (x, y, width, height) {\n        var _this = this;\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, function () { return _this.gl.scissor(x, y, width, height); });\n    };\n    GPGPUContext.prototype.throwIfDisposed = function () {\n        if (this.disposed) {\n            throw new Error('Attempted to use disposed GPGPUContext.');\n        }\n    };\n    GPGPUContext.prototype.throwIfNoProgram = function () {\n        if (this.program == null) {\n            throw new Error('No GPU program is currently set.');\n        }\n    };\n    return GPGPUContext;\n}());\nexports.GPGPUContext = GPGPUContext;\n","map":{"version":3,"file":"gpgpu_context.js","sourceRoot":"","sources":["../src/kernels/webgl/gpgpu_context.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../../environment';\nimport * as util from '../../util';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport {TextureConfig} from './gpgpu_util';\nimport * as tex_util from './tex_util';\n// tslint:disable-next-line:max-line-length\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGL2RenderingContext, WebGLLoseContextExtension, WebGLQuery} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  getBufferSubDataAsyncExtension: {};\n  loseContextExtension: WebGLLoseContextExtension;\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private autoDebugValidate = false;\n\n  private textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    if (gl != null) {\n      this.gl = gl;\n    } else {\n      this.gl = gpgpu_util.createWebGLContext();\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    if (ENV.get('WEBGL_VERSION') === 1) {\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, 'OES_texture_float');\n      this.colorBufferFloatExtension =\n          this.gl.getExtension('WEBGL_color_buffer_float');\n\n      if (!ENV.get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, 'OES_texture_half_float');\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension('EXT_color_buffer_half_float');\n      }\n    } else {\n      this.colorBufferFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, 'EXT_color_buffer_float');\n    }\n\n    this.loseContextExtension =\n        webgl_util.getExtensionOrThrow(this.gl, 'WEBGL_lose_context') as\n        WebGLLoseContextExtension;\n\n    if (ENV.get('WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED')) {\n      this.getBufferSubDataAsyncExtension =\n          this.gl.getExtension('WEBGL_get_buffer_sub_data_async');\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        gpgpu_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.vertexBuffer));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.loseContextExtension.loseContext();\n    this.disposed = true;\n  }\n\n  public enableAutomaticDebugValidation(enabled: boolean) {\n    this.autoDebugValidate = enabled;\n    webgl_util.enableDebugWebGLErrorChecking(enabled);\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: ImageData|HTMLImageElement|HTMLCanvasElement) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public uploadMatrixToTexture(\n      texture: WebGLTexture, rows: number, columns: number,\n      matrix: Float32Array) {\n    this.throwIfDisposed();\n    const numChannels = webgl_util.getNumChannels();\n    return gpgpu_util.uploadMatrixToTexture(\n        this.gl, texture, rows, columns, matrix, numChannels,\n        this.textureConfig);\n  }\n\n  public uploadMatrixToPackedTexture(\n      texture: WebGLTexture, rows: number, columns: number,\n      matrix: Float32Array) {\n    this.throwIfDisposed();\n    return gpgpu_util.uploadMatrixToPackedTexture(\n        this.gl, texture, rows, columns, matrix, this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadFloat32MatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public async downloadMatrixFromTextureAsync(\n      texture: WebGLTexture, rows: number,\n      columns: number): Promise<Float32Array> {\n    if (this.getBufferSubDataAsyncExtension == null) {\n      throw new Error(\n          `Cannot download matrix from output texture asynchronously, ` +\n          `WEBGL_get_buffer_sub_data_async is not enabled.`);\n    }\n\n    return this.downloadMatrixDriverAsync(\n        texture,\n        () => gpgpu_util.downloadMatrixFromOutputTextureAsync(\n            this.gl, this.getBufferSubDataAsyncExtension, rows, columns,\n            this.textureConfig));\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, fragmentShaderSource);\n    const vertexShader: WebGLShader = gpgpu_util.createVertexShader(gl);\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.autoDebugValidate) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.autoDebugValidate) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, this.program, inputMatrixTexture, uniformLocation,\n        textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.autoDebugValidate) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  /**\n   * Executes a query function which contains GL commands and resolves when\n   * the command buffer has finished executing the query.\n   * @param queryFn The query function containing GL commands to execute.\n   * @return a promise that resolves with the ellapsed GPU time in milliseconds.\n   */\n  public runQuery(queryFn: () => void): Promise<number> {\n    const query = this.beginQuery();\n\n    queryFn();\n\n    this.endQuery();\n\n    return this.pollQueryTime(query);\n  }\n\n  beginQuery(): WebGLQuery {\n    if (ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT();\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n\n      const disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      return available && !disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n\n      const disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n\n      return available && !disjoint;\n    }\n  }\n\n  pollQueryTime(query: WebGLQuery): Promise<number> {\n    return new Promise<number>((resolve, reject) => {\n      const resolveWithWarning = () => {\n        console.warn('Disjoint query timer never available.');\n        resolve(-1);\n      };\n\n      const queryTimerVersion =\n          ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION');\n      util.repeatedTry(() => this.isQueryAvailable(query, queryTimerVersion))\n          .then(() => resolve(this.getQueryTime(query, queryTimerVersion)))\n          .catch(resolveWithWarning);\n    });\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private downloadMatrixDriverSetup(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.autoDebugValidate) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private downloadMatrixDriverTeardown() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.autoDebugValidate) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.downloadMatrixDriverSetup(texture);\n    const result = downloadAndDecode();\n    this.downloadMatrixDriverTeardown();\n\n    return result;\n  }\n\n  private async downloadMatrixDriverAsync(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Promise<Float32Array>): Promise<Float32Array> {\n    this.downloadMatrixDriverSetup(texture);\n    const result = await downloadAndDecode();\n    this.downloadMatrixDriverTeardown();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.autoDebugValidate) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n"]}},"hash":"1b605276cc82cd75e0508d61ea6dfeea","cacheData":{"env":{}}}