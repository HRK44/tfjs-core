{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524062920943},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./axis_util","loc":{"line":12,"column":26}},{"name":"./operation","loc":{"line":13,"column":26}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar axis_util_1 = require(\"./axis_util\");\nvar operation_1 = require(\"./operation\");\nvar ReverseOps = (function () {\n    function ReverseOps() {\n    }\n    ReverseOps.reverse1d = function (x) {\n        util.assert(x.rank === 1, \"Error in reverse1D: x must be rank 1 but got\\n             rank \" + x.rank + \".\");\n        return ReverseOps.reverse(x, 0);\n    };\n    ReverseOps.reverse2d = function (x, axis) {\n        util.assert(x.rank === 2, \"Error in reverse2D: x must be rank 2 but got\\n             rank \" + x.rank + \".\");\n        return ReverseOps.reverse(x, axis);\n    };\n    ReverseOps.reverse3d = function (x, axis) {\n        util.assert(x.rank === 3, \"Error in reverse3D: x must be rank 3 but got\\n             rank \" + x.rank + \".\");\n        return ReverseOps.reverse(x, axis);\n    };\n    ReverseOps.reverse4d = function (x, axis) {\n        util.assert(x.rank === 4, \"Error in reverse4D: x must be rank 4 but got\\n             rank \" + x.rank + \".\");\n        return ReverseOps.reverse(x, axis);\n    };\n    ReverseOps.reverse = function (x, axis) {\n        util.assertArgumentsAreTensors({ x: x }, 'reverse');\n        if (x.rank === 0) {\n            return x.clone();\n        }\n        var axes = axis_util_1.parseAxisParam(axis, x.shape);\n        var grad = function (dy) {\n            return { x: function () { return dy.reverse(axes); } };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.reverse(x, axes); }, { x: x }, grad);\n        return res.reshapeAs(x);\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\n        operation_1.operation\n    ], ReverseOps, \"reverse\", null);\n    return ReverseOps;\n}());\nexports.ReverseOps = ReverseOps;\n","map":{"version":3,"file":"reverse.js","sourceRoot":"","sources":["../src/ops/reverse.ts"],"names":[],"mappings":";;;;;;;;AAiBA,8BAA2B;AAC3B,8CAAmC;AAEnC,8BAAgC;AAChC,yCAA2C;AAC3C,yCAAsC;AAEtC;IAAA;IAoFA,CAAC;IA9EQ,oBAAS,GAAhB,UAAiB,CAAW;QAC1B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE,qEACV,CAAC,CAAC,IAAI,MAAG,CAAC,CAAC;QAC3B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClC,CAAC;IASM,oBAAS,GAAhB,UAAiB,CAAW,EAAE,IAAsB;QAClD,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE,qEACV,CAAC,CAAC,IAAI,MAAG,CAAC,CAAC;QAC3B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAQM,oBAAS,GAAhB,UAAiB,CAAW,EAAE,IAAsB;QAClD,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE,qEACV,CAAC,CAAC,IAAI,MAAG,CAAC,CAAC;QAC3B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAQM,oBAAS,GAAhB,UAAiB,CAAW,EAAE,IAAsB;QAClD,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE,qEACV,CAAC,CAAC,IAAI,MAAG,CAAC,CAAC;QAC3B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAuBM,kBAAO,GAAd,UAAiC,CAAI,EAAE,IAAsB;QAC3D,IAAI,CAAC,yBAAyB,CAAC,EAAC,CAAC,GAAA,EAAC,EAAE,SAAS,CAAC,CAAC;QAE/C,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QACnB,CAAC;QACD,IAAM,IAAI,GAAG,0BAAc,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAM,IAAI,GAAG,UAAC,EAAK;YACjB,MAAM,CAAC,EAAC,CAAC,EAAE,cAAM,OAAA,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAhB,CAAgB,EAAC,CAAC;QACrC,CAAC,CAAC;QACF,IAAM,GAAG,GACL,iBAAG,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,EAAxB,CAAwB,EAAE,EAAC,CAAC,GAAA,EAAC,EAAE,IAAI,CAAC,CAAC;QACzE,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IAbD;QAFC,SAAG,CAAC,EAAC,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,qBAAqB,EAAC,CAAC;QAC5D,qBAAS;mCAcT;IACH,iBAAC;CAAA,AApFD,IAoFC;AApFY,gCAAU","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {doc} from '../doc';\nimport {ENV} from '../environment';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport * as util from '../util';\nimport {parseAxisParam} from './axis_util';\nimport {operation} from './operation';\n\nexport class ReverseOps {\n  /**\n   * Reverses a `Tensor1D`.\n   *\n   * @param x The input tensor.\n   */\n  static reverse1d(x: Tensor1D): Tensor1D {\n    util.assert(x.rank === 1, `Error in reverse1D: x must be rank 1 but got\n             rank ${x.rank}.`);\n    return ReverseOps.reverse(x, 0);\n  }\n\n  /**\n   * Reverses a `Tensor2D` along a specified axis\n   *\n   * @param x The input tensor.\n   * @param axis The set of dimensions to reverse. Must be in the\n   *     range [-rank(x), rank(x)). Defaults to all axes.\n   */\n  static reverse2d(x: Tensor2D, axis?: number|number[]): Tensor2D {\n    util.assert(x.rank === 2, `Error in reverse2D: x must be rank 2 but got\n             rank ${x.rank}.`);\n    return ReverseOps.reverse(x, axis);\n  }\n\n  /**\n   * Reverses a `Tensor3D` along a specified axis\n   * @param x The input tensor.\n   * @param axis The set of dimensions to reverse. Must be in the\n   *     range [-rank(x), rank(x)). Defaults to all axes.\n   */\n  static reverse3d(x: Tensor3D, axis?: number|number[]): Tensor3D {\n    util.assert(x.rank === 3, `Error in reverse3D: x must be rank 3 but got\n             rank ${x.rank}.`);\n    return ReverseOps.reverse(x, axis);\n  }\n\n  /**\n   * Reverses a `Tensor4D` along a specified axis\n   * @param x The input tensor.\n   * @param axis The set of dimensions to reverse. Must be in the\n   *     range [-rank(x), rank(x)). Defaults to all axes.\n   */\n  static reverse4d(x: Tensor4D, axis?: number|number[]): Tensor4D {\n    util.assert(x.rank === 4, `Error in reverse4D: x must be rank 4 but got\n             rank ${x.rank}.`);\n    return ReverseOps.reverse(x, axis);\n  }\n\n  /**\n   * Reverses a `Tensor` along a specified axis.\n   *\n   * ```js\n   * const x = tf.tensor1d([1, 2, 3, 4]);\n   *\n   * x.reverse().print();\n   * ```\n   *\n   * ```js\n   * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n   *\n   * const axis = 1;\n   * x.reverse(axis).print();\n   * ```\n   * @param x The input tensor to be reversed.\n   * @param axis The set of dimensions to reverse. Must be in the\n   *     range [-rank(x), rank(x)). Defaults to all axes.\n   */\n  @doc({heading: 'Tensors', subheading: 'Slicing and Joining'})\n  @operation\n  static reverse<T extends Tensor>(x: T, axis?: number|number[]): T {\n    util.assertArgumentsAreTensors({x}, 'reverse');\n\n    if (x.rank === 0) {\n      return x.clone();\n    }\n    const axes = parseAxisParam(axis, x.shape);\n    const grad = (dy: T) => {\n      return {x: () => dy.reverse(axes)};\n    };\n    const res =\n        ENV.engine.runKernel(backend => backend.reverse(x, axes), {x}, grad);\n    return res.reshapeAs(x);\n  }\n}\n"]}},"hash":"7ffd23df820e5e80a66c96814406206d","cacheData":{"env":{}}}