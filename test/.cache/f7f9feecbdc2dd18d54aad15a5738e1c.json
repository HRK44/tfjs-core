{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"../environment","loc":{"line":38,"column":28}},{"name":"../util","loc":{"line":39,"column":21}},{"name":"./io_utils","loc":{"line":40,"column":25}},{"name":"./router_registry","loc":{"line":41,"column":32}},{"name":"./weights_loader","loc":{"line":42,"column":31}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../environment\");\nvar util_1 = require(\"../util\");\nvar io_utils_1 = require(\"./io_utils\");\nvar router_registry_1 = require(\"./router_registry\");\nvar weights_loader_1 = require(\"./weights_loader\");\nvar BrowserHTTPRequest = (function () {\n    function BrowserHTTPRequest(path, requestInit) {\n        this.DEFAULT_METHOD = 'POST';\n        if (!environment_1.ENV.get('IS_BROWSER')) {\n            throw new Error('browserHTTPRequest is not supported outside the web browser.');\n        }\n        util_1.assert(path != null && path.length > 0, 'URL path for browserHTTPRequest must not be null, undefined or ' +\n            'empty.');\n        this.path = path;\n        if (requestInit != null && requestInit.body != null) {\n            throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n        }\n        this.requestInit = requestInit || {};\n    }\n    BrowserHTTPRequest.prototype.save = function (modelArtifacts) {\n        return __awaiter(this, void 0, void 0, function () {\n            var init, weightsManifest, modelTopologyAndWeightManifest, response;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n                            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +\n                                'in binary formats yet.');\n                        }\n                        init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);\n                        init.body = new FormData();\n                        weightsManifest = [{\n                                paths: ['./model.weights.bin'],\n                                weights: modelArtifacts.weightSpecs,\n                            }];\n                        modelTopologyAndWeightManifest = {\n                            modelTopology: modelArtifacts.modelTopology,\n                            weightsManifest: weightsManifest\n                        };\n                        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }), 'model.json');\n                        if (modelArtifacts.weightData != null) {\n                            init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }), 'model.weights.bin');\n                        }\n                        return [4, fetch(this.path, init)];\n                    case 1:\n                        response = _a.sent();\n                        if (response.status === 200) {\n                            return [2, {\n                                    modelArtifactsInfo: io_utils_1.getModelArtifactsInfoForJSON(modelArtifacts),\n                                    responses: [response],\n                                }];\n                        }\n                        else {\n                            throw new Error(\"BrowserHTTPRequest.save() failed due to HTTP response status \" +\n                                (response.status + \".\"));\n                        }\n                        return [2];\n                }\n            });\n        });\n    };\n    BrowserHTTPRequest.prototype.load = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var modelConfigRequest, modelConfig, modelTopology, weightsManifest, weightSpecs, weightData, weightsManifest_1, _i, weightsManifest_2, entry, pathPrefix_1, fetchURLs_1, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4, fetch(this.path, this.requestInit)];\n                    case 1:\n                        modelConfigRequest = _b.sent();\n                        return [4, modelConfigRequest.json()];\n                    case 2:\n                        modelConfig = _b.sent();\n                        modelTopology = modelConfig['modelTopology'];\n                        weightsManifest = modelConfig['weightsManifest'];\n                        if (modelTopology == null && weightsManifest == null) {\n                            throw new Error(\"The JSON from HTTP path \" + this.path + \" contains neither model \" +\n                                \"topology or manifest for weights.\");\n                        }\n                        if (!(weightsManifest != null)) return [3, 4];\n                        weightsManifest_1 = modelConfig['weightsManifest'];\n                        weightSpecs = [];\n                        for (_i = 0, weightsManifest_2 = weightsManifest_1; _i < weightsManifest_2.length; _i++) {\n                            entry = weightsManifest_2[_i];\n                            weightSpecs.push.apply(weightSpecs, entry.weights);\n                        }\n                        pathPrefix_1 = this.path.substring(0, this.path.lastIndexOf('/'));\n                        if (!pathPrefix_1.endsWith('/')) {\n                            pathPrefix_1 = pathPrefix_1 + '/';\n                        }\n                        fetchURLs_1 = [];\n                        weightsManifest_1.forEach(function (weightsGroup) {\n                            weightsGroup.paths.forEach(function (path) {\n                                fetchURLs_1.push(pathPrefix_1 + path);\n                            });\n                        });\n                        _a = io_utils_1.concatenateArrayBuffers;\n                        return [4, weights_loader_1.loadWeightsAsArrayBuffer(fetchURLs_1, this.requestInit)];\n                    case 3:\n                        weightData = _a.apply(void 0, [_b.sent()]);\n                        _b.label = 4;\n                    case 4: return [2, { modelTopology: modelTopology, weightSpecs: weightSpecs, weightData: weightData }];\n                }\n            });\n        });\n    };\n    BrowserHTTPRequest.URL_SCHEMES = ['http://', 'https://'];\n    return BrowserHTTPRequest;\n}());\nexports.BrowserHTTPRequest = BrowserHTTPRequest;\nexports.httpRequestRouter = function (url) {\n    if (!environment_1.ENV.get('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        for (var _i = 0, _a = BrowserHTTPRequest.URL_SCHEMES; _i < _a.length; _i++) {\n            var scheme = _a[_i];\n            if (url.startsWith(scheme)) {\n                return browserHTTPRequest(url);\n            }\n        }\n        return null;\n    }\n};\nrouter_registry_1.IORouterRegistry.registerSaveRouter(exports.httpRequestRouter);\nrouter_registry_1.IORouterRegistry.registerLoadRouter(exports.httpRequestRouter);\nfunction browserHTTPRequest(path, requestInit) {\n    return new BrowserHTTPRequest(path, requestInit);\n}\nexports.browserHTTPRequest = browserHTTPRequest;\n","map":{"version":3,"file":"browser_http.js","sourceRoot":"","sources":["../src/io/browser_http.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,8CAAmC;AACnC,gCAA+B;AAG/B,uCAAiF;AACjF,qDAA6D;AAE7D,mDAA0D;AAG1D;IAQE,4BAAY,IAAY,EAAE,WAAyB;QAJ1C,mBAAc,GAAG,MAAM,CAAC;QAK/B,EAAE,CAAC,CAAC,CAAC,iBAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,IAAI,KAAK,CACX,8DAA8D,CAAC,CAAC;QACtE,CAAC;QAED,aAAM,CACF,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAC/B,iEAAiE;YAC7D,QAAQ,CAAC,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,IAAI,WAAW,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACpD,MAAM,IAAI,KAAK,CACX,oEAAoE,CAAC,CAAC;QAC5E,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,WAAW,IAAI,EAAE,CAAC;IACvC,CAAC;IAEK,iCAAI,GAAV,UAAW,cAA8B;;;;;;wBACvC,EAAE,CAAC,CAAC,cAAc,CAAC,aAAa,YAAY,WAAW,CAAC,CAAC,CAAC;4BACxD,MAAM,IAAI,KAAK,CACX,mEAAmE;gCACnE,wBAAwB,CAAC,CAAC;wBAChC,CAAC;wBAEK,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;wBAC5E,IAAI,CAAC,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;wBAErB,eAAe,GAA0B,CAAC;gCAC9C,KAAK,EAAE,CAAC,qBAAqB,CAAC;gCAC9B,OAAO,EAAE,cAAc,CAAC,WAAW;6BACpC,CAAC,CAAC;wBACG,8BAA8B,GAAG;4BACrC,aAAa,EAAE,cAAc,CAAC,aAAa;4BAC3C,eAAe,iBAAA;yBAChB,CAAC;wBAEF,IAAI,CAAC,IAAI,CAAC,MAAM,CACZ,YAAY,EACZ,IAAI,IAAI,CACJ,CAAC,IAAI,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC,EAChD,EAAC,IAAI,EAAE,kBAAkB,EAAC,CAAC,EAC/B,YAAY,CAAC,CAAC;wBAElB,EAAE,CAAC,CAAC,cAAc,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC;4BACtC,IAAI,CAAC,IAAI,CAAC,MAAM,CACZ,mBAAmB,EACnB,IAAI,IAAI,CACJ,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,EAAC,IAAI,EAAE,0BAA0B,EAAC,CAAC,EACpE,mBAAmB,CAAC,CAAC;wBAC3B,CAAC;wBAEgB,WAAM,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAA;;wBAAvC,QAAQ,GAAG,SAA4B;wBAE7C,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;4BAC5B,MAAM,KAAC;oCACL,kBAAkB,EAAE,uCAA4B,CAAC,cAAc,CAAC;oCAChE,SAAS,EAAE,CAAC,QAAQ,CAAC;iCACtB,EAAC;wBACJ,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,MAAM,IAAI,KAAK,CACX,+DAA+D;iCAC5D,QAAQ,CAAC,MAAM,MAAG,CAAA,CAAC,CAAC;wBAC7B,CAAC;;;;;KACF;IAUK,iCAAI,GAAV;;;;;4BAC6B,WAAM,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,EAAA;;wBAA7D,kBAAkB,GAAG,SAAwC;wBAC/C,WAAM,kBAAkB,CAAC,IAAI,EAAE,EAAA;;wBAA7C,WAAW,GAAG,SAA+B;wBAC7C,aAAa,GAAG,WAAW,CAAC,eAAe,CAAC,CAAC;wBAC7C,eAAe,GAAG,WAAW,CAAC,iBAAiB,CAAC,CAAC;wBAGvD,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,IAAI,eAAe,IAAI,IAAI,CAAC,CAAC,CAAC;4BACrD,MAAM,IAAI,KAAK,CACX,6BAA2B,IAAI,CAAC,IAAI,6BAA0B;gCAC9D,mCAAmC,CAAC,CAAC;wBAC3C,CAAC;6BAIG,CAAA,eAAe,IAAI,IAAI,CAAA,EAAvB,cAAuB;wBACnB,oBACF,WAAW,CAAC,iBAAiB,CAA0B,CAAC;wBAC5D,WAAW,GAAG,EAAE,CAAC;wBACjB,GAAG,CAAC,OAA+B,EAAf,oBAAA,iBAAe,EAAf,6BAAe,EAAf,IAAe;4BAAxB,KAAK;4BACd,WAAW,CAAC,IAAI,OAAhB,WAAW,EAAS,KAAK,CAAC,OAAO,EAAE;yBACpC;wBAEG,eAAa,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;wBACpE,EAAE,CAAC,CAAC,CAAC,YAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAC9B,YAAU,GAAG,YAAU,GAAG,GAAG,CAAC;wBAChC,CAAC;wBAEK,cAAsB,EAAE,CAAC;wBAC/B,iBAAe,CAAC,OAAO,CAAC,UAAA,YAAY;4BAClC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;gCAC7B,WAAS,CAAC,IAAI,CAAC,YAAU,GAAG,IAAI,CAAC,CAAC;4BACpC,CAAC,CAAC,CAAC;wBACL,CAAC,CAAC,CAAC;wBACU,KAAA,kCAAuB,CAAA;wBAChC,WAAM,yCAAwB,CAAC,WAAS,EAAE,IAAI,CAAC,WAAW,CAAC,EAAA;;wBAD/D,UAAU,GAAG,kBACT,SAA2D,EAAC,CAAC;;4BAGnE,WAAO,EAAC,aAAa,eAAA,EAAE,WAAW,aAAA,EAAE,UAAU,YAAA,EAAC,EAAC;;;;KACjD;IApHe,8BAAW,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAqHxD,yBAAC;CAAA,AA3HD,IA2HC;AA3HY,gDAAkB;AA6HlB,QAAA,iBAAiB,GAAa,UAAC,GAAW;IACrD,EAAE,CAAC,CAAC,CAAC,iBAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAG3B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,GAAG,CAAC,CAAiB,UAA8B,EAA9B,KAAA,kBAAkB,CAAC,WAAW,EAA9B,cAA8B,EAA9B,IAA8B;YAA9C,IAAM,MAAM,SAAA;YACf,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;SACF;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AACF,kCAAgB,CAAC,kBAAkB,CAAC,yBAAiB,CAAC,CAAC;AACvD,kCAAgB,CAAC,kBAAkB,CAAC,yBAAiB,CAAC,CAAC;AA2IvD,4BACI,IAAY,EAAE,WAAyB;IACzC,MAAM,CAAC,IAAI,kBAAkB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AACnD,CAAC;AAHD,gDAGC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\n\nimport {ENV} from '../environment';\nimport {assert} from '../util';\n\n// tslint:disable:max-line-length\nimport {concatenateArrayBuffers, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {loadWeightsAsArrayBuffer} from './weights_loader';\n// tslint:enable:max-line-length\n\nexport class BrowserHTTPRequest implements IOHandler {\n  protected readonly path: string;\n  protected readonly requestInit: RequestInit;\n\n  readonly DEFAULT_METHOD = 'POST';\n\n  static readonly URL_SCHEMES = ['http://', 'https://'];\n\n  constructor(path: string, requestInit?: RequestInit) {\n    if (!ENV.get('IS_BROWSER')) {\n      throw new Error(\n          'browserHTTPRequest is not supported outside the web browser.');\n    }\n\n    assert(\n        path != null && path.length > 0,\n        'URL path for browserHTTPRequest must not be null, undefined or ' +\n            'empty.');\n    this.path = path;\n\n    if (requestInit != null && requestInit.body != null) {\n      throw new Error(\n          'requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = requestInit || {};\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserHTTPRequest.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    const init = Object.assign({method: this.DEFAULT_METHOD}, this.requestInit);\n    init.body = new FormData();\n\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs,\n    }];\n    const modelTopologyAndWeightManifest = {\n      modelTopology: modelArtifacts.modelTopology,\n      weightsManifest\n    };\n\n    init.body.append(\n        'model.json',\n        new Blob(\n            [JSON.stringify(modelTopologyAndWeightManifest)],\n            {type: 'application/json'}),\n        'model.json');\n\n    if (modelArtifacts.weightData != null) {\n      init.body.append(\n          'model.weights.bin',\n          new Blob(\n              [modelArtifacts.weightData], {type: 'application/octet-stream'}),\n          'model.weights.bin');\n    }\n\n    const response = await fetch(this.path, init);\n\n    if (response.status === 200) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response],\n      };\n    } else {\n      throw new Error(\n          `BrowserHTTPRequest.save() failed due to HTTP response status ` +\n          `${response.status}.`);\n    }\n  }\n\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `browserHTTPRequest` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const modelConfigRequest = await fetch(this.path, this.requestInit);\n    const modelConfig = await modelConfigRequest.json();\n    const modelTopology = modelConfig['modelTopology'];\n    const weightsManifest = modelConfig['weightsManifest'];\n\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(\n          `The JSON from HTTP path ${this.path} contains neither model ` +\n          `topology or manifest for weights.`);\n    }\n\n    let weightSpecs: WeightsManifestEntry[];\n    let weightData: ArrayBuffer;\n    if (weightsManifest != null) {\n      const weightsManifest =\n          modelConfig['weightsManifest'] as WeightsManifestConfig;\n      weightSpecs = [];\n      for (const entry of weightsManifest) {\n        weightSpecs.push(...entry.weights);\n      }\n\n      let pathPrefix = this.path.substring(0, this.path.lastIndexOf('/'));\n      if (!pathPrefix.endsWith('/')) {\n        pathPrefix = pathPrefix + '/';\n      }\n\n      const fetchURLs: string[] = [];\n      weightsManifest.forEach(weightsGroup => {\n        weightsGroup.paths.forEach(path => {\n          fetchURLs.push(pathPrefix + path);\n        });\n      });\n      weightData = concatenateArrayBuffers(\n          await loadWeightsAsArrayBuffer(fetchURLs, this.requestInit));\n    }\n\n    return {modelTopology, weightSpecs, weightData};\n  }\n}\n\nexport const httpRequestRouter: IORouter = (url: string) => {\n  if (!ENV.get('IS_BROWSER')) {\n    // browserHTTPRequest uses `fetch`, which differs from HTTP requests in\n    // node.js, which use `node-fetch`.\n    return null;\n  } else {\n    for (const scheme of BrowserHTTPRequest.URL_SCHEMES) {\n      if (url.startsWith(scheme)) {\n        return browserHTTPRequest(url);\n      }\n    }\n    return null;\n  }\n};\nIORouterRegistry.registerSaveRouter(httpRequestRouter);\nIORouterRegistry.registerLoadRouter(httpRequestRouter);\n\n// tslint:disable:max-line-length\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tensorflowjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.browserHTTPRequest(\n *     'http://model-server:5000/upload', {method: 'PUT'}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following Python code snippet based on the\n * [flask](https://github.com/pallets/flask) server framework implements a\n * server that can receive the request. Upon receiving the model artifacts\n * via the requst, this particular server reconsistutes instances of\n * [Keras Models](https://keras.io/models/model/) in memory.\n *\n * ```python\n * # pip install -U flask flask-cors tensorflow tensorflowjs\n *\n * from __future__ import absolute_import\n * from __future__ import division\n * from __future__ import print_function\n *\n * import io\n *\n * from flask import Flask, Response, request\n * from flask_cors import CORS, cross_origin\n * import tensorflow as tf\n * import tensorflowjs as tfjs\n * import werkzeug.formparser\n *\n *\n * class ModelReceiver(object):\n *\n *   def __init__(self):\n *     self._model = None\n *     self._model_json_bytes = None\n *     self._model_json_writer = None\n *     self._weight_bytes = None\n *     self._weight_writer = None\n *\n *   @property\n *   def model(self):\n *     self._model_json_writer.flush()\n *     self._weight_writer.flush()\n *     self._model_json_writer.seek(0)\n *     self._weight_writer.seek(0)\n *\n *     json_content = self._model_json_bytes.read()\n *     weights_content = self._weight_bytes.read()\n *     return tfjs.converters.deserialize_keras_model(\n *         json_content,\n *         weight_data=[weights_content],\n *         use_unique_name_scope=True)\n *\n *   def stream_factory(self,\n *                      total_content_length,\n *                      content_type,\n *                      filename,\n *                      content_length=None):\n *     # Note: this example code is *not* thread-safe.\n *     if filename == 'model.json':\n *       self._model_json_bytes = io.BytesIO()\n *       self._model_json_writer = io.BufferedWriter(self._model_json_bytes)\n *       return self._model_json_writer\n *     elif filename == 'model.weights.bin':\n *       self._weight_bytes = io.BytesIO()\n *       self._weight_writer = io.BufferedWriter(self._weight_bytes)\n *       return self._weight_writer\n *\n *\n * def main():\n *   app = Flask('model-server')\n *   CORS(app)\n *   app.config['CORS_HEADER'] = 'Content-Type'\n *\n *   model_receiver = ModelReceiver()\n *\n *   @app.route('/upload', methods=['POST'])\n *   @cross_origin()\n *   def upload():\n *     print('Handling request...')\n *     werkzeug.formparser.parse_form_data(\n *         request.environ, stream_factory=model_receiver.stream_factory)\n *     print('Received model:')\n *     with tf.Graph().as_default(), tf.Session():\n *       model = model_receiver.model\n *       model.summary()\n *       # You can perform `model.predict()`, `model.fit()`,\n *       # `model.evaluate()` etc. here.\n *     return Response(status=200)\n *\n *   app.run('localhost', 5000)\n *\n *\n * if __name__ == '__main__':\n *   main()\n * ```\n *\n * @param path URL path. Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the body\n *    will be set by TensorFlow.js. File blobs representing\n *    the model topology (filename: 'model.json') and the weights of the\n *    model (filename: 'model.weights.bin') will be appended to the body.\n *    If `requestInit` has a `body`, an Error will be thrown.\n * @returns An instance of `IOHandler`.\n */\n// tslint:enable:max-line-length\nexport function browserHTTPRequest(\n    path: string, requestInit?: RequestInit): IOHandler {\n  return new BrowserHTTPRequest(path, requestInit);\n}\n"]}},"hash":"a79d79753c0ba366a12452d387e3ab8d","cacheData":{"env":{}}}