{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"../../util","loc":{"line":3,"column":19}},{"name":"./shader_compiler","loc":{"line":4,"column":30}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"../../util\");\nvar shader_compiler = require(\"./shader_compiler\");\nfunction compileProgram(gpgpu, program, inputs, output) {\n    var userCode = program.userCode;\n    var inputInfos = inputs.map(function (input, i) {\n        var shapeInfo = {\n            logicalShape: input.tensor.shape,\n            texShape: input.isUniform ? null : input.texData.texShape,\n            isUniform: input.isUniform\n        };\n        return { name: program.variableNames[i], shapeInfo: shapeInfo };\n    });\n    var inShapeInfos = inputInfos.map(function (x) { return x.shapeInfo; });\n    var outShapeInfo = {\n        logicalShape: output.tensor.shape,\n        texShape: output.texData.texShape,\n        isUniform: false\n    };\n    var source = shader_compiler.makeShader(inputInfos, outShapeInfo, userCode, program.supportsBroadcasting === true);\n    var webGLProgram = gpgpu.createProgram(source);\n    var uniformLocations = {};\n    for (var i = 0; i < program.variableNames.length; i++) {\n        var uniformName = program.variableNames[i];\n        uniformLocations[uniformName] =\n            gpgpu.getUniformLocation(webGLProgram, uniformName);\n    }\n    return {\n        program: program,\n        source: source,\n        webGLProgram: webGLProgram,\n        uniformLocations: uniformLocations,\n        gpgpu: gpgpu,\n        inShapeInfos: inShapeInfos,\n        outShapeInfo: outShapeInfo\n    };\n}\nexports.compileProgram = compileProgram;\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n    if (shapeInfos.length !== inputs.length) {\n        throw Error(\"Binary was compiled with \" + shapeInfos.length + \" inputs, but \" +\n            (\"was executed with \" + inputs.length + \" inputs\"));\n    }\n    shapeInfos.forEach(function (s, i) {\n        var shapeA = s.logicalShape;\n        var input = inputs[i];\n        var shapeB = input.tensor.shape;\n        if (!util.arraysEqual(shapeA, shapeB)) {\n            throw Error(\"Binary was compiled with different shapes than \" +\n                (\"the current args. Shapes \" + shapeA + \" and \" + shapeB + \" must match\"));\n        }\n        if (s.isUniform && input.isUniform) {\n            return;\n        }\n        var texShapeA = s.texShape;\n        var texShapeB = input.isUniform ? null : input.texData.texShape;\n        if (!util.arraysEqual(texShapeA, texShapeB)) {\n            throw Error(\"Binary was compiled with different texture shapes than the\" +\n                (\" current args. Shape \" + texShapeA + \" and \" + texShapeB + \" must match\"));\n        }\n    });\n}\nfunction runProgram(binary, inputs, output, customSetup) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n    var outTex = output.texData.texture;\n    var outTexShape = output.texData.texShape;\n    var gpgpu = binary.gpgpu;\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    gpgpu.setProgram(binary.webGLProgram);\n    inputs.forEach(function (input, i) {\n        var variableName = binary.program.variableNames[i];\n        var variableUniformLocation = binary.uniformLocations[variableName];\n        if (input.isUniform) {\n            if (input.tensor.size === 1) {\n                gpgpu.gl.uniform1f(variableUniformLocation, input.tensor.dataSync()[0]);\n            }\n            else {\n                var vals = input.tensor.dataSync();\n                if (!(vals instanceof Float32Array)) {\n                    vals = new Float32Array(vals);\n                }\n                gpgpu.gl.uniform1fv(variableUniformLocation, vals);\n            }\n            return;\n        }\n        var tex = input.texData.texture;\n        gpgpu.setInputMatrixTexture(tex, variableUniformLocation, i);\n    });\n    if (customSetup != null) {\n        customSetup(gpgpu, binary.webGLProgram);\n    }\n    gpgpu.executeProgram();\n}\nexports.runProgram = runProgram;\nfunction makeShaderKey(program, inputs, output) {\n    var keyInputs = '';\n    inputs.concat(output).forEach(function (x) {\n        keyInputs +=\n            x.tensor.shape + \"_\" + (x.isUniform ? 'uniform' : x.texData.texShape);\n    });\n    var keyUserCode = program.userCode;\n    var keyBroadcast = (program.supportsBroadcasting === true).toString();\n    var key = program.constructor.name;\n    key += '_' + keyBroadcast + '_' + keyInputs + '_' + keyUserCode;\n    return key;\n}\nexports.makeShaderKey = makeShaderKey;\n","map":{"version":3,"file":"gpgpu_math.js","sourceRoot":"","sources":["../src/kernels/webgl/gpgpu_math.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport * as util from '../../util';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo} from './shader_compiler';\nimport {TextureData} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting?: boolean;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  gpgpu: GPGPUContext;\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n}\n\nexport interface TensorData<T extends Tensor> {\n  tensor: T;\n  texData: TextureData;\n  isUniform: boolean;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: Array<TensorData<T>>,\n    output: TensorData<K>): GPGPUBinary {\n  const userCode = program.userCode;\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo = {\n      logicalShape: input.tensor.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform\n    };\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo = {\n    logicalShape: output.tensor.shape,\n    texShape: output.texData.texShape,\n    isUniform: false\n  };\n  const source = shader_compiler.makeShader(\n      inputInfos, outShapeInfo, userCode,\n      program.supportsBroadcasting === true);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const uniformName = program.variableNames[i];\n    uniformLocations[uniformName] =\n        gpgpu.getUniformLocation(webGLProgram, uniformName);\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    gpgpu,\n    inShapeInfos,\n    outShapeInfo\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: Array<TensorData<Tensor>>) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.tensor.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    binary: GPGPUBinary, inputs: Array<TensorData<T>>, output: TensorData<K>,\n    customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) =>\n        void): void {\n  validateBinaryAndProgram(binary.inShapeInfos, inputs);\n  validateBinaryAndProgram([binary.outShapeInfo], [output]);\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  const gpgpu = binary.gpgpu;\n  gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  gpgpu.setProgram(binary.webGLProgram);\n  inputs.forEach((input, i) => {\n    const variableName = binary.program.variableNames[i];\n    const variableUniformLocation = binary.uniformLocations[variableName];\n    if (input.isUniform) {\n      if (input.tensor.size === 1) {\n        gpgpu.gl.uniform1f(variableUniformLocation, input.tensor.dataSync()[0]);\n      } else {\n        let vals = input.tensor.dataSync();\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(variableUniformLocation, vals);\n      }\n      return;\n    }\n    const tex = input.texData.texture;\n    gpgpu.setInputMatrixTexture(tex, variableUniformLocation, i);\n  });\n\n  if (customSetup != null) {\n    customSetup(gpgpu, binary.webGLProgram);\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: Array<TensorData<Tensor>>,\n    output: TensorData<Tensor>): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    keyInputs +=\n        `${x.tensor.shape}_${x.isUniform ? 'uniform' : x.texData.texShape}`;\n  });\n  const keyUserCode = program.userCode;\n  const keyBroadcast = (program.supportsBroadcasting === true).toString();\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyBroadcast + '_' + keyInputs + '_' + keyUserCode;\n  return key;\n}\n"]}},"hash":"2ab164d434728efd60b40605e290af20","cacheData":{"env":{}}}