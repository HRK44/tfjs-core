{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./array_ops","loc":{"line":12,"column":26}},{"name":"./axis_util","loc":{"line":13,"column":24}},{"name":"./binary_ops","loc":{"line":14,"column":27}},{"name":"./compare","loc":{"line":15,"column":24}},{"name":"./logical_ops","loc":{"line":16,"column":28}},{"name":"./operation","loc":{"line":17,"column":26}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar array_ops_1 = require(\"./array_ops\");\nvar axis_util = require(\"./axis_util\");\nvar binary_ops_1 = require(\"./binary_ops\");\nvar compare_1 = require(\"./compare\");\nvar logical_ops_1 = require(\"./logical_ops\");\nvar operation_1 = require(\"./operation\");\nvar SegmentOps = (function () {\n    function SegmentOps() {\n    }\n    SegmentOps.unsortedSegmentSum = function (x, segmentIds, numSegments) {\n        util.assertArgumentsAreTensors({ x: x, segmentIds: segmentIds }, 'unsortedSegmentSum');\n        util.assert(segmentIds.dtype === 'int32', 'segmentIds must be of dtype `int32`');\n        util.assert(util.isInt(numSegments), 'numSegments must be of dtype int');\n        var axis = 0;\n        var permutation = axis_util.getAxesPermutation([axis], x.rank);\n        var permutedX = x;\n        if (permutation != null) {\n            permutedX = x.transpose(permutation);\n            axis = axis_util.getInnerMostAxes(1, x.rank)[0];\n        }\n        var gradFunc = function (dy) {\n            var derX = function () {\n                return gatherDropNegatives(dy, segmentIds, axis);\n            };\n            return { permutedX: derX };\n        };\n        var result = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.unsortedSegmentSum(permutedX, segmentIds, numSegments);\n        }, { permutedX: permutedX }, gradFunc);\n        if (permutation != null) {\n            result = result.transpose(axis_util.getUndoAxesPermutation(permutation));\n        }\n        return result;\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Segment' }),\n        operation_1.operation\n    ], SegmentOps, \"unsortedSegmentSum\", null);\n    return SegmentOps;\n}());\nexports.SegmentOps = SegmentOps;\nfunction gatherDropNegatives(x, indices, axis) {\n    var zeroClippedIndices = binary_ops_1.BinaryOps.maximum(indices, array_ops_1.ArrayOps.zerosLike(indices));\n    var gathered = array_ops_1.ArrayOps.gather(x, zeroClippedIndices, axis);\n    var isPositive = compare_1.CompareOps.greaterEqual(indices, array_ops_1.ArrayOps.scalar(0, 'int32'));\n    for (var i = 0; i < gathered.rank - isPositive.rank; ++i) {\n        isPositive = array_ops_1.ArrayOps.expandDims(isPositive, -1);\n    }\n    var bools = array_ops_1.ArrayOps.onesLike(gathered).equal(array_ops_1.ArrayOps.scalar(1));\n    isPositive = logical_ops_1.LogicalOps.logicalAnd(isPositive, bools);\n    var zeroSlice = array_ops_1.ArrayOps.zerosLike(gathered);\n    return logical_ops_1.LogicalOps.where(isPositive, gathered, zeroSlice);\n}\n","map":{"version":3,"file":"segment_ops.js","sourceRoot":"","sources":["../src/ops/segment_ops.ts"],"names":[],"mappings":";;;;;;;;AAiBA,8BAA2B;AAC3B,8CAAmC;AAEnC,8BAAgC;AAChC,yCAAqC;AACrC,uCAAyC;AACzC,2CAAuC;AACvC,qCAAqC;AACrC,6CAAyC;AACzC,yCAAsC;AAEtC;IAAA;IAgDA,CAAC;IA7BQ,6BAAkB,GAAzB,UACI,CAAI,EAAE,UAAoB,EAAE,WAAmB;QACjD,IAAI,CAAC,yBAAyB,CAAC,EAAC,CAAC,GAAA,EAAE,UAAU,YAAA,EAAC,EAAE,oBAAoB,CAAC,CAAC;QACtE,IAAI,CAAC,MAAM,CACP,UAAU,CAAC,KAAK,KAAK,OAAO,EAAE,qCAAqC,CAAC,CAAC;QACzE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,kCAAkC,CAAC,CAAC;QAEzE,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAM,WAAW,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QACjE,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YACrC,IAAI,GAAG,SAAS,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC;QACD,IAAM,QAAQ,GAAG,UAAC,EAAK;YACrB,IAAM,IAAI,GAAG;gBACX,MAAM,CAAC,mBAAmB,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;YACnD,CAAC,CAAC;YACF,MAAM,CAAC,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC;QAC3B,CAAC,CAAC;QACF,IAAI,MAAM,GAAG,iBAAG,CAAC,MAAM,CAAC,SAAS,CAC7B,UAAA,OAAO;YACH,OAAA,OAAO,CAAC,kBAAkB,CAAC,SAAS,EAAE,UAAU,EAAE,WAAW,CAAM;QAAnE,CAAmE,EACvE,EAAC,SAAS,WAAA,EAAC,EAAE,QAAQ,CAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC,CAAC;QAC3E,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IA5BD;QAFC,SAAG,CAAC,EAAC,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,SAAS,EAAC,CAAC;QACnD,qBAAS;8CA6BT;IACH,iBAAC;CAAA,AAhDD,IAgDC;AAhDY,gCAAU;AAkDvB,6BACI,CAAI,EAAE,OAAiB,EAAE,IAAY;IAIvC,IAAM,kBAAkB,GACpB,sBAAS,CAAC,OAAO,CAAC,OAAO,EAAE,oBAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IAC5D,IAAM,QAAQ,GAAG,oBAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,kBAA8B,EAAE,IAAI,CAAC,CAAC;IAC1E,IAAI,UAAU,GACV,oBAAU,CAAC,YAAY,CAAC,OAAO,EAAE,oBAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IAClE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC;QACzD,UAAU,GAAG,oBAAQ,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC;IACD,IAAM,KAAK,GAAG,oBAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,oBAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,UAAU,GAAG,wBAAU,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACtD,IAAM,SAAS,GAAG,oBAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC/C,MAAM,CAAC,wBAAU,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;AAC3D,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {doc} from '../doc';\nimport {ENV} from '../environment';\nimport {Tensor, Tensor1D} from '../tensor';\nimport * as util from '../util';\nimport {ArrayOps} from './array_ops';\nimport * as axis_util from './axis_util';\nimport {BinaryOps} from './binary_ops';\nimport {CompareOps} from './compare';\nimport {LogicalOps} from './logical_ops';\nimport {operation} from './operation';\n\nexport class SegmentOps {\n  /**\n   * Computes the sum along segments of a `Tensor`.\n   *\n   * ```js\n   * const x = tf.tensor1d([1, 2, 3, 4]);\n   * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\n   * comst numSegments = 3;\n   *\n   * x.unsortedSegmentSum(indices, numSegments).print()\n   * //or tf.unsortedSegmentSum(x, indices, numSegments)\n   * ```\n   * @param x The `Tensor` that will be summed along its segments\n   * @param segmentIds A `Tensor1D` whose rank is equal to the rank of `x`'s\n   * dimension along the `axis`.  Maps each element of `x` to a segment.\n   * @param numSegments The number of distinct `segmentIds`\n   */\n  @doc({heading: 'Operations', subheading: 'Segment'})\n  @operation\n  static unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): T {\n    util.assertArgumentsAreTensors({x, segmentIds}, 'unsortedSegmentSum');\n    util.assert(\n        segmentIds.dtype === 'int32', 'segmentIds must be of dtype `int32`');\n    util.assert(util.isInt(numSegments), 'numSegments must be of dtype int');\n\n    let axis = 0;\n    const permutation = axis_util.getAxesPermutation([axis], x.rank);\n    let permutedX = x;\n    if (permutation != null) {\n      permutedX = x.transpose(permutation);\n      axis = axis_util.getInnerMostAxes(1, x.rank)[0];\n    }\n    const gradFunc = (dy: T) => {\n      const derX = () => {\n        return gatherDropNegatives(dy, segmentIds, axis);\n      };\n      return {permutedX: derX};\n    };\n    let result = ENV.engine.runKernel(\n        backend =>\n            backend.unsortedSegmentSum(permutedX, segmentIds, numSegments) as T,\n        {permutedX}, gradFunc);\n    if (permutation != null) {\n      result = result.transpose(axis_util.getUndoAxesPermutation(permutation));\n    }\n    return result;\n  }\n}\n\nfunction gatherDropNegatives<T extends Tensor>(\n    x: T, indices: Tensor1D, axis: number) {\n  // Helper function for unsorted segment ops. Gathers params for\n  // positive segment ids and gathers 0 for inputs with negative segment id.\n  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n  const zeroClippedIndices =\n      BinaryOps.maximum(indices, ArrayOps.zerosLike(indices));\n  const gathered = ArrayOps.gather(x, zeroClippedIndices as Tensor1D, axis);\n  let isPositive =\n      CompareOps.greaterEqual(indices, ArrayOps.scalar(0, 'int32'));\n  for (let i = 0; i < gathered.rank - isPositive.rank; ++i) {\n    isPositive = ArrayOps.expandDims(isPositive, -1);\n  }\n  const bools = ArrayOps.onesLike(gathered).equal(ArrayOps.scalar(1));\n  isPositive = LogicalOps.logicalAnd(isPositive, bools);\n  const zeroSlice = ArrayOps.zerosLike(gathered);\n  return LogicalOps.where(isPositive, gathered, zeroSlice);\n}\n"]}},"hash":"64a4224dbb25e363d546fc8171e85294","cacheData":{"env":{}}}