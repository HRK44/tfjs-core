{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524062920943},{"name":"../../ops/erf_util","loc":{"line":3,"column":23}},{"name":"../../ops/selu_util","loc":{"line":4,"column":24}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar erf_util = require(\"../../ops/erf_util\");\nvar selu_util = require(\"../../ops/selu_util\");\nvar UnaryOpProgram = (function () {\n    function UnaryOpProgram(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.userCode = \"\\n      float unaryOperation(float x) {\\n        \" + opSnippet + \"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \";\n    }\n    return UnaryOpProgram;\n}());\nexports.UnaryOpProgram = UnaryOpProgram;\nexports.PASS_THROUGH = \"return x;\";\nvar CHECK_NAN_SNIPPET = \"if (isNaN(x)) return x;\";\nexports.ABS = \"return abs(x);\";\nexports.RELU = CHECK_NAN_SNIPPET + \"\\n  return (x < 0.0) ? 0.0 : x;\\n\";\nexports.ELU = \"return (x >= 0.0) ? x : (exp(x) - 1.0);\";\nexports.SELU = \"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \" + selu_util.SELU_SCALEALPHA + \";\\n  float scale = \" + selu_util.SELU_SCALE + \";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\";\nfunction STEP(alpha) {\n    if (alpha === void 0) { alpha = 0.0; }\n    return CHECK_NAN_SNIPPET + (\"\\n    return x > 0.0 ? 1.0 : float(\" + alpha + \");\\n  \");\n}\nexports.STEP = STEP;\nexports.NEG = \"return -x;\";\nexports.CEIL = \"return ceil(x);\";\nexports.FLOOR = \"return floor(x);\";\nexports.SIGN = \"\\n  if (isNaN(x)) { return 0.0; }\\n  return sign(x);\\n\";\nexports.ROUND = \"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\";\nexports.EXP = \"return exp(x);\";\nexports.EXPM1 = \"return exp(x) - 1.0;\";\nexports.LOG = \"return log(x);\";\nexports.LOG1P = \"return log(1.0 + x);\";\nexports.SQRT = \"return sqrt(x);\";\nexports.RSQRT = \"return inversesqrt(x);\";\nexports.SIGMOID = \"return 1.0 / (1.0 + exp(-1.0 * x));\";\nexports.SOFTPLUS = \"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\";\nexports.SIN = \"return sin(x);\";\nexports.COS = \"return cos(x);\";\nexports.TAN = \"return tan(x);\";\nexports.ASIN = \"return asin(x);\";\nexports.ACOS = \"return acos(x);\";\nexports.ATAN = CHECK_NAN_SNIPPET + \"\\n  return atan(x);\\n\";\nexports.SINH = \"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\";\nexports.COSH = \"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\";\nexports.TANH = \"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\";\nexports.ASINH = \"return log(x + sqrt(x * x + 1.0));\";\nexports.ACOSH = \"return log(x + sqrt(x * x - 1.0));\";\nexports.ATANH = \"return (log(1.0 + x) - log(1.0 - x)) / 2.0;\";\nexports.ERF = \"\\n  // Error function is calculated approximately with elementary function.\\n  // See \\\"Handbook of Mathematical Functions with Formulas,\\n  // Graphs, and Mathematical Tables\\\", Abramowitz and Stegun.\\n  float p = \" + erf_util.ERF_P + \";\\n  float a1 = \" + erf_util.ERF_A1 + \";\\n  float a2 = \" + erf_util.ERF_A2 + \";\\n  float a3 = \" + erf_util.ERF_A3 + \";\\n  float a4 = \" + erf_util.ERF_A4 + \";\\n  float a5 = \" + erf_util.ERF_A5 + \";\\n\\n  float t = 1.0 / (1.0 + p * x);\\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\\n\";\nexports.SQUARE = \"return x * x;\";\nexports.RECIPROCAL = \"return 1.0 / x;\";\nexports.LOGICAL_NOT = \"return float(!(x >= 1.0));\";\nexports.TO_INT = \"return float(int(x));\";\n","map":{"version":3,"file":"unaryop_gpu.js","sourceRoot":"","sources":["../src/kernels/webgl/unaryop_gpu.ts"],"names":[],"mappings":";;AAiBA,6CAA+C;AAC/C,+CAAiD;AAIjD;IAKE,wBAAY,MAAgB,EAAE,SAAiB;QAJ/C,kBAAa,GAAG,CAAC,GAAG,CAAC,CAAC;QAKpB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,sDAEV,SAAS,yJASd,CAAC;IACJ,CAAC;IACH,qBAAC;AAAD,CAAC,AApBD,IAoBC;AApBY,wCAAc;AAsBd,QAAA,YAAY,GAAG,WAAW,CAAC;AAExC,IAAM,iBAAiB,GAAG,yBAAyB,CAAC;AAEvC,QAAA,GAAG,GAAG,gBAAgB,CAAC;AAEvB,QAAA,IAAI,GAAG,iBAAiB,GAAG,mCAEvC,CAAC;AAEW,QAAA,GAAG,GAAG,yCAAyC,CAAC;AAEhD,QAAA,IAAI,GAAG,+IAGG,SAAS,CAAC,eAAe,2BAC9B,SAAS,CAAC,UAAU,wEAErC,CAAC;AAEF,cAAqB,KAAW;IAAX,sBAAA,EAAA,WAAW;IAC9B,MAAM,CAAC,iBAAiB,IAAG,wCACM,KAAK,WACrC,CAAA,CAAC;AACJ,CAAC;AAJD,oBAIC;AAEY,QAAA,GAAG,GAAG,YAAY,CAAC;AAEnB,QAAA,IAAI,GAAG,iBAAiB,CAAC;AAEzB,QAAA,KAAK,GAAG,kBAAkB,CAAC;AAE3B,QAAA,IAAI,GAAG,wDAGnB,CAAC;AAEW,QAAA,KAAK,GAAG,gWAepB,CAAC;AAEW,QAAA,GAAG,GAAG,gBAAgB,CAAC;AAEvB,QAAA,KAAK,GAAG,sBAAsB,CAAC;AAE/B,QAAA,GAAG,GAAG,gBAAgB,CAAC;AAEvB,QAAA,KAAK,GAAG,sBAAsB,CAAC;AAE/B,QAAA,IAAI,GAAG,iBAAiB,CAAC;AAEzB,QAAA,KAAK,GAAG,wBAAwB,CAAC;AAEjC,QAAA,OAAO,GAAG,qCAAqC,CAAC;AAehD,QAAA,QAAQ,GAAG,yWAoBvB,CAAC;AAEW,QAAA,GAAG,GAAG,gBAAgB,CAAC;AAEvB,QAAA,GAAG,GAAG,gBAAgB,CAAC;AAEvB,QAAA,GAAG,GAAG,gBAAgB,CAAC;AAEvB,QAAA,IAAI,GAAG,iBAAiB,CAAC;AAEzB,QAAA,IAAI,GAAG,iBAAiB,CAAC;AAEzB,QAAA,IAAI,GAAG,iBAAiB,GAAG,uBAEvC,CAAC;AAEW,QAAA,IAAI,GAAG,8DAGnB,CAAC;AAEW,QAAA,IAAI,GAAG,+DAGnB,CAAC;AAEW,QAAA,IAAI,GAAG,sFAGnB,CAAC;AAEW,QAAA,KAAK,GAAG,oCAAoC,CAAC;AAE7C,QAAA,KAAK,GAAG,oCAAoC,CAAC;AAE7C,QAAA,KAAK,GAAG,6CAA6C,CAAC;AAEtD,QAAA,GAAG,GAAG,4NAIL,QAAQ,CAAC,KAAK,wBACb,QAAQ,CAAC,MAAM,wBACf,QAAQ,CAAC,MAAM,wBACf,QAAQ,CAAC,MAAM,wBACf,QAAQ,CAAC,MAAM,wBACf,QAAQ,CAAC,MAAM,kHAI7B,CAAC;AAEW,QAAA,MAAM,GAAG,eAAe,CAAC;AAEzB,QAAA,UAAU,GAAG,iBAAiB,CAAC;AAE/B,QAAA,WAAW,GAAG,4BAA4B,CAAC;AAE3C,QAAA,MAAM,GAAG,uBAAuB,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as erf_util from '../../ops/erf_util';\nimport * as selu_util from '../../ops/selu_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const PASS_THROUGH = `return x;`;\n\nconst CHECK_NAN_SNIPPET = `if (isNaN(x)) return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nexport const SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${selu_util.SELU_SCALEALPHA};\n  float scale = ${selu_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const NEG = `return -x;`;\n\nexport const CEIL = `return ceil(x);`;\n\nexport const FLOOR = `return floor(x);`;\n\nexport const SIGN = `\n  if (isNaN(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const EXP = `return exp(x);`;\n\nexport const EXPM1 = `return exp(x) - 1.0;`;\n\nexport const LOG = `return log(x);`;\n\nexport const LOG1P = `return log(1.0 + x);`;\n\nexport const SQRT = `return sqrt(x);`;\n\nexport const RSQRT = `return inversesqrt(x);`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\n/**\n * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n *\n * epsilon is the difference between 1.0 and the next representable\n * float. For a single precision 32 bit float this should be 2^-23, see:\n * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n *\n * too_large = (x > -threshold) is value above which exp(x) may overflow\n * but softplus(x) == x is within machine epsilon\n *\n * too_small = (x < threshold) is value below which exp(x) may underflow,\n * but softplus(x) == exp(x) is within machine epsilon.\n */\nexport const SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const SIN = `return sin(x);`;\n\nexport const COS = `return cos(x);`;\n\nexport const TAN = `return tan(x);`;\n\nexport const ASIN = `return asin(x);`;\n\nexport const ACOS = `return acos(x);`;\n\nexport const ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const ASINH = `return log(x + sqrt(x * x + 1.0));`;\n\nexport const ACOSH = `return log(x + sqrt(x * x - 1.0));`;\n\nexport const ATANH = `return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${erf_util.ERF_P};\n  float a1 = ${erf_util.ERF_A1};\n  float a2 = ${erf_util.ERF_A2};\n  float a3 = ${erf_util.ERF_A3};\n  float a4 = ${erf_util.ERF_A4};\n  float a5 = ${erf_util.ERF_A5};\n\n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n`;\n\nexport const SQUARE = `return x * x;`;\n\nexport const RECIPROCAL = `return 1.0 / x;`;\n\nexport const LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const TO_INT = `return float(int(x));`;\n"]}},"hash":"bd3a446e212126609fd43e8f43769f9a","cacheData":{"env":{}}}