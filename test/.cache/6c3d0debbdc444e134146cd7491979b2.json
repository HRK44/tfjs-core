{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"./util","loc":{"line":3,"column":19}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar FORMAT_LIMIT_NUM_VALS = 20;\nvar FORMAT_NUM_FIRST_LAST_VALS = 3;\nvar FORMAT_NUM_SIG_DIGITS = 7;\nfunction tensorToString(t, verbose) {\n    var vals = t.dataSync();\n    var padPerCol = computeMaxSizePerColumn(t);\n    var valsLines = subTensorToString(vals, t.shape, t.strides, padPerCol);\n    var lines = ['Tensor'];\n    if (verbose) {\n        lines.push(\"  dtype: \" + t.dtype);\n        lines.push(\"  rank: \" + t.rank);\n        lines.push(\"  shape: [\" + t.shape + \"]\");\n        lines.push(\"  values:\");\n    }\n    lines.push(valsLines.map(function (l) { return '    ' + l; }).join('\\n'));\n    return lines.join('\\n');\n}\nexports.tensorToString = tensorToString;\nfunction computeMaxSizePerColumn(t) {\n    var vals = t.dataSync();\n    var n = t.size;\n    var numCols = t.strides[t.strides.length - 1];\n    var padPerCol = new Array(numCols).fill(0);\n    if (t.rank > 1) {\n        for (var row = 0; row < n / numCols; row++) {\n            var offset = row * numCols;\n            for (var j = 0; j < numCols; j++) {\n                padPerCol[j] =\n                    Math.max(padPerCol[j], valToString(vals[offset + j], 0).length);\n            }\n        }\n    }\n    return padPerCol;\n}\nfunction valToString(val, pad) {\n    return util.rightPad(parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(), pad);\n}\nfunction subTensorToString(vals, shape, strides, padPerCol, isLast) {\n    if (isLast === void 0) { isLast = true; }\n    var size = shape[0];\n    var rank = shape.length;\n    if (rank === 0) {\n        return [vals[0].toString()];\n    }\n    if (rank === 1) {\n        if (size > FORMAT_LIMIT_NUM_VALS) {\n            var firstVals = Array.from(vals.subarray(0, FORMAT_NUM_FIRST_LAST_VALS));\n            var lastVals = Array.from(vals.subarray(size - FORMAT_NUM_FIRST_LAST_VALS, size));\n            return [\n                '[' + firstVals.map(function (x, i) { return valToString(x, padPerCol[i]); }).join(', ') +\n                    ', ..., ' +\n                    lastVals\n                        .map(function (x, i) { return valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i]); })\n                        .join(', ') +\n                    ']'\n            ];\n        }\n        return [\n            '[' +\n                Array.from(vals).map(function (x, i) { return valToString(x, padPerCol[i]); }).join(', ') +\n                ']'\n        ];\n    }\n    var subshape = shape.slice(1);\n    var substrides = strides.slice(1);\n    var stride = strides[0];\n    var lines = [];\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n        for (var i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n            var start = i * stride;\n            var end = start + stride;\n            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, false));\n        }\n        lines.push('...');\n        for (var i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n            var start = i * stride;\n            var end = start + stride;\n            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, i === size - 1));\n        }\n    }\n    else {\n        for (var i = 0; i < size; i++) {\n            var start = i * stride;\n            var end = start + stride;\n            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, i === size - 1));\n        }\n    }\n    var sep = rank === 2 ? ',' : '';\n    lines[0] = '[' + lines[0] + sep;\n    for (var i = 1; i < lines.length - 1; i++) {\n        lines[i] = ' ' + lines[i] + sep;\n    }\n    var newLineSep = ',\\n';\n    for (var i = 2; i < rank; i++) {\n        newLineSep += '\\n';\n    }\n    lines[lines.length - 1] =\n        ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n    return lines;\n}\n","map":{"version":3,"file":"tensor_util.js","sourceRoot":"","sources":["../src/tensor_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {TypedArray} from './types';\nimport * as util from './util';\n\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\n\nexport function tensorToString(t: Tensor, verbose: boolean) {\n  const vals = t.dataSync();\n  const padPerCol = computeMaxSizePerColumn(t);\n  const valsLines = subTensorToString(vals, t.shape, t.strides, padPerCol);\n  const lines = ['Tensor'];\n  if (verbose) {\n    lines.push(`  dtype: ${t.dtype}`);\n    lines.push(`  rank: ${t.rank}`);\n    lines.push(`  shape: [${t.shape}]`);\n    lines.push(`  values:`);\n  }\n  lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n  return lines.join('\\n');\n}\n\nfunction computeMaxSizePerColumn(t: Tensor): number[] {\n  const vals = t.dataSync();\n  const n = t.size;\n\n  const numCols = t.strides[t.strides.length - 1];\n  const padPerCol = new Array(numCols).fill(0);\n  if (t.rank > 1) {\n    for (let row = 0; row < n / numCols; row++) {\n      const offset = row * numCols;\n      for (let j = 0; j < numCols; j++) {\n        padPerCol[j] =\n            Math.max(padPerCol[j], valToString(vals[offset + j], 0).length);\n      }\n    }\n  }\n  return padPerCol;\n}\n\nfunction valToString(val: number, pad: number) {\n  return util.rightPad(\n      parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(), pad);\n}\n\nfunction subTensorToString(\n    vals: TypedArray, shape: number[], strides: number[], padPerCol: number[],\n    isLast = true): string[] {\n  const size = shape[0];\n  const rank = shape.length;\n  if (rank === 0) {\n    return [vals[0].toString()];\n  }\n\n  if (rank === 1) {\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n      const firstVals =\n          Array.from(vals.subarray(0, FORMAT_NUM_FIRST_LAST_VALS));\n      const lastVals =\n          Array.from(vals.subarray(size - FORMAT_NUM_FIRST_LAST_VALS, size));\n      return [\n        '[' + firstVals.map((x, i) => valToString(x, padPerCol[i])).join(', ') +\n        ', ..., ' +\n        lastVals\n            .map(\n                (x, i) => valToString(\n                    x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i]))\n            .join(', ') +\n        ']'\n      ];\n    }\n    return [\n      '[' +\n      Array.from(vals).map((x, i) => valToString(x, padPerCol[i])).join(', ') +\n      ']'\n    ];\n  }\n\n  // The array is rank 2 or more.\n  const subshape = shape.slice(1);\n  const substrides = strides.slice(1);\n  const stride = strides[0];\n  const lines: string[] = [];\n  if (size > FORMAT_LIMIT_NUM_VALS) {\n    for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.subarray(start, end), subshape, substrides, padPerCol,\n          false /* isLast */));\n    }\n    lines.push('...');\n    for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.subarray(start, end), subshape, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.subarray(start, end), subshape, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  }\n  const sep = rank === 2 ? ',' : '';\n  lines[0] = '[' + lines[0] + sep;\n  for (let i = 1; i < lines.length - 1; i++) {\n    lines[i] = ' ' + lines[i] + sep;\n  }\n  let newLineSep = ',\\n';\n  for (let i = 2; i < rank; i++) {\n    newLineSep += '\\n';\n  }\n  lines[lines.length - 1] =\n      ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n  return lines;\n}\n"]}},"hash":"390ed27e2f18ffe2765d87a4ed9ccbf3","cacheData":{"env":{}}}