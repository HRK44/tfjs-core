{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524062920943},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./axis_util","loc":{"line":12,"column":26}},{"name":"./concat_util","loc":{"line":13,"column":26}},{"name":"./operation","loc":{"line":14,"column":26}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar axis_util_1 = require(\"./axis_util\");\nvar concat_util = require(\"./concat_util\");\nvar operation_1 = require(\"./operation\");\nvar ConcatOps = (function () {\n    function ConcatOps() {\n    }\n    ConcatOps.concat1d = function (tensors) {\n        return ConcatOps.concat(tensors, 0);\n    };\n    ConcatOps.concat2d = function (tensors, axis) {\n        return ConcatOps.concat(tensors, axis);\n    };\n    ConcatOps.concat3d = function (tensors, axis) {\n        return ConcatOps.concat(tensors, axis);\n    };\n    ConcatOps.concat4d = function (tensors, axis) {\n        return ConcatOps.concat(tensors, axis);\n    };\n    ConcatOps.concat = function (tensors, axis) {\n        if (axis === void 0) { axis = 0; }\n        util.assert(tensors.length >= 1, 'Pass at least one tensor to concat');\n        util.assertArgumentsAreTensors({ tensors: tensors }, 'concat');\n        var result = tensors[0];\n        if (tensors.length === 1) {\n            return result;\n        }\n        var axes = axis_util_1.parseAxisParam(axis, result.shape);\n        for (var i = 1; i < tensors.length; ++i) {\n            result = concat2Tensors(result, tensors[i], axes[0]);\n        }\n        return result;\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\n        operation_1.operation\n    ], ConcatOps, \"concat\", null);\n    return ConcatOps;\n}());\nexports.ConcatOps = ConcatOps;\nfunction concat2Tensors(a, b, axis) {\n    concat_util.assertParams(a.shape, b.shape, axis);\n    var outShape = concat_util.computeOutShape(a.shape, b.shape, axis);\n    var a2D = a.as2D(-1, util.sizeFromShape(a.shape.slice(axis)));\n    var b2D = b.as2D(-1, util.sizeFromShape(b.shape.slice(axis)));\n    var _a = concat_util.computeGradientSliceShapes(a2D.shape, b2D.shape), aBegin = _a.aBegin, aSize = _a.aSize, bBegin = _a.bBegin, bSize = _a.bSize;\n    var der = function (dy) {\n        return { a: function () { return dy.slice(aBegin, aSize); }, b: function () { return dy.slice(bBegin, bSize); } };\n    };\n    var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.concat(a2D, b2D); }, { a: a2D, b: b2D }, der);\n    return res.reshape(outShape);\n}\n","map":{"version":3,"file":"concat.js","sourceRoot":"","sources":["../src/ops/concat.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {doc} from '../doc';\nimport {ENV} from '../environment';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport * as util from '../util';\nimport {parseAxisParam} from './axis_util';\nimport * as concat_util from './concat_util';\nimport {operation} from './operation';\n\nexport class ConcatOps {\n  /**\n   * Concatenates a list of `Tensor1D`s along an axis. See `concat` for details.\n   *\n   * For example, if:\n   * A: shape(3) = |r1, g1, b1|\n   * B: shape(2) = |r2, g2|\n   * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|\n   *\n   * @param tensors A list of `Tensor`s to concatenate.\n   * @return The concatenated array.\n   */\n  static concat1d(tensors: Tensor1D[]): Tensor1D {\n    return ConcatOps.concat(tensors, 0 /* axis */);\n  }\n\n  /**\n   * Concatenates a list of `Tensor2D`s along an axis. See `concat` for details.\n   *\n   * For example, if:\n   * A: shape(2, 3) = | r1, g1, b1 |\n   *                  | r2, g2, b2 |\n   *\n   * B: shape(2, 3) = | r3, g3, b3 |\n   *                  | r4, g4, b4 |\n   *\n   * C = tf.concat2d([A, B], axis)\n   *\n   * if axis = 0:\n   * C: shape(4, 3) = | r1, g1, b1 |\n   *                  | r2, g2, b2 |\n   *                  | r3, g3, b3 |\n   *                  | r4, g4, b4 |\n   *\n   * if axis = 1:\n   * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |\n   *                   | r2, g2, b2, r4, g4, b4 |\n   *\n   *\n   * @param tensors A list of `Tensor`s to concatenate.\n   * @param axis The axis to concatenate along.\n   * @return The concatenated array.\n   */\n  static concat2d(tensors: Tensor2D[], axis: number): Tensor2D {\n    return ConcatOps.concat(tensors, axis);\n  }\n\n  /**\n   * Concatenates a list of `Tensor3D`s along an axis. See `concat` for details.\n   *\n   * For example, if:\n   * A: shape(2, 1, 3) = | r1, g1, b1 |\n   *                     | r2, g2, b2 |\n   *\n   * B: shape(2, 1, 3) = | r3, g3, b3 |\n   *                     | r4, g4, b4 |\n   *\n   * C = tf.concat3d([A, B], axis)\n   *\n   * if axis = 0:\n   * C: shape(4, 1, 3) = | r1, g1, b1 |\n   *                     | r2, g2, b2 |\n   *                     | r3, g3, b3 |\n   *                     | r4, g4, b4 |\n   *\n   * if axis = 1:\n   * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |\n   *                     | r2, g2, b2, r4, g4, b4 |\n   *\n   * if axis = 2:\n   * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |\n   *                      | r2, g2, b2, r4, g4, b4 |\n   *\n   * @param tensors A list of `Tensor`s to concatenate.\n   * @param axis The axis to concate along.\n   * @return The concatenated array.\n   */\n  static concat3d(tensors: Tensor3D[], axis: number): Tensor3D {\n    return ConcatOps.concat(tensors, axis);\n  }\n\n  /**\n   * Concatenates a list of `Tensor4D`s along an axis. See `concat` for details.\n   *\n   * @param tensors A list of `Tensor`s to concatenate.\n   * @param axis The axis to concate along.\n   * @return The concatenated array.\n   */\n  static concat4d(tensors: Tensor4D[], axis: number): Tensor4D {\n    return ConcatOps.concat(tensors, axis);\n  }\n\n  /**\n   * Concatenates a list of `Tensor`s along a given axis.\n   *\n   * The tensors ranks and types must match, and their sizes must match in all\n   * dimensions except `axis`.\n   *\n   * ```js\n   * const a = tf.tensor1d([1, 2]);\n   * const b = tf.tensor1d([3, 4]);\n   * a.concat(b).print();  // or a.concat(b)\n   * ```\n   *\n   * ```js\n   * const a = tf.tensor1d([1, 2]);\n   * const b = tf.tensor1d([3, 4]);\n   * const c = tf.tensor1d([5, 6]);\n   * tf.concat([a, b, c]).print();\n   * ```\n   *\n   * ```js\n   * const a = tf.tensor2d([[1, 2], [10, 20]]);\n   * const b = tf.tensor2d([[3, 4], [30, 40]]);\n   * const axis = 1;\n   * tf.concat([a, b], axis).print();\n   * ```\n   * @param tensors A list of tensors to concatenate.\n   * @param axis The axis to concate along. Defaults to 0 (the first dim).\n   */\n  @doc({heading: 'Tensors', subheading: 'Slicing and Joining'})\n  @operation\n  static concat<T extends Tensor>(tensors: T[], axis = 0): T {\n    util.assert(tensors.length >= 1, 'Pass at least one tensor to concat');\n    util.assertArgumentsAreTensors({tensors}, 'concat');\n\n    let result = tensors[0];\n    if (tensors.length === 1) {\n      return result;\n    }\n    const axes = parseAxisParam(axis, result.shape);\n\n    for (let i = 1; i < tensors.length; ++i) {\n      result = concat2Tensors(result, tensors[i], axes[0]);\n    }\n    return result;\n  }\n}\n\nfunction concat2Tensors<T extends Tensor>(a: T, b: T, axis: number): T {\n  concat_util.assertParams(a.shape, b.shape, axis);\n  const outShape = concat_util.computeOutShape(a.shape, b.shape, axis);\n\n  // Do the reshape.\n  const a2D = a.as2D(-1, util.sizeFromShape(a.shape.slice(axis)));\n  const b2D = b.as2D(-1, util.sizeFromShape(b.shape.slice(axis)));\n  // Concats 2d tensors along axis=1. See comments in MathBackend.concat().\n  const {aBegin, aSize, bBegin, bSize} =\n      concat_util.computeGradientSliceShapes(a2D.shape, b2D.shape);\n  const der = (dy: Tensor2D) => {\n    return {a: () => dy.slice(aBegin, aSize), b: () => dy.slice(bBegin, bSize)};\n  };\n  const res = ENV.engine.runKernel(\n      backend => backend.concat(a2D, b2D), {a: a2D, b: b2D}, der);\n  return res.reshape(outShape) as T;\n}\n"]}},"hash":"ce56e3aa5b63b8745b75397a418f3d80","cacheData":{"env":{}}}