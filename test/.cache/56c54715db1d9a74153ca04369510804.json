{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524062920943},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./operation","loc":{"line":12,"column":26}},{"name":"./slice_util","loc":{"line":13,"column":25}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar operation_1 = require(\"./operation\");\nvar slice_util = require(\"./slice_util\");\nvar SliceOps = (function () {\n    function SliceOps() {\n    }\n    SliceOps.slice1d = function (x, begin, size) {\n        util.assert(x.rank === 1, \"slice1d expects a rank-1 tensor, but got a rank-\" + x.rank + \" tensor\");\n        return SliceOps.slice(x, [begin], [size]);\n    };\n    SliceOps.slice2d = function (x, begin, size) {\n        util.assert(x.rank === 2, \"slice1d expects a rank-2 tensor, but got a rank-\" + x.rank + \" tensor\");\n        return SliceOps.slice(x, begin, size);\n    };\n    SliceOps.slice3d = function (x, begin, size) {\n        util.assert(x.rank === 3, \"slice1d expects a rank-3 tensor, but got a rank-\" + x.rank + \" tensor\");\n        return SliceOps.slice(x, begin, size);\n    };\n    SliceOps.slice4d = function (x, begin, size) {\n        util.assert(x.rank === 4, \"slice1d expects a rank-4 tensor, but got a rank-\" + x.rank + \" tensor\");\n        return SliceOps.slice(x, begin, size);\n    };\n    SliceOps.slice = function (x, begin, size) {\n        util.assertArgumentsAreTensors({ x: x }, 'slice');\n        if (x.rank === 0) {\n            throw new Error('Slicing scalar is not possible');\n        }\n        var begin_;\n        if (typeof begin === 'number') {\n            begin_ = [begin].concat(new Array(x.rank - 1).fill(0));\n        }\n        else if (begin.length < x.rank) {\n            begin_ = begin.concat(new Array(x.rank - begin.length).fill(0));\n        }\n        else {\n            begin_ = begin;\n        }\n        var size_;\n        if (size == null) {\n            size_ = new Array(x.rank).fill(-1);\n        }\n        else if (typeof size === 'number') {\n            size_ = [size].concat(new Array(x.rank - 1).fill(-1));\n        }\n        else if (size.length < x.rank) {\n            size_ = size.concat(new Array(x.rank - size.length).fill(-1));\n        }\n        else {\n            size_ = size;\n        }\n        size_ = size_.map(function (d, i) {\n            if (d >= 0) {\n                return d;\n            }\n            else {\n                util.assert(d === -1, 'Bad value in size');\n                return x.shape[i] - begin_[i];\n            }\n        });\n        slice_util.assertParamsValid(x, begin_, size_);\n        var inputShape = x.shape;\n        var grad = function (dy) {\n            var paddings = [];\n            for (var i = 0; i < dy.rank; i++) {\n                paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n            }\n            return { x: function () { return dy.pad(paddings); } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.slice(x, begin_, size_); }, { x: x }, grad);\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\n        operation_1.operation\n    ], SliceOps, \"slice\", null);\n    return SliceOps;\n}());\nexports.SliceOps = SliceOps;\n","map":{"version":3,"file":"slice.js","sourceRoot":"","sources":["../src/ops/slice.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {doc} from '../doc';\nimport {ENV} from '../environment';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {Rank} from '../types';\nimport * as util from '../util';\nimport {operation} from './operation';\nimport * as slice_util from './slice_util';\n\nexport class SliceOps {\n  /**\n   * Extracts a 1D slice from 1D array starting at coordinates `begin` and is\n   * of length `size`. See `slice` for details.\n   */\n  static slice1d(x: Tensor1D, begin: number, size: number): Tensor1D {\n    util.assert(\n        x.rank === 1,\n        `slice1d expects a rank-1 tensor, but got a rank-${x.rank} tensor`);\n    return SliceOps.slice(x, [begin], [size]);\n  }\n\n  /**\n   * Extracts a 2D slice from a 2D array starting at coordinates `begin` and\n   * is of size `size`. See `slice` for details.\n   */\n  static slice2d(x: Tensor2D, begin: [number, number], size: [number, number]):\n      Tensor2D {\n    util.assert(\n        x.rank === 2,\n        `slice1d expects a rank-2 tensor, but got a rank-${x.rank} tensor`);\n    return SliceOps.slice(x, begin, size);\n  }\n\n  /**\n   * Extracts a 3D slice from a 3D array starting at coordinates `begin` and\n   * is of size `size`. See `slice` for details.\n   */\n  static slice3d(x: Tensor3D, begin: [number, number, number], size: [\n    number, number, number\n  ]): Tensor3D {\n    util.assert(\n        x.rank === 3,\n        `slice1d expects a rank-3 tensor, but got a rank-${x.rank} tensor`);\n    return SliceOps.slice(x, begin, size);\n  }\n\n  /**\n   * Extracts a 4D slice from a 4D array starting at coordinates `begin` and\n   * is of size `size`. See `slice` for details.\n   */\n  static slice4d(x: Tensor4D, begin: [number, number, number, number], size: [\n    number, number, number, number\n  ]): Tensor4D {\n    util.assert(\n        x.rank === 4,\n        `slice1d expects a rank-4 tensor, but got a rank-${x.rank} tensor`);\n    return SliceOps.slice(x, begin, size);\n  }\n\n  /**\n   * Extracts a slice from a `Tensor` starting at coordinates `begin`\n   * and is of size `size`.\n   *\n   * Also available are stricter rank-specific methods with the same signature\n   * as this method that assert that `x` is of the given rank:\n   *   - `tf.slice1d`\n   *   - `tf.slice2d`\n   *   - `tf.slice3d`\n   *   - `tf.slice4d`\n   *\n   * ```js\n   * const x = tf.tensor1d([1, 2, 3, 4]);\n   *\n   * x.slice([1], [2]).print();\n   * ```\n   *\n   * ```js\n   * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n   *\n   * x.slice([1, 0], [1, 2]).print();\n   * ```\n   * @param x The input `Tensor` to slice from.\n   * @param begin The coordinates to start the slice from. The length can be\n   *     less than the rank of x - the rest of the axes will have implicit 0 as\n   *     start. Can also be a single number, in which case it specifies the\n   *     first axis.\n   * @param size The size of the slice. The length can be less than the rank of\n   *     x - the rest of the axes will have implicit -1. A value of -1 requests\n   *     the rest of the dimensions in the axis. Can also be a single number,\n   *     in which case it specifies the size of the first axis.\n   */\n  @doc({heading: 'Tensors', subheading: 'Slicing and Joining'})\n  @operation\n  static slice<R extends Rank, T extends Tensor<R>>(\n      x: T, begin: number|number[], size?: number|number[]): T {\n    util.assertArgumentsAreTensors({x}, 'slice');\n\n    if (x.rank === 0) {\n      throw new Error('Slicing scalar is not possible');\n    }\n    // The following logic allows for more ergonomic calls.\n    let begin_: number[];\n    if (typeof begin === 'number') {\n      begin_ = [begin, ...new Array(x.rank - 1).fill(0)];\n    } else if (begin.length < x.rank) {\n      begin_ = begin.concat(new Array(x.rank - begin.length).fill(0));\n    } else {\n      begin_ = begin;\n    }\n    let size_: number[];\n    if (size == null) {\n      size_ = new Array(x.rank).fill(-1);\n    } else if (typeof size === 'number') {\n      size_ = [size, ...new Array(x.rank - 1).fill(-1)];\n    } else if (size.length < x.rank) {\n      size_ = size.concat(new Array(x.rank - size.length).fill(-1));\n    } else {\n      size_ = size;\n    }\n    size_ = size_.map((d, i) => {\n      if (d >= 0) {\n        return d;\n      } else {\n        util.assert(d === -1, 'Bad value in size');\n        return x.shape[i] - begin_[i];\n      }\n    });\n    slice_util.assertParamsValid(x, begin_, size_);\n    const inputShape = x.shape;\n    const grad = (dy: T) => {\n      // Create an Nx2 padding where the first column represents how many\n      // zeros are prepended (at start) for each dimension, and the second\n      // column indicates how many zeros are appended (at end).\n\n      // The number of zeros to append is the shape of the input\n      // elementwise-subtracted by both the begin vector and sizes vector.\n      const paddings: Array<[number, number]> = [];\n      for (let i = 0; i < dy.rank; i++) {\n        paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n      }\n      return {x: () => dy.pad(paddings)};\n    };\n    return ENV.engine.runKernel(\n               backend => backend.slice(x, begin_, size_), {x}, grad) as T;\n  }\n}\n"]}},"hash":"e8667b257f0ac51842201b6cea0ce5db","cacheData":{"env":{}}}