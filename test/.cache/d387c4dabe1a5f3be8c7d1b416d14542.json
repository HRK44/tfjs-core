{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524062920943},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../util","loc":{"line":10,"column":19}},{"name":"./array_ops","loc":{"line":11,"column":26}},{"name":"./binary_ops","loc":{"line":12,"column":27}},{"name":"./operation","loc":{"line":13,"column":26}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar util = require(\"../util\");\nvar array_ops_1 = require(\"./array_ops\");\nvar binary_ops_1 = require(\"./binary_ops\");\nvar operation_1 = require(\"./operation\");\nvar MovingAverageOps = (function () {\n    function MovingAverageOps() {\n    }\n    MovingAverageOps.movingAverage = function (v, x, decay, step, zeroDebias) {\n        if (zeroDebias === void 0) { zeroDebias = true; }\n        util.assertArgumentsAreTensors({ v: v, x: x }, 'movingAverage');\n        util.assertTypesMatch(v, x);\n        util.assert(util.arraysEqual(v.shape, x.shape), 'Shape mismatch in v and x');\n        var one = array_ops_1.ArrayOps.scalar(1);\n        decay = typeof decay === 'number' ? array_ops_1.ArrayOps.scalar(decay) : decay;\n        var oneMinusDecay = one.sub(decay);\n        var update = x.sub(v).mul(oneMinusDecay);\n        if (zeroDebias) {\n            util.assert(step != null, 'When using zeroDebias: true, step is required.');\n            step = typeof step === 'number' ? array_ops_1.ArrayOps.scalar(step) : step;\n            update = update.div(one.sub(binary_ops_1.BinaryOps.pow(decay, step)));\n        }\n        return v.add(update);\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Moving Average' }),\n        operation_1.operation\n    ], MovingAverageOps, \"movingAverage\", null);\n    return MovingAverageOps;\n}());\nexports.MovingAverageOps = MovingAverageOps;\n","map":{"version":3,"file":"moving_average.js","sourceRoot":"","sources":["../src/ops/moving_average.ts"],"names":[],"mappings":";;;;;;;;AAiBA,8BAA2B;AAE3B,8BAAgC;AAChC,yCAAqC;AACrC,2CAAuC;AACvC,yCAAsC;AAEtC;IAAA;IAkDA,CAAC;IArBQ,8BAAa,GAApB,UACI,CAAI,EAAE,CAAI,EAAE,KAAoB,EAAE,IAAoB,EACtD,UAAiB;QAAjB,2BAAA,EAAA,iBAAiB;QACnB,IAAI,CAAC,yBAAyB,CAAC,EAAC,CAAC,GAAA,EAAE,CAAC,GAAA,EAAC,EAAE,eAAe,CAAC,CAAC;QACxD,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,MAAM,CACP,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,2BAA2B,CAAC,CAAC;QAErE,IAAM,GAAG,GAAG,oBAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC/B,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,oBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QACnE,IAAM,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAErC,IAAI,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,MAAM,CACP,IAAI,IAAI,IAAI,EAAE,gDAAgD,CAAC,CAAC;YACpE,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC/D,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,sBAAS,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC;QACD,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACvB,CAAC;IApBD;QAFC,SAAG,CAAC,EAAC,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,gBAAgB,EAAC,CAAC;QAC1D,qBAAS;+CAqBT;IACH,uBAAC;CAAA,AAlDD,IAkDC;AAlDY,4CAAgB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {doc} from '../doc';\nimport {Scalar, Tensor} from '../tensor';\nimport * as util from '../util';\nimport {ArrayOps} from './array_ops';\nimport {BinaryOps} from './binary_ops';\nimport {operation} from './operation';\n\nexport class MovingAverageOps {\n  /**\n   * Compute the moving average of a variable.\n   *\n   * Without zeroDebias, the moving average operation is defined by:\n   *   `v += delta`\n   * where\n   *   `delta = (1 - decay) * (x - v)`\n   *\n   * With zeroDebias (default), the `delta` term is scaled to debias the\n   * effect of the (assumed) zero-initialization of `v`.\n   *   `delta /= (1 - decay ^ step)`\n   *\n   * For more details on the zero-debiasing algorithm, see:\n   *   https://arxiv.org/abs/1412.6980\n   *\n   * Note that this function is completely stateless and does not keep track of\n   * step count. The step count needs to be maintained by the caller and passed\n   * in as `step`.\n   *\n   * @param v The current moving average value.\n   * @param x New input value, must have the same shape and dtype as `v`.\n   * @param decay The decay factor. Typical values are 0.95 and 0.99.\n   * @param step Step count.\n   * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).\n   * @returns The new moving average value.\n   */\n  @doc({heading: 'Operations', subheading: 'Moving Average'})\n  @operation\n  static movingAverage<T extends Tensor>(\n      v: T, x: T, decay: number|Scalar, step?: number|Scalar,\n      zeroDebias = true): T {\n    util.assertArgumentsAreTensors({v, x}, 'movingAverage');\n    util.assertTypesMatch(v, x);\n    util.assert(\n        util.arraysEqual(v.shape, x.shape), 'Shape mismatch in v and x');\n\n    const one = ArrayOps.scalar(1);\n    decay = typeof decay === 'number' ? ArrayOps.scalar(decay) : decay;\n    const oneMinusDecay = one.sub(decay);\n\n    let update = x.sub(v).mul(oneMinusDecay);\n    if (zeroDebias) {\n      util.assert(\n          step != null, 'When using zeroDebias: true, step is required.');\n      step = typeof step === 'number' ? ArrayOps.scalar(step) : step;\n      update = update.div(one.sub(BinaryOps.pow(decay, step)));\n    }\n    return v.add(update);\n  }\n}\n"]}},"hash":"82892658831db1dd94c73ea807afd0fb","cacheData":{"env":{}}}