{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./operation","loc":{"line":12,"column":26}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar operation_1 = require(\"./operation\");\nvar StridedSliceOps = (function () {\n    function StridedSliceOps() {\n    }\n    StridedSliceOps.stridedSlice = function (x, begin, end, strides, beginMask, endMask) {\n        if (beginMask === void 0) { beginMask = 0; }\n        if (endMask === void 0) { endMask = 0; }\n        util.assertArgumentsAreTensors({ x: x }, 'stridedSlice');\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.stridedSlice(x, begin, end, strides, beginMask, endMask); }, { x: x });\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Slicing and Joining' }),\n        operation_1.operation\n    ], StridedSliceOps, \"stridedSlice\", null);\n    return StridedSliceOps;\n}());\nexports.StridedSliceOps = StridedSliceOps;\n","map":{"version":3,"file":"strided_slice.js","sourceRoot":"","sources":["../src/ops/strided_slice.ts"],"names":[],"mappings":";;;;;;;;AAiBA,8BAA2B;AAC3B,8CAAmC;AAEnC,8BAAgC;AAEhC,yCAAsC;AAEtC;IAAA;IAyCA,CAAC;IAVQ,4BAAY,GAAnB,UACI,CAAI,EAAE,KAAe,EAAE,GAAa,EAAE,OAAiB,EAAE,SAAa,EACtE,OAAW;QAD8C,0BAAA,EAAA,aAAa;QACtE,wBAAA,EAAA,WAAW;QACb,IAAI,CAAC,yBAAyB,CAAC,EAAC,CAAC,GAAA,EAAC,EAAE,cAAc,CAAC,CAAC;QAEpD,MAAM,CAAC,iBAAG,CAAC,MAAM,CAAC,SAAS,CAChB,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,YAAY,CAC3B,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,EADpC,CACoC,EAC/C,EAAC,CAAC,GAAA,EAAC,CAAM,CAAC;IACvB,CAAC;IATD;QAFC,SAAG,CAAC,EAAC,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,qBAAqB,EAAC,CAAC;QAC/D,qBAAS;6CAUT;IACH,sBAAC;CAAA,AAzCD,IAyCC;AAzCY,0CAAe","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {doc} from '../doc';\nimport {ENV} from '../environment';\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\nimport {operation} from './operation';\n\nexport class StridedSliceOps {\n  /**\n   * Extracts a strided slice of a tensor.\n   *\n   * Roughly speaking, this op extracts a slice of size (end-begin)/stride from\n   * the given input_ tensor. Starting at the location specified by begin the\n   * slice continues by adding stride to the index until all dimensions are not\n   * less than end. Note that a stride can be negative, which causes a reverse\n   * slice.\n   *\n   * ```js\n   * t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\n   *    [3, 2, 3]);\n   * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\n   * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\n   *                                                     // [4, 4, 4]]]\n   * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\n   *                                                     // [3, 3, 3]]]\n   * ```\n   *\n   * @param x The tensor to stride slice.\n   * @param begin The coordinates to start the slice from.\n   * @param end: The coordinates to end the slice at.\n   * @param strides: The size of the slice.\n   * @param beginMask: If the ith bit of begin_mask is set, begin[i] is ignored\n   *      and the fullest possible range in that dimension is used instead.\n   * @param endMask: If the ith bit of end_mask is set, end[i] is ignored\n   *      and the fullest possible range in that dimension is used instead.\n   */\n  @doc({heading: 'Operations', subheading: 'Slicing and Joining'})\n  @operation\n  static stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[], beginMask = 0,\n      endMask = 0): T {\n    util.assertArgumentsAreTensors({x}, 'stridedSlice');\n\n    return ENV.engine.runKernel(\n               backend => backend.stridedSlice(\n                   x, begin, end, strides, beginMask, endMask),\n               {x}) as T;\n  }\n}\n"]}},"hash":"9dbd17b0c49550e661434f8b387b2dfa","cacheData":{"env":{}}}