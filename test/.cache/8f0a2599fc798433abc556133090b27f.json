{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1528810356568},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1525096773813},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1528810356568},{"name":"../../environment","loc":{"line":38,"column":28}},{"name":"./tex_util","loc":{"line":39,"column":23}},{"name":"./webgl_util","loc":{"line":40,"column":25}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../../environment\");\nvar tex_util = require(\"./tex_util\");\nvar webgl_util = require(\"./webgl_util\");\nfunction getWebGLContextAttributes() {\n    return {\n        alpha: false,\n        antialias: false,\n        premultipliedAlpha: false,\n        preserveDrawingBuffer: false,\n        depth: false,\n        stencil: false,\n        failIfMajorPerformanceCaveat: true\n    };\n}\nexports.getWebGLContextAttributes = getWebGLContextAttributes;\nfunction createWebGLContext(canvas) {\n    var attributes = getWebGLContextAttributes();\n    var gl;\n    if (canvas != null) {\n        gl = webgl_util.createWebGLRenderingContextFromCanvas(canvas, attributes);\n    }\n    else {\n        gl = webgl_util.createWebGLRenderingContext(attributes);\n    }\n    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.DEPTH_TEST); });\n    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.STENCIL_TEST); });\n    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.BLEND); });\n    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.DITHER); });\n    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.POLYGON_OFFSET_FILL); });\n    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.SAMPLE_COVERAGE); });\n    webgl_util.callAndCheck(gl, function () { return gl.enable(gl.SCISSOR_TEST); });\n    webgl_util.callAndCheck(gl, function () { return gl.enable(gl.CULL_FACE); });\n    webgl_util.callAndCheck(gl, function () { return gl.cullFace(gl.BACK); });\n    return gl;\n}\nexports.createWebGLContext = createWebGLContext;\nfunction createVertexShader(gl) {\n    var vertexShaderSource = \"\\n    precision highp float;\\n    attribute vec3 clipSpacePos;\\n    attribute vec2 uv;\\n    varying vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\";\n    return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexports.createVertexShader = createVertexShader;\nfunction createVertexBuffer(gl) {\n    var vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n    return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexports.createVertexBuffer = createVertexBuffer;\nfunction createIndexBuffer(gl) {\n    var triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nexports.createIndexBuffer = createIndexBuffer;\nvar LOOKUP = {};\nfunction getTextureConfig(gl, textureHalfFloatExtension) {\n    var glany = gl;\n    LOOKUP[gl.RGBA] = 'RGBA';\n    LOOKUP[gl.UNSIGNED_BYTE] = 'UNSIGNED_BYTE';\n    if (glany.RED != null) {\n        LOOKUP[glany.RED] = 'RED';\n    }\n    if (glany.R32F != null) {\n        LOOKUP[glany.R32F] = 'RGBA';\n    }\n    if (glany.HALF_FLOAT != null) {\n        LOOKUP[glany.HALF_FLOAT] = 'HALF_FLOAT';\n    }\n    if (glany.FLOAT != null) {\n        LOOKUP[glany.FLOAT] = 'FLOAT';\n    }\n    if (textureHalfFloatExtension != null) {\n        LOOKUP[textureHalfFloatExtension.HALF_FLOAT_OES] = 'HALF_FLOAT_OES';\n    }\n    var internalFormatFloat;\n    var internalFormatHalfFloat;\n    var internalFormatPackedFloat;\n    var textureFormatFloat;\n    var downloadTextureFormat;\n    var downloadUnpackNumChannels;\n    var defaultNumChannels;\n    var textureTypeHalfFloat;\n    if (environment_1.ENV.get('WEBGL_VERSION') === 2) {\n        internalFormatFloat = glany.R32F;\n        internalFormatHalfFloat = glany.R16F;\n        internalFormatPackedFloat = glany.RGBA32F;\n        textureFormatFloat = glany.RED;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 1;\n        textureTypeHalfFloat = glany.HALF_FLOAT;\n    }\n    else {\n        internalFormatFloat = gl.RGBA;\n        internalFormatHalfFloat = gl.RGBA;\n        internalFormatPackedFloat = glany.RGBA;\n        textureFormatFloat = gl.RGBA;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 4;\n        textureTypeHalfFloat = textureHalfFloatExtension != null ?\n            textureHalfFloatExtension.HALF_FLOAT_OES :\n            null;\n    }\n    downloadTextureFormat = gl.RGBA;\n    return {\n        internalFormatFloat: internalFormatFloat,\n        internalFormatHalfFloat: internalFormatHalfFloat,\n        internalFormatPackedFloat: internalFormatPackedFloat,\n        textureFormatFloat: textureFormatFloat,\n        downloadTextureFormat: downloadTextureFormat,\n        downloadUnpackNumChannels: downloadUnpackNumChannels,\n        defaultNumChannels: defaultNumChannels,\n        textureTypeHalfFloat: textureTypeHalfFloat\n    };\n}\nexports.getTextureConfig = getTextureConfig;\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n    webgl_util.validateTextureSize(gl, width, height);\n    var texture = webgl_util.createTexture(gl);\n    var tex2d = gl.TEXTURE_2D;\n    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(tex2d, texture); });\n    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE); });\n    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); });\n    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST); });\n    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST); });\n    webgl_util.callAndCheck(gl, function () { return gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null); });\n    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });\n    return texture;\n}\nfunction createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];\n    return createAndConfigureTexture(gl, width, height, textureConfig.internalFormatFloat, textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexports.createFloat32MatrixTexture = createFloat32MatrixTexture;\nfunction createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];\n    return createAndConfigureTexture(gl, width, height, textureConfig.internalFormatFloat, textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexports.createFloat16MatrixTexture = createFloat16MatrixTexture;\nfunction createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];\n    return createAndConfigureTexture(gl, width, height, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexports.createUnsignedBytesMatrixTexture = createUnsignedBytesMatrixTexture;\nfunction createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];\n    return createAndConfigureTexture(gl, width, height, textureConfig.internalFormatPackedFloat, gl.RGBA, gl.FLOAT);\n}\nexports.createPackedMatrixTexture = createPackedMatrixTexture;\nfunction bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n    var posOffset = 0;\n    var uvOffset = 3 * 4;\n    var stride = (3 * 4) + (2 * 4);\n    webgl_util.callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer); });\n    var success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n    return success &&\n        webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexports.bindVertexProgramAttributeStreams = bindVertexProgramAttributeStreams;\nfunction uploadPixelDataToTexture(gl, texture, pixels) {\n    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, texture); });\n    webgl_util.callAndCheck(gl, function () { return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels); });\n    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });\n}\nexports.uploadPixelDataToTexture = uploadPixelDataToTexture;\nfunction uploadDataToTexture(gl, texture, width, height, data, textureFormat) {\n    webgl_util.validateTextureSize(gl, width, height);\n    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, texture); });\n    webgl_util.callAndCheck(gl, function () { return gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, textureFormat, gl.FLOAT, data); });\n    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });\n}\nfunction uploadMatrixToTexture(gl, texture, rows, columns, matrix, numChannels, textureConfig) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];\n    var unpackedArray;\n    if (textureConfig.defaultNumChannels === 1) {\n        unpackedArray = matrix;\n    }\n    else {\n        unpackedArray =\n            new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(matrix.length, numChannels));\n        tex_util.encodeMatrixToUnpackedArray(matrix, unpackedArray, numChannels);\n    }\n    uploadDataToTexture(gl, texture, w, h, unpackedArray, textureConfig.textureFormatFloat);\n}\nexports.uploadMatrixToTexture = uploadMatrixToTexture;\nfunction uploadMatrixToPackedTexture(gl, texture, rows, columns, matrix, textureConfig) {\n    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];\n    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));\n    tex_util.encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA);\n    uploadDataToTexture(gl, texture, w, h, packedRGBA, gl.RGBA);\n}\nexports.uploadMatrixToPackedTexture = uploadMatrixToPackedTexture;\nfunction downloadMatrixFromOutputTextureAsync(gl, getBufferSubDataAsyncExtension, rows, columns, textureConfig) {\n    return __awaiter(this, void 0, void 0, function () {\n        var gl2, downloadTarget, bufferSizeBytes, buffer, matrix;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    gl2 = gl;\n                    downloadTarget = new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, textureConfig.downloadUnpackNumChannels));\n                    bufferSizeBytes = downloadTarget instanceof Float32Array ?\n                        downloadTarget.length * 4 :\n                        downloadTarget;\n                    buffer = gl.createBuffer();\n                    webgl_util.callAndCheck(gl, function () { return gl.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer); });\n                    webgl_util.callAndCheck(gl, function () { return gl.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl.STATIC_DRAW); });\n                    webgl_util.callAndCheck(gl, function () { return gl2.readPixels(0, 0, columns, rows, gl.RGBA, gl.FLOAT, 0); });\n                    return [4, getBufferSubDataAsyncExtension.getBufferSubDataAsync(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget)];\n                case 1:\n                    _a.sent();\n                    matrix = new Float32Array(rows * columns);\n                    tex_util.decodeMatrixFromUnpackedArray(downloadTarget, matrix, textureConfig.downloadUnpackNumChannels);\n                    return [2, matrix];\n            }\n        });\n    });\n}\nexports.downloadMatrixFromOutputTextureAsync = downloadMatrixFromOutputTextureAsync;\nfunction downloadFloat32MatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];\n    var downloadTarget = new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, textureConfig.downloadUnpackNumChannels));\n    webgl_util.callAndCheck(gl, function () { return gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.FLOAT, downloadTarget); });\n    var matrix = new Float32Array(rows * columns);\n    tex_util.decodeMatrixFromUnpackedArray(downloadTarget, matrix, textureConfig.downloadUnpackNumChannels);\n    return matrix;\n}\nexports.downloadFloat32MatrixFromOutputTexture = downloadFloat32MatrixFromOutputTexture;\nfunction downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];\n    var numChannels = 4;\n    var downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n    webgl_util.callAndCheck(gl, function () { return gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget); });\n    return new Float32Array(downloadTarget.buffer);\n}\nexports.downloadByteEncodedFloatMatrixFromOutputTexture = downloadByteEncodedFloatMatrixFromOutputTexture;\nfunction downloadMatrixFromPackedOutputTexture(gl, rows, columns, textureConfig) {\n    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];\n    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));\n    webgl_util.callAndCheck(gl, function () { return gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, packedRGBA); });\n    var matrix = new Float32Array(rows * columns);\n    return tex_util.decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix);\n}\nexports.downloadMatrixFromPackedOutputTexture = downloadMatrixFromPackedOutputTexture;\n","map":{"version":3,"file":"gpgpu_util.js","sourceRoot":"","sources":["../src/kernels/webgl/gpgpu_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../../environment';\n\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function getWebGLContextAttributes(): WebGLContextAttributes {\n  return {\n    alpha: false,\n    antialias: false,\n    premultipliedAlpha: false,\n    preserveDrawingBuffer: false,\n    depth: false,\n    stencil: false,\n    failIfMajorPerformanceCaveat: true\n  };\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n}\n\nexport function createWebGLContext(canvas?: HTMLCanvasElement) {\n  const attributes = getWebGLContextAttributes();\n  let gl: WebGLRenderingContext;\n  if (canvas != null) {\n    gl = webgl_util.createWebGLRenderingContextFromCanvas(canvas, attributes);\n  } else {\n    gl = webgl_util.createWebGLRenderingContext(attributes);\n  }\n  webgl_util.callAndCheck(gl, () => gl.disable(gl.DEPTH_TEST));\n  webgl_util.callAndCheck(gl, () => gl.disable(gl.STENCIL_TEST));\n  webgl_util.callAndCheck(gl, () => gl.disable(gl.BLEND));\n  webgl_util.callAndCheck(gl, () => gl.disable(gl.DITHER));\n  webgl_util.callAndCheck(gl, () => gl.disable(gl.POLYGON_OFFSET_FILL));\n  webgl_util.callAndCheck(gl, () => gl.disable(gl.SAMPLE_COVERAGE));\n  webgl_util.callAndCheck(gl, () => gl.enable(gl.SCISSOR_TEST));\n  webgl_util.callAndCheck(gl, () => gl.enable(gl.CULL_FACE));\n  webgl_util.callAndCheck(gl, () => gl.cullFace(gl.BACK));\n\n  return gl;\n}\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const vertexShaderSource = `\n    precision highp float;\n    attribute vec3 clipSpacePos;\n    attribute vec2 uv;\n    varying vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nconst LOOKUP: {[key: number]: string} = {};\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  LOOKUP[gl.RGBA] = 'RGBA';\n  LOOKUP[gl.UNSIGNED_BYTE] = 'UNSIGNED_BYTE';\n  if (glany.RED != null) {\n    LOOKUP[glany.RED] = 'RED';\n  }\n  if (glany.R32F != null) {\n    LOOKUP[glany.R32F] = 'RGBA';\n  }\n  if (glany.HALF_FLOAT != null) {\n    LOOKUP[glany.HALF_FLOAT] = 'HALF_FLOAT';\n  }\n  if (glany.FLOAT != null) {\n    LOOKUP[glany.FLOAT] = 'FLOAT';\n  }\n  if (textureHalfFloatExtension != null) {\n    LOOKUP[textureHalfFloatExtension.HALF_FLOAT_OES] = 'HALF_FLOAT_OES';\n  }\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n\n  if (ENV.get('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat\n  };\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): WebGLTexture {\n  webgl_util.validateTextureSize(gl, width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          tex2d, 0, internalFormat, width, height, 0, textureFormat,\n          textureType, null));\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return texture;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, textureConfig.internalFormatFloat,\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, textureConfig.internalFormatFloat,\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, textureConfig.internalFormatPackedFloat, gl.RGBA,\n      gl.FLOAT);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nfunction uploadDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: Float32Array, textureFormat: number) {\n  webgl_util.validateTextureSize(gl, width, height);\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texSubImage2D(\n          gl.TEXTURE_2D, 0, 0, 0, width, height, textureFormat, gl.FLOAT,\n          data));\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, rows: number,\n    columns: number, matrix: Float32Array, numChannels: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  let unpackedArray: Float32Array;\n  if (textureConfig.defaultNumChannels === 1) {\n    // No need to allocate a temporary array.\n    unpackedArray = matrix;\n  } else {\n    unpackedArray =\n        new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(\n            matrix.length, numChannels));\n    tex_util.encodeMatrixToUnpackedArray(matrix, unpackedArray, numChannels);\n  }\n\n  uploadDataToTexture(\n      gl, texture, w, h, unpackedArray, textureConfig.textureFormatFloat);\n}\n\nexport function uploadMatrixToPackedTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, rows: number,\n    columns: number, matrix: Float32Array, textureConfig: TextureConfig) {\n  const [w, h] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  const packedRGBA = new Float32Array(\n      tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));\n  tex_util.encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA);\n  uploadDataToTexture(gl, texture, w, h, packedRGBA, gl.RGBA);\n}\n\nexport async function downloadMatrixFromOutputTextureAsync(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, getBufferSubDataAsyncExtension: any,\n    rows: number, columns: number,\n    textureConfig: TextureConfig): Promise<Float32Array> {\n  // tslint:disable-next-line:no-any\n  const gl2 = gl as any;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(\n          rows * columns, textureConfig.downloadUnpackNumChannels));\n\n  // Allocate a pixel pack buffer so we can copy the texture to it.\n  const bufferSizeBytes = downloadTarget instanceof Float32Array ?\n      downloadTarget.length * 4 :\n      downloadTarget;\n  const buffer = gl.createBuffer();\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl.STATIC_DRAW));\n\n  webgl_util.callAndCheck(\n      gl, () => gl2.readPixels(0, 0, columns, rows, gl.RGBA, gl.FLOAT, 0));\n\n  await getBufferSubDataAsyncExtension.getBufferSubDataAsync(\n      gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n\n  const matrix = new Float32Array(rows * columns);\n  tex_util.decodeMatrixFromUnpackedArray(\n      downloadTarget as Float32Array, matrix,\n      textureConfig.downloadUnpackNumChannels);\n  return matrix;\n}\n\nexport function downloadFloat32MatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Float32Array {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const downloadTarget =\n      new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(\n          rows * columns, textureConfig.downloadUnpackNumChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.FLOAT,\n          downloadTarget));\n\n  const matrix = new Float32Array(rows * columns);\n  tex_util.decodeMatrixFromUnpackedArray(\n      downloadTarget as Float32Array, matrix,\n      textureConfig.downloadUnpackNumChannels);\n  return matrix;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Float32Array {\n  const [w, h] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  const packedRGBA = new Float32Array(\n      tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));\n  webgl_util.callAndCheck(\n      gl, () => gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, packedRGBA));\n  const matrix = new Float32Array(rows * columns);\n  return tex_util.decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix);\n}\n"]}},"hash":"7cfbe32feec07cdb4cb413c790793746","cacheData":{"env":{}}}